using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Xsl;
using System.Xml.XPath;
using Microsoft.Content.BuildEngine.DataAccessorInterface;
using Microsoft.Content.BuildEngine.DataAccessor.Extensions;
using Microsoft.Content.WebService;
using System.Diagnostics;

namespace Microsoft.Content.BuildEngine.MRef.Stubbing
{
    class DirectlyCommentsTransform : IDdueTransform
    {
        #region fileds

        private IBlobAccessor blobAccessor;
        private string version;

        #endregion

        #region Const
        private const string charToReplaceColon = "@";
        private const string charToReplaceAsterisk = "!";
        #endregion

        public DirectlyCommentsTransform(IBlobAccessor blobAccessor, string version)
        {
            this.blobAccessor = blobAccessor;
            this.version = version;
        }

        private Tuple<long, XslCompiledTransform> GetDdueTemplate(StubbingContext context, HierarchyType type)
        {
            var templateName = HierarchyTypeHelper.GetDdueTemplateName(type);
            if (templateName == null)
                throw new ArgumentOutOfRangeException("type", string.Format("HierarchyType({0}) is invalid.", type));
            return context.TransformDic[templateName];
        }

        private string GetDevCommentFileName(string entityName)
        {
            return entityName.Replace(":", charToReplaceColon).Replace("*", charToReplaceAsterisk) + ".xml";
        }

        public ReflectionBlob GetDdueDocument(StubbingContext context, string version, HierarchyType type, string entityName, string fileName)
        {
            var transformContext = GetDdueTemplate(context, type);

            var devCommentFileName = GetDevCommentFileName(entityName);

            var result = new ReflectionBlob { BlobTypeId = transformContext.Item1 };

            var writerSettings = new XmlWriterSettings { Indent = true };

            var memoryStream = new MemoryStream();

            try
            {
                if (blobAccessor.Exists(version, BlobFileType.DeveloperComments, devCommentFileName))
                {
                    var stream = blobAccessor.OpenRead(version, BlobFileType.DeveloperComments, devCommentFileName);
                    stream.CopyTo(memoryStream);
                }
            }
            catch (Exception e)
            {
                Trace.WriteLine(e.Message);
            }

            if (memoryStream.Length == 0)
            {

                var assemblyName = GetAssemblyName(context, version, entityName, fileName);
                string autoGeneratedDdueXml = string.Format(DdueTemplates.template, assemblyName, entityName, DdueTemplates.templateOfSummary, DdueTemplates.templateOfGenericParameters,
                                                                DdueTemplates.templateOfParameters, DdueTemplates.templateOfReturnValue, DdueTemplates.templateOfExceptions,
                                                                DdueTemplates.templateOfRemarks, DdueTemplates.templateOfCodeExamples, DdueTemplates.templateOfRelatedTopics);

                result.BlobStorage = Encoding.UTF8.GetBytes(autoGeneratedDdueXml);
            }
            else
            {
                result.BlobStorage = memoryStream.ToArray();
            }
            
            return result;
        }

        private string GetAssemblyName(StubbingContext context, string version, string entityName, string fileName)
        {
            var reflectionXml = context.DataCache.GetReflectionXml(version, fileName);
            var reflectionXmlNav = reflectionXml.CreateNavigator();
            var path = String.Format("/reflection/apis/api[@id='{0}']", entityName);
            var apiNode = reflectionXmlNav.SelectSingleNode(path);
            var assemblyNameNode = apiNode.SelectSingleNode("containers/library/@assembly");
            return assemblyNameNode.ToString();
        }
    }
}
