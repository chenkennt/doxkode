{
  "Namespaces": [
    {
      "Classes": [
        {
          "InheritanceHierarchy": [
            "T:System.Object",
            "T:System.Collections.Generic.Dictionary{System.String,System.String}"
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public MarkdownCollectionCache(IEnumerable<string> mdFiles): base (mdFiles.Where(s => s.EndsWith(\".md\", StringComparison.OrdinalIgnoreCase)).SelectMany(s => MarkdownFile.Load(s).Sections).Where(s => s != null).ToDictionary(s => s.Id, s => s.MarkdownContent))",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.MarkdownCollectionCache.#ctor(System.Collections.Generic.IEnumerable{System.String})",
              "Parent": "T:DocAsCode.MergeDoc.MarkdownCollectionCache",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class MarkdownCollectionCache",
            "XmlDocumentation": ""
          },
          "Id": "T:DocAsCode.MergeDoc.MarkdownCollectionCache",
          "Parent": "N:DocAsCode.MergeDoc",
          "XmlDocumentation": ""
        },
        {
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : md": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ConvertToHTML(string md)",
                "XmlDocumentation": ""
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : md": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ConvertToHTML(string md)",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.MarkDownConvertor.ConvertToHTML(System.String)",
              "Parent": "T:DocAsCode.MergeDoc.MarkDownConvertor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.Dictionary{System.String,System.String} : iprm": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void init(Dictionary<string, string> iprm)",
                "XmlDocumentation": ""
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.Dictionary{System.String,System.String} : iprm": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void init(Dictionary<string, string> iprm)",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.MarkDownConvertor.init(System.Collections.Generic.Dictionary{System.String,System.String})",
              "Parent": "T:DocAsCode.MergeDoc.MarkDownConvertor",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : md": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ResolveAT(string md)",
                "XmlDocumentation": ""
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : md": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string ResolveAT(string md)",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.MarkDownConvertor.ResolveAT(System.String)",
              "Parent": "T:DocAsCode.MergeDoc.MarkDownConvertor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class MarkDownConvertor",
            "XmlDocumentation": ""
          },
          "Id": "T:DocAsCode.MergeDoc.MarkDownConvertor",
          "Parent": "N:DocAsCode.MergeDoc",
          "XmlDocumentation": ""
        },
        {
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:DocAsCode.MergeDoc.MarkdownFile": ""
                },
                "Content": "public static MarkdownFile Load(string filePath)",
                "XmlDocumentation": "<member name=\"M:DocAsCode.MergeDoc.MarkdownFile.Load(System.String)\">\r\n    <summary>\r\n    TODO: Load from md file\r\n    ---\r\n    method: A()\r\n    ---\r\n    </summary>\r\n    <param name=\"filePath\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : filePath": ""
                },
                "Returns": {
                  "T:DocAsCode.MergeDoc.MarkdownFile": ""
                },
                "Content": "public static MarkdownFile Load(string filePath)",
                "XmlDocumentation": "<member name=\"M:DocAsCode.MergeDoc.MarkdownFile.Load(System.String)\">\r\n    <summary>\r\n    TODO: Load from md file\r\n    ---\r\n    method: A()\r\n    ---\r\n    </summary>\r\n    <param name=\"filePath\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:DocAsCode.MergeDoc.MarkdownFile.Load(System.String)",
              "Parent": "T:DocAsCode.MergeDoc.MarkdownFile",
              "XmlDocumentation": "<member name=\"M:DocAsCode.MergeDoc.MarkdownFile.Load(System.String)\">\r\n    <summary>\r\n    TODO: Load from md file\r\n    ---\r\n    method: A()\r\n    ---\r\n    </summary>\r\n    <param name=\"filePath\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string FilePath",
                "XmlDocumentation": ""
              },
              "Id": "P:DocAsCode.MergeDoc.MarkdownFile.FilePath",
              "Parent": "T:DocAsCode.MergeDoc.MarkdownFile",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public IReadOnlyList<MarkdownSection> Sections",
                "XmlDocumentation": ""
              },
              "Id": "P:DocAsCode.MergeDoc.MarkdownFile.Sections",
              "Parent": "T:DocAsCode.MergeDoc.MarkdownFile",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class MarkdownFile",
            "XmlDocumentation": ""
          },
          "Id": "T:DocAsCode.MergeDoc.MarkdownFile",
          "Parent": "N:DocAsCode.MergeDoc",
          "XmlDocumentation": ""
        },
        {
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : tripleSlashStr": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.Dictionary{System.String,System.String}": ""
                },
                "Content": "static public Dictionary<string, string> Parse(string tripleSlashStr)",
                "XmlDocumentation": ""
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : tripleSlashStr": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.Dictionary{System.String,System.String}": ""
                },
                "Content": "static public Dictionary<string, string> Parse(string tripleSlashStr)",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.TripleSlashParser.Parse(System.String)",
              "Parent": "T:DocAsCode.MergeDoc.TripleSlashParser",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.Collections.Generic.SortedDictionary{System.String,System.String} : parameters": "",
                  "T:System.String : tripleSlashStr": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.SortedDictionary{System.String,System.String}": ""
                },
                "Content": "static public SortedDictionary<string, string> ParseParam(string tripleSlashStr, SortedDictionary<string, string> parameters)",
                "XmlDocumentation": ""
              },
              "Syntax": {
                "Parameters": {
                  "T:System.Collections.Generic.SortedDictionary{System.String,System.String} : parameters": "",
                  "T:System.String : tripleSlashStr": ""
                },
                "Returns": {
                  "T:System.Collections.Generic.SortedDictionary{System.String,System.String}": ""
                },
                "Content": "static public SortedDictionary<string, string> ParseParam(string tripleSlashStr, SortedDictionary<string, string> parameters)",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.TripleSlashParser.ParseParam(System.String,System.Collections.Generic.SortedDictionary{System.String,System.String})",
              "Parent": "T:DocAsCode.MergeDoc.TripleSlashParser",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class TripleSlashParser",
            "XmlDocumentation": "<member name=\"T:DocAsCode.MergeDoc.TripleSlashParser\">\r\n    <summary>\r\n    Resolve the triple slashes\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:DocAsCode.MergeDoc.TripleSlashParser",
          "Parent": "N:DocAsCode.MergeDoc",
          "XmlDocumentation": "<member name=\"T:DocAsCode.MergeDoc.TripleSlashParser\">\r\n    <summary>\r\n    Resolve the triple slashes\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:DocAsCode.MergeDoc.MarkdownCollectionCache : markdownCollectionCache": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void resolveContent(MarkdownCollectionCache markdownCollectionCache)",
                "XmlDocumentation": ""
              },
              "Syntax": {
                "Parameters": {
                  "T:DocAsCode.MergeDoc.MarkdownCollectionCache : markdownCollectionCache": ""
                },
                "Returns": {
                  "T:System.Void": ""
                },
                "Content": "public void resolveContent(MarkdownCollectionCache markdownCollectionCache)",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.ViewModel.resolveContent(DocAsCode.MergeDoc.MarkdownCollectionCache)",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : id": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string resolveLink(string id)",
                "XmlDocumentation": ""
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : id": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string resolveLink(string id)",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.ViewModel.resolveLink(System.String)",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            },
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:DocAsCode.EntityModel.MemberDocMetadata : mta": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string resolveName(MemberDocMetadata mta)",
                "XmlDocumentation": ""
              },
              "Syntax": {
                "Parameters": {
                  "T:DocAsCode.EntityModel.MemberDocMetadata : mta": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string resolveName(MemberDocMetadata mta)",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.ViewModel.resolveName(DocAsCode.EntityModel.MemberDocMetadata)",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "assemblyMta",
                "XmlDocumentation": ""
              },
              "Id": "F:DocAsCode.MergeDoc.ViewModel.assemblyMta",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "baseURL",
                "XmlDocumentation": ""
              },
              "Id": "F:DocAsCode.MergeDoc.ViewModel.baseURL",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "classMta",
                "XmlDocumentation": ""
              },
              "Id": "F:DocAsCode.MergeDoc.ViewModel.classMta",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "idDisplayNameRelativeMapping",
                "XmlDocumentation": ""
              },
              "Id": "F:DocAsCode.MergeDoc.ViewModel.idDisplayNameRelativeMapping",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "idPathRelativeMapping",
                "XmlDocumentation": ""
              },
              "Id": "F:DocAsCode.MergeDoc.ViewModel.idPathRelativeMapping",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "methodMta",
                "XmlDocumentation": ""
              },
              "Id": "F:DocAsCode.MergeDoc.ViewModel.methodMta",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "namespaceMta",
                "XmlDocumentation": ""
              },
              "Id": "F:DocAsCode.MergeDoc.ViewModel.namespaceMta",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ViewModel(AssemblyDocMetadata assemblyMta)",
                "XmlDocumentation": ""
              },
              "Id": "M:DocAsCode.MergeDoc.ViewModel.#ctor(DocAsCode.EntityModel.AssemblyDocMetadata)",
              "Parent": "T:DocAsCode.MergeDoc.ViewModel",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ViewModel",
            "XmlDocumentation": ""
          },
          "Id": "T:DocAsCode.MergeDoc.ViewModel",
          "Parent": "N:DocAsCode.MergeDoc",
          "XmlDocumentation": ""
        }
      ],
      "Id": "N:DocAsCode.MergeDoc",
      "Parent": "MergeDoc",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Methods": [
            {
              "MethodSyntax": {
                "Parameters": {
                  "T:System.String : text": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string Transform(string text)",
                "XmlDocumentation": "<member name=\"M:MarkdownSharp.Markdown.Transform(System.String)\">\r\n    <summary>\r\n    Transforms the provided Markdown-formatted text to HTML;  \r\n    see http://en.wikipedia.org/wiki/Markdown\r\n    </summary>\r\n    <remarks>\r\n    The order in which other subs are called here is\r\n    essential. Link and image substitutions need to happen before\r\n    EscapeSpecialChars(), so that any *'s or _'s in the a\r\n    and img tags get encoded.\r\n    </remarks>\r\n</member>\r\n"
              },
              "Syntax": {
                "Parameters": {
                  "T:System.String : text": ""
                },
                "Returns": {
                  "T:System.String": ""
                },
                "Content": "public string Transform(string text)",
                "XmlDocumentation": "<member name=\"M:MarkdownSharp.Markdown.Transform(System.String)\">\r\n    <summary>\r\n    Transforms the provided Markdown-formatted text to HTML;  \r\n    see http://en.wikipedia.org/wiki/Markdown\r\n    </summary>\r\n    <remarks>\r\n    The order in which other subs are called here is\r\n    essential. Link and image substitutions need to happen before\r\n    EscapeSpecialChars(), so that any *'s or _'s in the a\r\n    and img tags get encoded.\r\n    </remarks>\r\n</member>\r\n"
              },
              "Id": "M:MarkdownSharp.Markdown.Transform(System.String)",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"M:MarkdownSharp.Markdown.Transform(System.String)\">\r\n    <summary>\r\n    Transforms the provided Markdown-formatted text to HTML;  \r\n    see http://en.wikipedia.org/wiki/Markdown\r\n    </summary>\r\n    <remarks>\r\n    The order in which other subs are called here is\r\n    essential. Link and image substitutions need to happen before\r\n    EscapeSpecialChars(), so that any *'s or _'s in the a\r\n    and img tags get encoded.\r\n    </remarks>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public bool AutoHyperlink",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.AutoHyperlink\">\r\n    <summary>\r\n    when true, (most) bare plain URLs are auto-hyperlinked  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.Markdown.AutoHyperlink",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.AutoHyperlink\">\r\n    <summary>\r\n    when true, (most) bare plain URLs are auto-hyperlinked  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool AutoNewLines",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.AutoNewLines\">\r\n    <summary>\r\n    when true, RETURN becomes a literal newline  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.Markdown.AutoNewLines",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.AutoNewLines\">\r\n    <summary>\r\n    when true, RETURN becomes a literal newline  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string EmptyElementSuffix",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.EmptyElementSuffix\">\r\n    <summary>\r\n    use \">\" for HTML output, or \" />\" for XHTML output\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.Markdown.EmptyElementSuffix",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.EmptyElementSuffix\">\r\n    <summary>\r\n    use \">\" for HTML output, or \" />\" for XHTML output\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool EncodeProblemUrlCharacters",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.EncodeProblemUrlCharacters\">\r\n    <summary>\r\n    when true, problematic URL characters like [, ], (, and so forth will be encoded \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.Markdown.EncodeProblemUrlCharacters",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.EncodeProblemUrlCharacters\">\r\n    <summary>\r\n    when true, problematic URL characters like [, ], (, and so forth will be encoded \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool LinkEmails",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.LinkEmails\">\r\n    <summary>\r\n    when false, email addresses will never be auto-linked  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.Markdown.LinkEmails",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.LinkEmails\">\r\n    <summary>\r\n    when false, email addresses will never be auto-linked  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool StrictBoldItalic",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.StrictBoldItalic\">\r\n    <summary>\r\n    when true, bold and italic require non-word characters on either side  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.Markdown.StrictBoldItalic",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.StrictBoldItalic\">\r\n    <summary>\r\n    when true, bold and italic require non-word characters on either side  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string Version",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.Version\">\r\n    <summary>\r\n    current version of MarkdownSharp;  \r\n    see http://code.google.com/p/markdownsharp/ for the latest code or to contribute\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.Markdown.Version",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.Markdown.Version\">\r\n    <summary>\r\n    current version of MarkdownSharp;  \r\n    see http://code.google.com/p/markdownsharp/ for the latest code or to contribute\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public Markdown(): this (false)",
                "XmlDocumentation": "<member name=\"M:MarkdownSharp.Markdown.#ctor\">\r\n    <summary>\r\n    Create a new Markdown instance using default options\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:MarkdownSharp.Markdown.#ctor",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"M:MarkdownSharp.Markdown.#ctor\">\r\n    <summary>\r\n    Create a new Markdown instance using default options\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public Markdown(MarkdownOptions options)",
                "XmlDocumentation": "<member name=\"M:MarkdownSharp.Markdown.#ctor(MarkdownSharp.MarkdownOptions)\">\r\n    <summary>\r\n    Create a new Markdown instance and set the options from the MarkdownOptions object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:MarkdownSharp.Markdown.#ctor(MarkdownSharp.MarkdownOptions)",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"M:MarkdownSharp.Markdown.#ctor(MarkdownSharp.MarkdownOptions)\">\r\n    <summary>\r\n    Create a new Markdown instance and set the options from the MarkdownOptions object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public Markdown(bool loadOptionsFromConfigFile)",
                "XmlDocumentation": "<member name=\"M:MarkdownSharp.Markdown.#ctor(System.Boolean)\">\r\n    <summary>\r\n    Create a new Markdown instance and optionally load options from a configuration\r\n    file. There they should be stored in the appSettings section, available options are:\r\n    \r\n        Markdown.StrictBoldItalic (true/false)\r\n        Markdown.EmptyElementSuffix (\">\" or \" />\" without the quotes)\r\n        Markdown.LinkEmails (true/false)\r\n        Markdown.AutoNewLines (true/false)\r\n        Markdown.AutoHyperlink (true/false)\r\n        Markdown.EncodeProblemUrlCharacters (true/false) \r\n        \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:MarkdownSharp.Markdown.#ctor(System.Boolean)",
              "Parent": "T:MarkdownSharp.Markdown",
              "XmlDocumentation": "<member name=\"M:MarkdownSharp.Markdown.#ctor(System.Boolean)\">\r\n    <summary>\r\n    Create a new Markdown instance and optionally load options from a configuration\r\n    file. There they should be stored in the appSettings section, available options are:\r\n    \r\n        Markdown.StrictBoldItalic (true/false)\r\n        Markdown.EmptyElementSuffix (\">\" or \" />\" without the quotes)\r\n        Markdown.LinkEmails (true/false)\r\n        Markdown.AutoNewLines (true/false)\r\n        Markdown.AutoHyperlink (true/false)\r\n        Markdown.EncodeProblemUrlCharacters (true/false) \r\n        \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class Markdown",
            "XmlDocumentation": "<member name=\"T:MarkdownSharp.Markdown\">\r\n    <summary>\r\n    Markdown is a text-to-HTML conversion tool for web writers. \r\n    Markdown allows you to write using an easy-to-read, easy-to-write plain text format, \r\n    then convert it to structurally valid XHTML (or HTML).\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:MarkdownSharp.Markdown",
          "Parent": "N:MarkdownSharp",
          "XmlDocumentation": "<member name=\"T:MarkdownSharp.Markdown\">\r\n    <summary>\r\n    Markdown is a text-to-HTML conversion tool for web writers. \r\n    Markdown allows you to write using an easy-to-read, easy-to-write plain text format, \r\n    then convert it to structurally valid XHTML (or HTML).\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "InheritanceHierarchy": [
            "T:System.Object"
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public bool AutoHyperlink",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.AutoHyperlink\">\r\n    <summary>\r\n    when true, (most) bare plain URLs are auto-hyperlinked  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.MarkdownOptions.AutoHyperlink",
              "Parent": "T:MarkdownSharp.MarkdownOptions",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.AutoHyperlink\">\r\n    <summary>\r\n    when true, (most) bare plain URLs are auto-hyperlinked  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool AutoNewlines",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.AutoNewlines\">\r\n    <summary>\r\n    when true, RETURN becomes a literal newline  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.MarkdownOptions.AutoNewlines",
              "Parent": "T:MarkdownSharp.MarkdownOptions",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.AutoNewlines\">\r\n    <summary>\r\n    when true, RETURN becomes a literal newline  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string EmptyElementSuffix",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.EmptyElementSuffix\">\r\n    <summary>\r\n    use \">\" for HTML output, or \" />\" for XHTML output\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.MarkdownOptions.EmptyElementSuffix",
              "Parent": "T:MarkdownSharp.MarkdownOptions",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.EmptyElementSuffix\">\r\n    <summary>\r\n    use \">\" for HTML output, or \" />\" for XHTML output\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool EncodeProblemUrlCharacters",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.EncodeProblemUrlCharacters\">\r\n    <summary>\r\n    when true, problematic URL characters like [, ], (, and so forth will be encoded \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.MarkdownOptions.EncodeProblemUrlCharacters",
              "Parent": "T:MarkdownSharp.MarkdownOptions",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.EncodeProblemUrlCharacters\">\r\n    <summary>\r\n    when true, problematic URL characters like [, ], (, and so forth will be encoded \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool LinkEmails",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.LinkEmails\">\r\n    <summary>\r\n    when false, email addresses will never be auto-linked  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.MarkdownOptions.LinkEmails",
              "Parent": "T:MarkdownSharp.MarkdownOptions",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.LinkEmails\">\r\n    <summary>\r\n    when false, email addresses will never be auto-linked  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool StrictBoldItalic",
                "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.StrictBoldItalic\">\r\n    <summary>\r\n    when true, bold and italic require non-word characters on either side  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MarkdownSharp.MarkdownOptions.StrictBoldItalic",
              "Parent": "T:MarkdownSharp.MarkdownOptions",
              "XmlDocumentation": "<member name=\"P:MarkdownSharp.MarkdownOptions.StrictBoldItalic\">\r\n    <summary>\r\n    when true, bold and italic require non-word characters on either side  \r\n    WARNING: this is a significant deviation from the markdown spec\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class MarkdownOptions",
            "XmlDocumentation": ""
          },
          "Id": "T:MarkdownSharp.MarkdownOptions",
          "Parent": "N:MarkdownSharp",
          "XmlDocumentation": ""
        }
      ],
      "Id": "N:MarkdownSharp",
      "Parent": "MergeDoc",
      "XmlDocumentation": ""
    }
  ],
  "Id": "MergeDoc",
  "MscorlibVersion": {
    "Major": 4
  }
}