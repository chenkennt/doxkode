id: Microsoft.CodeAnalysis.ProjectReference
yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
href: api/Microsoft.CodeAnalysis.ProjectReference
name:
  CSharp: ProjectReference
qualifiedName:
  CSharp: Microsoft.CodeAnalysis.ProjectReference
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
  path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
  startLine: 11
syntax:
  content:
    CSharp: public sealed class ProjectReference
inheritance:
- id: System.Object
  name: System.Object
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.ProjectReference.#ctor(Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)
  yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
  href: api/Microsoft.CodeAnalysis.ProjectReference
  name:
    CSharp: ProjectReference(Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ProjectReference.ProjectReference(Microsoft.CodeAnalysis.ProjectId,System.Collections.Immutable.ImmutableArray{System.String},System.Boolean)
  type: Constructor
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
    path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 18
  syntax:
    content:
      CSharp: public ProjectReference(ProjectId projectId, ImmutableArray<string> aliases = default (ImmutableArray<string>), bool embedInteropTypes = false)
    parameters:
    - id: projectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: api/Microsoft.CodeAnalysis.ProjectId
    - id: aliases
      type:
        id: System.Collections.Immutable.ImmutableArray{System.String}
        name: System.Collections.Immutable.ImmutableArray{System.String}
        isExternal: true
    - id: embedInteropTypes
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
    return:
      id: Void
- id: Microsoft.CodeAnalysis.ProjectReference.ProjectId
  yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
  href: api/Microsoft.CodeAnalysis.ProjectReference
  name:
    CSharp: ProjectId
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ProjectReference.ProjectId
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
    path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 27
  syntax:
    content:
      CSharp: public ProjectId ProjectId { get { return _projectId; } }
    parameters:
    - id: ProjectId
      type:
        id: Microsoft.CodeAnalysis.ProjectId
        name: ProjectId
        href: api/Microsoft.CodeAnalysis.ProjectId
- id: Microsoft.CodeAnalysis.ProjectReference.Aliases
  yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
  href: api/Microsoft.CodeAnalysis.ProjectReference
  name:
    CSharp: Aliases
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ProjectReference.Aliases
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
    path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 32
  summary: Aliases for the reference. Empty if the reference has no aliases.
  syntax:
    content:
      CSharp: public ImmutableArray<string> Aliases { get { return _aliases; } }
    parameters:
    - id: Aliases
      type:
        id: System.Collections.Immutable.ImmutableArray{System.String}
        name: System.Collections.Immutable.ImmutableArray{System.String}
        isExternal: true
- id: Microsoft.CodeAnalysis.ProjectReference.EmbedInteropTypes
  yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
  href: api/Microsoft.CodeAnalysis.ProjectReference
  name:
    CSharp: EmbedInteropTypes
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ProjectReference.EmbedInteropTypes
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
    path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 37
  summary: True if interop types defined in the referenced project should be embedded into the referencing project.
  syntax:
    content:
      CSharp: public bool EmbedInteropTypes { get { return _embedInteropTypes; } }
    parameters:
    - id: EmbedInteropTypes
      type:
        id: System.Boolean
        name: System.Boolean
        isExternal: true
- id: Microsoft.CodeAnalysis.ProjectReference.Equals(System.Object)
  yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
  href: api/Microsoft.CodeAnalysis.ProjectReference
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ProjectReference.Equals(System.Object)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
    path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 39
  syntax:
    content:
      CSharp: public override bool Equals(object obj)
    parameters:
    - id: obj
      type:
        id: System.Object
        name: System.Object
        isExternal: true
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.ProjectReference.Equals(Microsoft.CodeAnalysis.ProjectReference)
  yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
  href: api/Microsoft.CodeAnalysis.ProjectReference
  name:
    CSharp: Equals
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ProjectReference.Equals(Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
    path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 44
  syntax:
    content:
      CSharp: public bool Equals(ProjectReference reference)
    parameters:
    - id: reference
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: api/Microsoft.CodeAnalysis.ProjectReference
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.ProjectReference.op_Equality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
  yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
  href: api/Microsoft.CodeAnalysis.ProjectReference
  name:
    CSharp: op_Equality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ProjectReference.op_Equality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
    path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 57
  syntax:
    content:
      CSharp: >-
        public static bool operator ==(ProjectReference left, ProjectReference right)

                {

                    return EqualityComparer<ProjectReference>.Default.Equals(left, right);

                }
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: api/Microsoft.CodeAnalysis.ProjectReference
    - id: right
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: api/Microsoft.CodeAnalysis.ProjectReference
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.ProjectReference.op_Inequality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
  yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
  href: api/Microsoft.CodeAnalysis.ProjectReference
  name:
    CSharp: op_Inequality
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ProjectReference.op_Inequality(Microsoft.CodeAnalysis.ProjectReference,Microsoft.CodeAnalysis.ProjectReference)
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
    path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 62
  syntax:
    content:
      CSharp: >-
        public static bool operator !=(ProjectReference left, ProjectReference right)

                {

                    return !(left == right);

                }
    parameters:
    - id: left
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: api/Microsoft.CodeAnalysis.ProjectReference
    - id: right
      type:
        id: Microsoft.CodeAnalysis.ProjectReference
        name: ProjectReference
        href: api/Microsoft.CodeAnalysis.ProjectReference
    return:
      id: Boolean
- id: Microsoft.CodeAnalysis.ProjectReference.GetHashCode
  yaml: api/Microsoft.CodeAnalysis.ProjectReference.yaml
  href: api/Microsoft.CodeAnalysis.ProjectReference
  name:
    CSharp: GetHashCode
  qualifiedName:
    CSharp: Microsoft.CodeAnalysis.ProjectReference.GetHashCode
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
    path: D:/Repo/RoslynGit/src/Workspaces/Core/Portable/Workspace/Solution/ProjectReference.cs
    startLine: 67
  syntax:
    content:
      CSharp: public override int GetHashCode()
    parameters: []
    return:
      id: Int32
