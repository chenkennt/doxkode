id: Microsoft.CodeAnalysis.ControlFlowAnalysis
yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
name:
  CSharp: ControlFlowAnalysis
qualifiedName:
  CSharp: ControlFlowAnalysis
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:\Repo\RoslynGit\
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
  startLine: 10
summary: >+
  Provides information about statements which transfer control in and out of a region. This

  information is returned from a call to [Microsoft.CodeAnalysis.SemanticModel.AnalyzeControlFlow(Microsoft.CodeAnalysis.SyntaxNode)](#).

syntax:
  content:
    CSharp: public abstract class ControlFlowAnalysis
inheritance:
- id: System.Object
  name: System.Object
  href: System.Runtime
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.EntryPoints
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: EntryPoints
  qualifiedName:
    CSharp: EntryPoints
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 16
  summary: >+
    The set of statements inside the region what are the

    destination of branches outside the region.

  syntax:
    content:
      CSharp: public abstract ImmutableArray<SyntaxNode> EntryPoints
    parameters:
    - id: EntryPoints
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}
        href: System.Collections.Immutable
        isExternal: true
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.get_EntryPoints
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: get_EntryPoints
  qualifiedName:
    CSharp: get_EntryPoints
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 16
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.ExitPoints
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: ExitPoints
  qualifiedName:
    CSharp: ExitPoints
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 22
  summary: >+
    The set of statements inside a region that jump to locations outside

    the region.

  syntax:
    content:
      CSharp: public abstract ImmutableArray<SyntaxNode> ExitPoints
    parameters:
    - id: ExitPoints
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}
        href: System.Collections.Immutable
        isExternal: true
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.get_ExitPoints
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: get_ExitPoints
  qualifiedName:
    CSharp: get_ExitPoints
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 22
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.EndPointIsReachable
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: EndPointIsReachable
  qualifiedName:
    CSharp: EndPointIsReachable
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 28
  summary: >+
    Indicates whether a region completes normally. Return true if and only if the end of the

    last statement in a region is reachable or the region contains no statements.

  syntax:
    content:
      CSharp: public abstract bool EndPointIsReachable
    parameters:
    - id: EndPointIsReachable
      type:
        id: System.Boolean
        name: System.Boolean
        href: System.Runtime
        isExternal: true
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.get_EndPointIsReachable
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: get_EndPointIsReachable
  qualifiedName:
    CSharp: get_EndPointIsReachable
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 28
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.StartPointIsReachable
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: StartPointIsReachable
  qualifiedName:
    CSharp: StartPointIsReachable
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 30
  syntax:
    content:
      CSharp: public abstract bool StartPointIsReachable
    parameters:
    - id: StartPointIsReachable
      type:
        id: System.Boolean
        name: System.Boolean
        href: System.Runtime
        isExternal: true
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.get_StartPointIsReachable
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: get_StartPointIsReachable
  qualifiedName:
    CSharp: get_StartPointIsReachable
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 30
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.ReturnStatements
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: ReturnStatements
  qualifiedName:
    CSharp: ReturnStatements
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 35
  summary: >+
    The set of return statements found within a region.

  syntax:
    content:
      CSharp: public abstract ImmutableArray<SyntaxNode> ReturnStatements
    parameters:
    - id: ReturnStatements
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}
        name: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.SyntaxNode}
        href: System.Collections.Immutable
        isExternal: true
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.get_ReturnStatements
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: get_ReturnStatements
  qualifiedName:
    CSharp: get_ReturnStatements
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 35
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.Succeeded
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: Succeeded
  qualifiedName:
    CSharp: Succeeded
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 41
  summary: >+
    Returns true iff analysis was successful.  Analysis can fail if the region does not properly span a single expression,

    a single statement, or a contiguous series of statements within the enclosing block.

  syntax:
    content:
      CSharp: public abstract bool Succeeded
    parameters:
    - id: Succeeded
      type:
        id: System.Boolean
        name: System.Boolean
        href: System.Runtime
        isExternal: true
- id: Microsoft.CodeAnalysis.ControlFlowAnalysis.get_Succeeded
  yaml: api\Microsoft.CodeAnalysis.ControlFlowAnalysis.yaml
  href: api\Microsoft.CodeAnalysis.ControlFlowAnalysis
  name:
    CSharp: get_Succeeded
  qualifiedName:
    CSharp: get_Succeeded
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\Compilation\ControlFlowAnalysis.cs
    startLine: 41
