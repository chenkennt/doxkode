id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
yaml: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
href: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
name:
  CSharp: CompilationWithAnalyzers
qualifiedName:
  CSharp: CompilationWithAnalyzers
type: Class
source:
  remote:
    branch: master
    repo: https://github.com/dotnet/roslyn.git
    local: D:\Repo\RoslynGit\
    sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
  path: src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs
  startLine: 10
syntax:
  content:
    CSharp: public class CompilationWithAnalyzers
inheritance:
- id: System.Object
  href: System.Runtime
  isExternal: true
items:
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.Compilation
  yaml: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: Compilation
  qualifiedName:
    CSharp: Compilation
  type: Property
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs
    startLine: 16
  syntax:
    content:
      CSharp: public Compilation Compilation
    parameters:
    - id: Compilation
      type:
        id: Compilation
        href: D:\Repo\RoslynGit\src\Compilers\Core\Portable\Compilation\Compilation.cs
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.get_Compilation
  yaml: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: get_Compilation
  qualifiedName:
    CSharp: get_Compilation
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs
    startLine: 18
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.#ctor(Microsoft.CodeAnalysis.Compilation,System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer},Microsoft.CodeAnalysis.Diagnostics.AnalyzerOptions,System.Threading.CancellationToken)
  yaml: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: .ctor
  qualifiedName:
    CSharp: .ctor
  type: Constructor
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs
    startLine: 28
  summary: Creates a new compilation by attaching diagnostic analyzers to an existing compilation.
  syntax:
    content:
      CSharp: public CompilationWithAnalyzers(Compilation compilation, ImmutableArray<DiagnosticAnalyzer> analyzers, AnalyzerOptions options, CancellationToken cancellationToken)
    parameters:
    - id: compilation
      type:
        id: Compilation
        href: D:\Repo\RoslynGit\src\Compilers\Core\Portable\Compilation\Compilation.cs
      description: The original compilation.
    - id: analyzers
      type:
        id: System.Collections.Immutable.ImmutableArray{Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer}
        href: System.Collections.Immutable
        isExternal: true
      description: The set of analyzers to include in future analyses.
    - id: options
      type:
        id: AnalyzerOptions
        href: D:\Repo\RoslynGit\src\Compilers\Core\Portable\DiagnosticAnalyzer\AnalyzerOptions.cs
      description: Options that are passed to analyzers.
    - id: cancellationToken
      type:
        id: System.Threading.CancellationToken
        href: System.Threading.Tasks
        isExternal: true
      description: A cancellation token that can be used to abort analysis.
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync
  yaml: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: GetAnalyzerDiagnosticsAsync
  qualifiedName:
    CSharp: GetAnalyzerDiagnosticsAsync
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs
    startLine: 37
  summary: Returns diagnostics produced by diagnostic analyzers.
  syntax:
    content:
      CSharp: public async Task<ImmutableArray<Diagnostic>> GetAnalyzerDiagnosticsAsync()
    parameters: []
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetAllDiagnosticsAsync
  yaml: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: GetAllDiagnosticsAsync
  qualifiedName:
    CSharp: GetAllDiagnosticsAsync
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs
    startLine: 49
  summary: Returns diagnostics produced by compilation and by diagnostic analyzers.
  syntax:
    content:
      CSharp: public async Task<ImmutableArray<Diagnostic>> GetAllDiagnosticsAsync()
    parameters: []
    return:
      id: Task
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.GetEffectiveDiagnostics(System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic},Microsoft.CodeAnalysis.Compilation)
  yaml: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: GetEffectiveDiagnostics
  qualifiedName:
    CSharp: GetEffectiveDiagnostics
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs
    startLine: 65
  summary: >-
    Given a set of compiler or [Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer](api\Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer) generated , returns the effective diagnostics after applying the below filters:

        1) [Microsoft.CodeAnalysis.CompilationOptions.SpecificDiagnosticOptions](api\Microsoft.CodeAnalysis.CompilationOptions) specified for the given .

        2) [Microsoft.CodeAnalysis.CompilationOptions.GeneralDiagnosticOption](api\Microsoft.CodeAnalysis.CompilationOptions) specified for the given .

        3) Diagnostic suppression through applied @T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute-.

        4) Pragma directives for the given .
  syntax:
    content:
      CSharp: public static IEnumerable<Diagnostic> GetEffectiveDiagnostics(IEnumerable<Diagnostic> diagnostics, Compilation compilation)
    parameters:
    - id: diagnostics
      type:
        id: System.Collections.Generic.IEnumerable{Microsoft.CodeAnalysis.Diagnostic}
        href: System.Runtime
        isExternal: true
    - id: compilation
      type:
        id: Compilation
        href: D:\Repo\RoslynGit\src\Compilers\Core\Portable\Compilation\Compilation.cs
    return:
      id: IEnumerable
- id: Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.IsDiagnosticAnalyzerSuppressed(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.CompilationOptions,System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean})
  yaml: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers.yaml
  href: api\Microsoft.CodeAnalysis.Diagnostics.CompilationWithAnalyzers
  name:
    CSharp: IsDiagnosticAnalyzerSuppressed
  qualifiedName:
    CSharp: IsDiagnosticAnalyzerSuppressed
  type: Method
  source:
    remote:
      branch: master
      repo: https://github.com/dotnet/roslyn.git
      local: D:\Repo\RoslynGit\
      sha1: 6bda666d110ac87a7ad853dbe45e8366d8bb8744
    path: src\Compilers\Core\Portable\DiagnosticAnalyzer\CompilationWithAnalyzers.cs
    startLine: 95
  summary: >-
    Returns true if all the diagnostics that can be produced by this analyzer are suppressed through options.

         says whether the caller would like the exception thrown by the analyzers to be handled or not. If true - Handles ; False - Not handled.
  syntax:
    content:
      CSharp: public static bool IsDiagnosticAnalyzerSuppressed(DiagnosticAnalyzer analyzer, CompilationOptions options, Func<Exception, DiagnosticAnalyzer, bool> continueOnAnalyzerException)
    parameters:
    - id: analyzer
      type:
        id: DiagnosticAnalyzer
        href: D:\Repo\RoslynGit\src\Compilers\Core\Portable\DiagnosticAnalyzer\DiagnosticAnalyzer.cs
    - id: options
      type:
        id: CompilationOptions
        href: D:\Repo\RoslynGit\src\Compilers\Core\Portable\Compilation\CompilationOptions.cs
    - id: continueOnAnalyzerException
      type:
        id: System.Func{System.Exception,Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,System.Boolean}
        href: System.Runtime
        isExternal: true
    return:
      id: Boolean
