<!DOCTYPE html>
<html lang="en" ng-app="docsApp" ng-strict-di ng-controller="DocsController">
<!--
   This is <<%= grunt.config('pkg').name %>> v<<%= grunt.config('pkg').version %>>
-->
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="Description"
        content="Docascode with pure client-side JavaScript!">
  <meta name="fragment" content="!">
  <title ng-bind-template="Docascode: {{ currentArea.name }}: {{ title || currentPage || 'Generating Documentations For You'}}">Docascode</title>
  <link rel="icon" type="image/x-icon" href="favicon.ico" />
<<%
    var mode = compileConfig.mode;
    var config = compileConfig.config;
    if (config !== 'debug' && config !== 'release'){
      grunt.log.error('Unsupported config: ' + config);
    }

    if (mode !== 'inline' && mode !== 'ref'){
      grunt.log.error('Unsupported mode: ' + mode);
    }

    grunt.log.writeln('Building single index.html of mode: ' + mode + ' and config: ' + config);
    var js = copydest.js;
    var css = copydest.css;
    var ext = copydest.ext;

    var ownJsFileFull =  grunt.config('concat').js.dest;
    var ownCssFileFull = grunt.config('concat').css.dest;
    var ownJsFileMin = grunt.config('uglify').js.dest;
    var ownCssFileMin = grunt.config('cssmin').target.dest;

    function print_script_ref(ref) {
        print('<script type="text/javascript" src="' + ref + '"></script>\n');
    }
    function print_style_ref(ref) {
        print('<link rel="stylesheet" href="' + ref + '" type="text/css"></link>\n');
    }
    function print_script_inline(name, grunt) {
        var content = grunt.file.read(name)
        if (config === 'debug')
            print('<!-- START ' + name + ' -->\n');
        print('<script type="text/javascript">');
        print(content);
        print('</script>\n');
        if (config === 'debug')
            print('<!-- END ' + name + ' -->\n');
    }
    function print_style_inline(name, grunt) {
        var content = grunt.file.read(name)
        if (config === 'debug')
            print('<!-- START ' + name + ' -->\n');
        print('<style id="style:' + name + '">');
        print(content);
        print('</style>');
        if (config === 'debug')
            print('<!-- END ' + name + ' -->\n');
    }
    function getReferencePath(type, path, grunt){
      var relPath = path;
      if (type !== 'css' && type !== 'js' && type !== 'ext'){
        grunt.log.error('Unsupported type: ' + type);
      }
      var i = path.lastIndexOf('/')

      if (i > -1){
        relPath = path.substr(i + 1);
      }

      if (type === 'css'){
        relPath = css + '/' + relPath;
      }

      if (type === 'js'){
        relPath = js + '/' + relPath;
      }

      if (type === 'ext'){
        relPath = ext + '/' + relPath;
      }

      grunt.log.writeln('Getting reference path' + relPath + ' for type:' + type + ', path: ' + path + ', index: ' +i);

      return relPath;
    }

    // For CDNs always ref
    for(var i = 0, len = cdnCssFiles.length; i < len; i++) {
        print_style_ref(cdnCssFiles[i], grunt);
    }
    for(var i = 0, len = cdnJsFiles.length; i < len; i++) {
        print_script_ref(cdnJsFiles[i], grunt);
    }

    if (mode === 'inline' && config === 'debug') {
        // INLINE SCRIPTS AND CSS
        for(var i = 0, len = unminifiedCssFiles.length; i < len; i++) {
            print_style_inline(unminifiedCssFiles[i], grunt);
        }
        for(var i = 0, len = unminifiedJsFiles.length; i < len; i++) {
            print_script_inline(unminifiedJsFiles[i], grunt);
        }

        // OUR OWN CODE
        print_script_inline(ownJsFileFull, grunt);
        print_style_inline(ownCssFileFull, grunt);
    }

    if (mode === 'ref' && config === 'debug') {
        // INLINE SCRIPTS AND CSS
        for(var i = 0, len = unminifiedCssFiles.length; i < len; i++) {
            var path = getReferencePath('ext', unminifiedCssFiles[i], grunt);
            print_style_ref(path, grunt);
        }
        for(var i = 0, len = unminifiedJsFiles.length; i < len; i++) {
            var path = getReferencePath('ext', unminifiedJsFiles[i], grunt);
            print_script_ref(path, grunt);
        }

        // OUR OWN CODE
        var path = getReferencePath('css', ownCssFileFull, grunt);
        print_style_ref(path, grunt);
        path = getReferencePath('js', ownJsFileFull, grunt);
        print_script_ref(path, grunt);
    }

    if (mode === 'inline' && config === 'release') {
        // INLINE SCRIPTS AND CSS
        for(var i = 0, len = cssFiles.length; i < len; i++) {
            print_style_inline(cssFiles[i], grunt);
        }
        for(var i = 0, len = jsFiles.length; i < len; i++) {
            print_script_inline(jsFiles[i], grunt);
        }

        // OUR OWN CODE
        print_script_inline(ownJsFileMin, grunt);
        print_script_inline(ownCssFileMin, grunt);
    }

    if (mode === 'ref' && config === 'release') {
        // INLINE SCRIPTS AND CSS
        for(var i = 0, len = cssFiles.length; i < len; i++) {
            var path = getReferencePath('ext', cssFiles[i], grunt);
            print_style_ref(path, grunt);
        }
        for(var i = 0, len = jsFiles.length; i < len; i++) {
            var path = getReferencePath('ext', jsFiles[i], grunt);
            print_script_ref(path, grunt);
        }

        // OUR OWN CODE
        var path = getReferencePath('css', ownCssFileMin, grunt);
        print_style_ref(path, grunt);
        path = getReferencePath('js', ownJsFileMin, grunt);
        print_script_ref(path, grunt);
    }
%>>
</head>
<body>
  <div id="console">
    <div id="player"></div>
      <button id="run" class="btn">Run</button>
      <button id="close" class="btn">Close</button>
    </div>
  </div>
  <div id="wrapper">
    <header scroll-y-offset-element>
      <div class="topnav navbar navbar-inverse navbar-default">
        <div class="container">
          <div ng-repeat="model in [navbar]"  ng-include="'template/navbar.tmpl'"></div>
          <!-- comment out search box as it is not currently supported
          <form ng-class="{focus:focus}" class="navbar-search col-md-3 docs-search" ng-submit="submit()">
            <span class="glyphicon glyphicon-search search-icon"></span>
            <input type="text"
                   name="as_q"
                   class="search-query"
                   placeholder="Click or press / to search"
                   ng-focus="focus=true"
                   ng-blur="focus=false"
                   ng-change="search(q)"
                   ng-model="q"
                   docs-search-input
                   autocomplete="off" />
          </form> -->
        </div>
      </div>
      <div class="subnav navbar navbar-default">
        <div class="container">
            <div ng-if="partialModel.items" class="expand-all pull-right">
              <a ng-click = "expandAll(true);">Expand All</a>
              <span class="divider">|</span>
              <a ng-click = "expandAll(false);">Collapse All</a>
            </div>
            <ul class="breadcrumb">
              <li ng-repeat="crumb in breadcrumb">
                <a ng-href="{{GetBreadCrumbHref(crumb.url)}}">{{crumb.name}}</a>
              </li>
            </ul>
        </div>
      </div>
      <div class="grad-top"></div>
      <!--<div class="search-results-container" ng-show="hasResults">
        <div class="container">
          <div class="search-results-frame">
            <div ng-repeat="(key, value) in results" class="search-results-group" ng-class="colClassName + ' col-group-' + key">
              <h4 class="search-results-group-heading">{{ key }}</h4>
              <div class="search-results">
                <div ng-repeat="item in value" class="search-result">
                  - <a ng-click="hideResults()" ng-href="#{{ item.path }}">{{ item.name }}</a>
                </div>
              </div>
            </div>
          </div>
          <a href="" ng-click="hideResults()" class="search-close">
            <span class="glyphicon glyphicon-remove search-close-icon"></span> Close
          </a>
        </div>
      </div>-->
      <!-- Temp disable it: what to show for conceptual?
      <div class="sup-header">
        <div class="container main-grid main-header-grid">
          <div class="grid-left">
            <div ng-controller="DocsVersionsCtrl" class="picker version-picker">
              <select ng-options="v as ('v' + v.version + (v.isSnapshot ? ' (snapshot)' : '')) group by getGroupName(v) for v in docs_versions"
                      ng-model="docs_version"
                      ng-change="jumpToDocsVersion(docs_version)"
                      class="docs-version-jump">
              </select>
            </div>
          </div>
          <div class="grid-right">
            <ul class="nav-breadcrumb">
              <li ng-repeat="crumb in breadcrumb" class="nav-breadcrumb-entry naked-list">
                <span class="divider"> /</span>
                <a ng-href="#{{crumb.url}}">{{crumb.name}}</a>
              </li>
            </ul>
          </div>
        </div>
      </div>-->
    </header>

    <div role="main" class="container">
      <div class="sidenav" ng-if="toc">
        <div id="tocLoading" ng-show="tocLoading">Loading...</div>
        <div ng-hide="tocLoading" ng-if="toc" ng-repeat="model in [toc.content]" ng-include="'template/toc.tmpl'"></div>
      </div>
      <div ng-class="gridClass(toc)" class="article">
        <div id="loading" ng-show="loading">Loading...</div>
        <div markdown ng-if="contentType === 'md'" ng-hide="loading" ng-repeat="model in [partialModel]" ng-include="partialPath" autoscroll></div>
          <div ng-if="contentType !== 'md'" ng-hide="loading" ng-repeat="model in [partialModel]" ng-include="partialPath" autoscroll></div>
      </div>
    </div>
    <footer>
      <div class="grad-bottom"></div>
      <div class="footer">
        <div class="container">
          <span class="pull-right"><a back-to-top>Back to top</a></span>
          <span>
            Super-powered by Microsoft Visual Studio China  ©2014-2015
            Code licensed under the MIT License
          </span>
        </div>
      </div>
    </footer>
  </div>
</body>
</html>
