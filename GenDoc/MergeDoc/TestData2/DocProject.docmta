{
  "Namespaces": [
    {
      "Classes": [
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class BuildActionConverter",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildActionConverter",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override int OnAfterLoadProject(IVsHierarchy stubHierarchy, IVsHierarchy realHierarchy)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Needs to update the dangling reference on projects that contain this hierarchy as project reference.\r\n    </summary>\r\n    <param name=\"stubHierarchy\"></param>\r\n    <param name=\"realHierarchy\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Needs to update the dangling reference on projects that contain this hierarchy as project reference.\r\n    </summary>\r\n    <param name=\"stubHierarchy\"></param>\r\n    <param name=\"realHierarchy\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnAfterRenameProject(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int OnBeforeCloseProject(IVsHierarchy hierarchy, int removed)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)\">\r\n    <summary>\r\n    Delete this project from the references of projects of this type, if it is found.\r\n    </summary>\r\n    <param name=\"hierarchy\"></param>\r\n    <param name=\"removed\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)\">\r\n    <summary>\r\n    Delete this project from the references of projects of this type, if it is found.\r\n    </summary>\r\n    <param name=\"hierarchy\"></param>\r\n    <param name=\"removed\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnBeforeUnloadProject(IVsHierarchy realHierarchy, IVsHierarchy stubHierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class SolutionListenerForProjectReferenceUpdate\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected static void CloseWindowFrame(ref IVsWindowFrame windowFrame)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.CloseWindowFrame(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenWithSpecific(uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame frame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a document using a specific editor. This method has no implementation.\r\n    </summary>\r\n    <param name=\"editorFlags\">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>\r\n    <param name=\"editorType\">Unique identifier of the editor type</param>\r\n    <param name=\"physicalView\">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"frame\">A reference to the window frame that is mapped to the document</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>NotImplementedException</returns>\r\n    <remarks>See FileDocumentManager for an implementation of this method</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a document using a specific editor. This method has no implementation.\r\n    </summary>\r\n    <param name=\"editorFlags\">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>\r\n    <param name=\"editorType\">Unique identifier of the editor type</param>\r\n    <param name=\"physicalView\">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"frame\">A reference to the window frame that is mapped to the document</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>NotImplementedException</returns>\r\n    <remarks>See FileDocumentManager for an implementation of this method</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected string GetOwnerCaption()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.GetOwnerCaption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Save(bool saveIfDirty)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Save(System.Boolean)\">\r\n    <summary>\r\n    Silently saves an open document\r\n    </summary>\r\n    <param name=\"saveIfDirty\">Save the open document only if it is dirty</param>\r\n    <remarks>The call to SaveDocData may return Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS.STG_S_DATALOSS to indicate some characters could not be represented in the current codepage</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.Save(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Save(System.Boolean)\">\r\n    <summary>\r\n    Silently saves an open document\r\n    </summary>\r\n    <param name=\"saveIfDirty\">Save the open document only if it is dirty</param>\r\n    <remarks>The call to SaveDocData may return Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS.STG_S_DATALOSS to indicate some characters could not be represented in the current codepage</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static void RenameDocument(IServiceProvider site, string oldName, string newName, uint newItemId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.RenameDocument(System.IServiceProvider,System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Rename document in the running document table from oldName to newName.\r\n    </summary>\r\n    <param name=\"provider\">The service provider.</param>\r\n    <param name=\"oldName\">Full path to the old name of the document.</param>\t\t\r\n    <param name=\"newName\">Full path to the new name of the document.</param>\t\t\r\n    <param name=\"newItemId\">The new item id of the document</param>\t\t\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.RenameDocument(System.IServiceProvider,System.String,System.String,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.RenameDocument(System.IServiceProvider,System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Rename document in the running document table from oldName to newName.\r\n    </summary>\r\n    <param name=\"provider\">The service provider.</param>\r\n    <param name=\"oldName\">Full path to the old name of the document.</param>\t\t\r\n    <param name=\"newName\">Full path to the new name of the document.</param>\t\t\r\n    <param name=\"newItemId\">The new item id of the document</param>\t\t\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static void UpdateCaption(IServiceProvider site, string caption, IntPtr docData)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.UpdateCaption(System.IServiceProvider,System.String,System.IntPtr)\">\r\n    <summary>\r\n    Updates the caption for all windows associated to the document.\r\n    </summary>\r\n    <param name=\"site\">The service provider.</param>\r\n    <param name=\"caption\">The new caption.</param>\r\n    <param name=\"docData\">The IUnknown interface to a document data object associated with a registered document.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.UpdateCaption(System.IServiceProvider,System.String,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.UpdateCaption(System.IServiceProvider,System.String,System.IntPtr)\">\r\n    <summary>\r\n    Updates the caption for all windows associated to the document.\r\n    </summary>\r\n    <param name=\"site\">The service provider.</param>\r\n    <param name=\"caption\">The new caption.</param>\r\n    <param name=\"docData\">The IUnknown interface to a document data object associated with a registered document.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected string GetFullPathForDocument()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.GetFullPathForDocument",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Open(ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a document using the standard editor. This method has no implementation since a document is abstract in this context\r\n    </summary>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the document</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>NotImplementedException</returns>\r\n    <remarks>See FileDocumentManager class for an implementation of this method</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a document using the standard editor. This method has no implementation since a document is abstract in this context\r\n    </summary>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the document</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>NotImplementedException</returns>\r\n    <remarks>See FileDocumentManager class for an implementation of this method</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Close(__FRAMECLOSE closeFlag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Close(Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE)\">\r\n    <summary>\r\n    Close an open document window\r\n    </summary>\r\n    <param name=\"closeFlag\">Decides how to close the document</param>\r\n    <returns>S_OK if successful, otherwise an error is returned</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.Close(Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Close(Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE)\">\r\n    <summary>\r\n    Close an open document window\r\n    </summary>\r\n    <param name=\"closeFlag\">Decides how to close the document</param>\r\n    <returns>S_OK if successful, otherwise an error is returned</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public abstract class DocumentManager\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DocumentManager\">\r\n    <summary>\r\n    This abstract class handles opening, saving of items in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DocumentManager",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DocumentManager\">\r\n    <summary>\r\n    This abstract class handles opening, saving of items in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual Type GetTypeFromNameProperty(string typeName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)\">\r\n    <summary>\r\n    Convert name to a Type object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)\">\r\n    <summary>\r\n    Convert name to a Type object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void SetValue(object component, object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.SetValue(System.Object,System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.SetValue(System.Object,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.SetValue(System.Object,System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetValue(object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetValue(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetEditor(Type editorBaseType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetEditor(System.Type)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetEditor(System.Type)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetEditor(System.Type)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override bool ShouldSerializeValue(object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override bool CanResetValue(object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.CanResetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.CanResetValue(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.CanResetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void ResetValue(object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ResetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ResetValue(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ResetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class DesignPropertyDescriptor",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DesignPropertyDescriptor\">\r\n    <summary>\r\n    The purpose of DesignPropertyDescriptor is to allow us to customize the\r\n    display name of the property in the property grid.  None of the CLR\r\n    implementations of PropertyDescriptor allow you to change the DisplayName.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DesignPropertyDescriptor",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DesignPropertyDescriptor\">\r\n    <summary>\r\n    The purpose of DesignPropertyDescriptor is to allow us to customize the\r\n    display name of the property in the property grid.  None of the CLR\r\n    implementations of PropertyDescriptor allow you to change the DisplayName.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class DebugModeConverter",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.DebugModeConverter",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public static class MsBuildTarget",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.MsBuildTarget\">\r\n    <summary>\r\n    Defines the constant strings for various msbuild targets\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.MsBuildTarget",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.MsBuildTarget\">\r\n    <summary>\r\n    Defines the constant strings for various msbuild targets\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class BeforeProjectFileClosedEventArgs\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.BeforeProjectFileClosedEventArgs",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void OnBeforeCreateProjectAsync(ref Guid rguidProjectID, string filename, string location, string pszName, uint flags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.OnBeforeCreateProjectAsync(System.Guid@,System.String,System.String,System.String,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override string ProjectTypeGuids(string file)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.ProjectTypeGuids(System.String)\">\r\n    <summary>\r\n    Retrives the list of project guids from the project file.\r\n    If you don't want your project to be flavorable, override\r\n    to only return your project factory Guid:\r\n         return this.GetType().GUID.ToString(\"B\");\r\n    </summary>\r\n    <param name=\"file\">Project file to look into to find the Guid list</param>\r\n    <returns>List of semi-colon separated GUIDs</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.ProjectTypeGuids(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.ProjectTypeGuids(System.String)\">\r\n    <summary>\r\n    Retrives the list of project guids from the project file.\r\n    If you don't want your project to be flavorable, override\r\n    to only return your project factory Guid:\r\n         return this.GetType().GUID.ToString(\"B\");\r\n    </summary>\r\n    <param name=\"file\">Project file to look into to find the Guid list</param>\r\n    <returns>List of semi-colon separated GUIDs</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual IVsTask CreateProjectAsync(ref Guid rguidProjectID, string filename, string location, string pszName, uint flags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProjectAsync(System.Guid@,System.String,System.String,System.String,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual bool CanCreateProjectAsynchronously(ref Guid rguidProjectID, string filename, uint flags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.CanCreateProjectAsynchronously(System.Guid@,System.String,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"The global property handles is instantiated here and used in the project node that will Dispose it\")]\r\nprotected override object PreCreateForOuter(IntPtr outerProjectIUnknown)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.PreCreateForOuter(System.IntPtr)\">\r\n    <summary>\r\n    Instantiate the project class, but do not proceed with the\r\n    initialization just yet.\r\n    Delegate to CreateProject implemented by the derived class.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.PreCreateForOuter(System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.PreCreateForOuter(System.IntPtr)\">\r\n    <summary>\r\n    Instantiate the project class, but do not proceed with the\r\n    initialization just yet.\r\n    Delegate to CreateProject implemented by the derived class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void CreateProject(string fileName, string location, string name, uint flags, ref Guid projectGuid, out IntPtr project, out int canceled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)\">\r\n    <summary>\r\n    Rather than directly creating the project, ask VS to initate the process of\r\n    creating an aggregated project in case we are flavored. We will be called\r\n    on the IVsAggregatableProjectFactory to do the real project creation.\r\n    </summary>\r\n    <param name=\"fileName\">Project file</param>\r\n    <param name=\"location\">Path of the project</param>\r\n    <param name=\"name\">Project Name</param>\r\n    <param name=\"flags\">Creation flags</param>\r\n    <param name=\"projectGuid\">Guid of the project</param>\r\n    <param name=\"project\">Project that end up being created by this method</param>\r\n    <param name=\"canceled\">Was the project creation canceled</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)\">\r\n    <summary>\r\n    Rather than directly creating the project, ask VS to initate the process of\r\n    creating an aggregated project in case we are flavored. We will be called\r\n    on the IVsAggregatableProjectFactory to do the real project creation.\r\n    </summary>\r\n    <param name=\"fileName\">Project file</param>\r\n    <param name=\"location\">Path of the project</param>\r\n    <param name=\"name\">Project Name</param>\r\n    <param name=\"flags\">Creation flags</param>\r\n    <param name=\"projectGuid\">Guid of the project</param>\r\n    <param name=\"project\">Project that end up being created by this method</param>\r\n    <param name=\"canceled\">Was the project creation canceled</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected abstract ProjectNode CreateProject();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProject",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class ProjectFactory\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectFactory\">\r\n    <summary>\r\n    Creates projects within the solution\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectFactory",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectFactory\">\r\n    <summary>\r\n    Creates projects within the solution\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"The service provider is used by the PropertiesEditorLauncher\")]\r\npublic override object GetEditor(Type editorBaseType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetEditor(System.Type)\">\r\n    <summary>\r\n    ICustomTypeDescriptor.GetEditor\r\n    To enable the \"Property Pages\" button on the properties browser\r\n    the browse object (project properties) need to be unmanaged\r\n    or it needs to provide an editor of type ComponentEditor.\r\n    </summary>\r\n    <param name=\"editorBaseType\">Type of the editor</param>\r\n    <returns>Editor</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetEditor(System.Type)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetEditor(System.Type)\">\r\n    <summary>\r\n    ICustomTypeDescriptor.GetEditor\r\n    To enable the \"Property Pages\" button on the properties browser\r\n    the browse object (project properties) need to be unmanaged\r\n    or it needs to provide an editor of type ComponentEditor.\r\n    </summary>\r\n    <param name=\"editorBaseType\">Type of the editor</param>\r\n    <returns>Editor</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int GetCfgProvider(out IVsCfgProvider p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ProjectNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override int AfterSaveItemAs(IntPtr docData, string newFilePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.AfterSaveItemAs(System.IntPtr,System.String)\">\r\n    <summary>\r\n    Performs a SaveAs operation of an open document. Called from SaveItem after the running document table has been updated with the new doc data.\r\n    </summary>\r\n    <param name=\"docData\">A pointer to the document in the rdt</param>\r\n    <param name=\"newFilePath\">The new file path to the document</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.AfterSaveItemAs(System.IntPtr,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.AfterSaveItemAs(System.IntPtr,System.String)\">\r\n    <summary>\r\n    Performs a SaveAs operation of an open document. Called from SaveItem after the running document table has been updated with the new doc data.\r\n    </summary>\r\n    <param name=\"docData\">A pointer to the document in the rdt</param>\r\n    <param name=\"newFilePath\">The new file path to the document</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void RenameInStorage(string oldName, string newName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameInStorage(System.String,System.String)\">\r\n    <summary>\r\n    This should be overriden for node that are not saved on disk\r\n    </summary>\r\n    <param name=\"oldName\">Previous name in storage</param>\r\n    <param name=\"newName\">New name in storage</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RenameInStorage(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameInStorage(System.String,System.String)\">\r\n    <summary>\r\n    This should be overriden for node that are not saved on disk\r\n    </summary>\r\n    <param name=\"oldName\">Previous name in storage</param>\r\n    <param name=\"newName\">New name in storage</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override void DoDefaultAction()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.DoDefaultAction",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void RecoverFromRenameFailure(string fileThatFailed, string originalFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RecoverFromRenameFailure(System.String,System.String)\">\r\n    <summary>\r\n    Tries recovering from a rename failure.\r\n    </summary>\r\n    <param name=\"fileThatFailed\"> The file that failed to be renamed.</param>\r\n    <param name=\"originalFileName\">The original filenamee</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RecoverFromRenameFailure(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RecoverFromRenameFailure(System.String,System.String)\">\r\n    <summary>\r\n    Tries recovering from a rename failure.\r\n    </summary>\r\n    <param name=\"fileThatFailed\"> The file that failed to be renamed.</param>\r\n    <param name=\"originalFileName\">The original filenamee</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.GetAutomationObject\">\r\n    <summary>\r\n    Get an instance of the automation object for a FileNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OAFileNode if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.GetAutomationObject\">\r\n    <summary>\r\n    Get an instance of the automation object for a FileNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OAFileNode if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default file icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default file icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ISingleFileGenerator CreateSingleFileGenerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.CreateSingleFileGenerator\">\r\n    <summary>\r\n    factory method for creating single file generators.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.CreateSingleFileGenerator",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.CreateSingleFileGenerator\">\r\n    <summary>\r\n    factory method for creating single file generators.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int SetEditLabel(string label)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual FileNode RenameFileNode(string oldFileName, string newFileName, uint newParentId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameFileNode(System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Renames the file in the hierarchy by removing old node and adding a new node in the hierarchy.\r\n    </summary>\r\n    <param name=\"oldFileName\">The old file name.</param>\r\n    <param name=\"newFileName\">The new file name</param>\r\n    <param name=\"newParentId\">The new parent id of the item.</param>\r\n    <returns>The newly added FileNode.</returns>\r\n    <remarks>While a new node will be used to represent the item, the underlying MSBuild item will be the same and as a result file properties saved in the project file will not be lost.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RenameFileNode(System.String,System.String,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameFileNode(System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Renames the file in the hierarchy by removing old node and adding a new node in the hierarchy.\r\n    </summary>\r\n    <param name=\"oldFileName\">The old file name.</param>\r\n    <param name=\"newFileName\">The new file name</param>\r\n    <param name=\"newParentId\">The new parent id of the item.</param>\r\n    <returns>The newly added FileNode.</returns>\r\n    <remarks>While a new node will be used to represent the item, the underlying MSBuild item will be the same and as a result file properties saved in the project file will not be lost.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetMkDocument",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void RenameChildNodes(FileNode parentNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameChildNodes(Microsoft.VisualStudio.Project.FileNode)\">\r\n    <summary>\r\n    Rename all childnodes\r\n    </summary>\r\n    <param name=\"newFileNode\">The newly added Parent node.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RenameChildNodes(Microsoft.VisualStudio.Project.FileNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameChildNodes(Microsoft.VisualStudio.Project.FileNode)\">\r\n    <summary>\r\n    Rename all childnodes\r\n    </summary>\r\n    <param name=\"newFileNode\">The newly added Parent node.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class FileNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FileNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class ConnectionPointContainer\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ConnectionPointContainer",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual OutputGroup CreateOutputGroup(ProjectNode project, KeyValuePair<string, string> group)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.CreateOutputGroup(Microsoft.VisualStudio.Project.ProjectNode,System.Collections.Generic.KeyValuePair{System.String,System.String})",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_BuildableProjectCfg(out IVsBuildableProjectCfg pb)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_BuildableProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_UpdateSequenceNumber(ULARGE_INTEGER[] li)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_UpdateSequenceNumber(Microsoft.VisualStudio.OLE.Interop.ULARGE_INTEGER[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_TargetCodePage(out uint target)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_TargetCodePage(System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProjectItem(out IVsHierarchy hier, out uint itemid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)\">\r\n    <summary>\r\n    Maps back to the hierarchy or project item object corresponding to the browse object.\r\n    </summary>\r\n    <param name=\"hier\">Reference to the hierarchy object.</param>\r\n    <param name=\"itemid\">Reference to the project item.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)\">\r\n    <summary>\r\n    Maps back to the hierarchy or project item object corresponding to the browse object.\r\n    </summary>\r\n    <param name=\"hier\">Reference to the hierarchy object.</param>\r\n    <param name=\"itemid\">Reference to the project item.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsDebugOnly(out int fDebug)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsDebugOnly(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OutputsRequireAppRoot(out int pfRequiresAppRoot)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.OutputsRequireAppRoot(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_RootURL(out string root)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_RootURL(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProjectDesignerPages(CAUUID[] pages)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration dependent.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n    <returns>VSConstants.S_OK</returns>\t\t\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration dependent.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n    <returns>VSConstants.S_OK</returns>\t\t\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsPrivate(out int pfPrivate)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsPrivate(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string GetConfigurationProperty(string propertyName, bool resetCache)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetConfigurationProperty(System.String,System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_CanonicalName(out string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_CanonicalName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void SetConfigurationProperty(string propertyName, string propertyValue)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.SetConfigurationProperty(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsReleaseOnly(out int fRelease)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsReleaseOnly(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_CfgType(ref Guid iidCfg, out IntPtr ppCfg)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_CfgType(System.Guid@,System.IntPtr@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_VirtualRoot(out string pbstrVRoot)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_VirtualRoot(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int EnumOutputs(out IVsEnumOutputs eo)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.EnumOutputs(Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_ProjectCfgProvider(out IVsProjectCfgProvider p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_ProjectCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void PrepareBuild(bool clean)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.PrepareBuild(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsPackaged(out int pkgd)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsPackaged(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryDebugLaunch(uint flags, out int fCanLaunch)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.QueryDebugLaunch(System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the debugger can be launched, given the state of the launch flags.\r\n    </summary>\r\n    <param name=\"flags\">Flags that determine the conditions under which to launch the debugger. \r\n    For valid grfLaunch values, see __VSDBGLAUNCHFLAGS or __VSDBGLAUNCHFLAGS2.</param>\r\n    <param name=\"fCanLaunch\">true if the debugger can be launched, otherwise false</param>\r\n    <returns>S_OK if the method succeeds, otherwise an error code</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.QueryDebugLaunch(System.UInt32,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.QueryDebugLaunch(System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the debugger can be launched, given the state of the launch flags.\r\n    </summary>\r\n    <param name=\"flags\">Flags that determine the conditions under which to launch the debugger. \r\n    For valid grfLaunch values, see __VSDBGLAUNCHFLAGS or __VSDBGLAUNCHFLAGS2.</param>\r\n    <param name=\"fCanLaunch\">true if the debugger can be launched, otherwise false</param>\r\n    <returns>S_OK if the method succeeds, otherwise an error code</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_OutputGroups(uint celt, IVsOutputGroup[] rgpcfg, uint[] pcActual)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_OutputGroups(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup[],System.UInt32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Platform(out Guid platform)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_Platform(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsSpecifyingOutputSupported(out int f)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsSpecifyingOutputSupported(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void GetPages(CAUUID[] pages)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int DebugLaunch(uint grfLaunch)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.DebugLaunch(System.UInt32)\">\r\n    <summary>\r\n    Called by the vs shell to start debugging (managed or unmanaged).\r\n    Override this method to support other debug engines.\r\n    </summary>\r\n    <param name=\"grfLaunch\">A flag that determines the conditions under which to start the debugger. For valid grfLaunch values, see __VSDBGLAUNCHFLAGS</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.DebugLaunch(System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.DebugLaunch(System.UInt32)\">\r\n    <summary>\r\n    Called by the vs shell to start debugging (managed or unmanaged).\r\n    Override this method to support other debug engines.\r\n    </summary>\r\n    <param name=\"grfLaunch\">A flag that determines the conditions under which to start the debugger. For valid grfLaunch values, see __VSDBGLAUNCHFLAGS</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenOutput(string name, out IVsOutput output)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.OpenOutput(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutput@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_DisplayName(out string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.get_DisplayName(System.String@)\">\r\n    <summary>\r\n    The display name is a two part item\r\n    first part is the config name, 2nd part is the platform name\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_DisplayName(System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.get_DisplayName(System.String@)\">\r\n    <summary>\r\n    The display name is a two part item\r\n    first part is the config name, 2nd part is the platform name\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfg(out IVsCfg cfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg@)\">\r\n    <summary>\r\n    Maps back to the configuration corresponding to the browse object. \r\n    </summary>\r\n    <param name=\"cfg\">The IVsCfg object represented by the browse object</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg@)\">\r\n    <summary>\r\n    Maps back to the configuration corresponding to the browse object. \r\n    </summary>\r\n    <param name=\"cfg\">The IVsCfg object represented by the browse object</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenOutputGroup(string szCanonicalName, out IVsOutputGroup ppIVsOutputGroup)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.OpenOutputGroup(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup@)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ProjectConfig\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectConfig",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class FrameworkNameConverter",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FrameworkNameConverter",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public int Next(uint elements, IVsDependency[] dependencies, out uint elementsFetched)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDependency[],System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Skip(uint elements)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.Skip(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Reset()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.Reset",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Clone(out IVsEnumDependencies enumDependencies)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.Clone(Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies@)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class EnumDependencies",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.EnumDependencies",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int OpenProjectCfg(string projectCfgCanonicalName, out IVsProjectCfg projectCfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)\">\r\n    <summary>\r\n    Provides access to the IVsProjectCfg interface implemented on a project's configuration object. \r\n    </summary>\r\n    <param name=\"projectCfgCanonicalName\">The canonical name of the configuration to access.</param>\r\n    <param name=\"projectCfg\">The IVsProjectCfg interface of the configuration identified by szProjectCfgCanonicalName.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)\">\r\n    <summary>\r\n    Provides access to the IVsProjectCfg interface implemented on a project's configuration object. \r\n    </summary>\r\n    <param name=\"projectCfgCanonicalName\">The canonical name of the configuration to access.</param>\r\n    <param name=\"projectCfg\">The IVsProjectCfg interface of the configuration identified by szProjectCfgCanonicalName.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AdviseCfgProviderEvents(IVsCfgProviderEvents sink, out uint cookie)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)\">\r\n    <summary>\r\n    Registers the caller for configuration event notification. \r\n    </summary>\r\n    <param name=\"sink\">Reference to the IVsCfgProviderEvents interface to be called to provide notification of configuration events.</param>\r\n    <param name=\"cookie\">Reference to a token representing the completed registration</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)\">\r\n    <summary>\r\n    Registers the caller for configuration event notification. \r\n    </summary>\r\n    <param name=\"sink\">Reference to the IVsCfgProviderEvents interface to be called to provide notification of configuration events.</param>\r\n    <param name=\"cookie\">Reference to a token representing the completed registration</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetAutomationObject(string configurationName, out object configurationProperties)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetAutomationObject(System.String,System.Object@)\">\r\n    <summary>\r\n    Proved access to an IDispatchable object being a list of configuration properties\r\n    </summary>\r\n    <param name=\"configurationName\">Combined Name and Platform for the configuration requested</param>\r\n    <param name=\"configurationProperties\">The IDispatchcable object</param>\r\n    <returns>S_OK if successful</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetAutomationObject(System.String,System.Object@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetAutomationObject(System.String,System.Object@)\">\r\n    <summary>\r\n    Proved access to an IDispatchable object being a list of configuration properties\r\n    </summary>\r\n    <param name=\"configurationName\">Combined Name and Platform for the configuration requested</param>\r\n    <param name=\"configurationProperties\">The IDispatchcable object</param>\r\n    <returns>S_OK if successful</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgs(uint celt, IVsCfg[] a, uint[] actual, uint[] flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the per-configuration objects for this object. \r\n    </summary>\r\n    <param name=\"celt\">Number of configuration objects to be returned or zero, indicating a request for an unknown number of objects.</param>\r\n    <param name=\"a\">On input, pointer to an interface array or a null reference. On output, this parameter points to an array of IVsCfg interfaces belonging to the requested configuration objects.</param>\r\n    <param name=\"actual\">The number of configuration objects actually returned or a null reference, if this information is not necessary.</param>\r\n    <param name=\"flags\">Flags that specify settings for project configurations, or a null reference (Nothing in Visual Basic) if no additional flag settings are required. For valid prgrFlags values, see __VSCFGFLAGS.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the per-configuration objects for this object. \r\n    </summary>\r\n    <param name=\"celt\">Number of configuration objects to be returned or zero, indicating a request for an unknown number of objects.</param>\r\n    <param name=\"a\">On input, pointer to an interface array or a null reference. On output, this parameter points to an array of IVsCfg interfaces belonging to the requested configuration objects.</param>\r\n    <param name=\"actual\">The number of configuration objects actually returned or a null reference, if this information is not necessary.</param>\r\n    <param name=\"flags\">Flags that specify settings for project configurations, or a null reference (Nothing in Visual Basic) if no additional flag settings are required. For valid prgrFlags values, see __VSCFGFLAGS.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetSupportedPlatformNames(uint celt, string[] names, uint[] actual)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the set of platforms that are installed on the user's machine. \r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of supported platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of names specified by celt. This parameter can also be a null reference (Nothing in Visual Basic)if the celt parameter is zero. On output, names contains the names of supported platforms</param>\r\n    <param name=\"actual\">The actual number of platform names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the set of platforms that are installed on the user's machine. \r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of supported platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of names specified by celt. This parameter can also be a null reference (Nothing in Visual Basic)if the celt parameter is zero. On output, names contains the names of supported platforms</param>\r\n    <param name=\"actual\">The actual number of platform names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected ProjectConfig GetProjectConfiguration(string configName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetProjectConfiguration(System.String)\">\r\n    <summary>\r\n    Creates new Project Configuartion objects based on the configuration name.\r\n    </summary>\r\n    <param name=\"configName\">The name of the configuration</param>\r\n    <returns>An instance of a ProjectConfig object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetProjectConfiguration(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetProjectConfiguration(System.String)\">\r\n    <summary>\r\n    Creates new Project Configuartion objects based on the configuration name.\r\n    </summary>\r\n    <param name=\"configName\">The name of the configuration</param>\r\n    <returns>An instance of a ProjectConfig object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgOfName(string name, string platName, out IVsCfg cfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)\">\r\n    <summary>\r\n    Returns the configuration associated with a specified configuration or platform name. \r\n    </summary>\r\n    <param name=\"name\">The name of the configuration to be returned.</param>\r\n    <param name=\"platName\">The name of the platform for the configuration to be returned.</param>\r\n    <param name=\"cfg\">The implementation of the IVsCfg interface.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)\">\r\n    <summary>\r\n    Returns the configuration associated with a specified configuration or platform name. \r\n    </summary>\r\n    <param name=\"name\">The name of the configuration to be returned.</param>\r\n    <param name=\"platName\">The name of the platform for the configuration to be returned.</param>\r\n    <param name=\"cfg\">The implementation of the IVsCfg interface.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgProviderProperty(int propid, out object var)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgProviderProperty(System.Int32,System.Object@)\">\r\n    <summary>\r\n    Returns a specified configuration property. \r\n    </summary>\r\n    <param name=\"propid\">Specifies the property identifier for the property to return. For valid propid values, see __VSCFGPROPID.</param>\r\n    <param name=\"var\">The value of the property.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgProviderProperty(System.Int32,System.Object@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgProviderProperty(System.Int32,System.Object@)\">\r\n    <summary>\r\n    Returns a specified configuration property. \r\n    </summary>\r\n    <param name=\"propid\">Specifies the property identifier for the property to return. For valid propid values, see __VSCFGPROPID.</param>\r\n    <param name=\"var\">The value of the property.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UnadviseCfgProviderEvents(uint cookie)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.UnadviseCfgProviderEvents(System.UInt32)\">\r\n    <summary>\r\n    Cancels a registration for configuration event notification. \r\n    </summary>\r\n    <param name=\"cookie\">The cookie used for registration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.UnadviseCfgProviderEvents(System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.UnadviseCfgProviderEvents(System.UInt32)\">\r\n    <summary>\r\n    Cancels a registration for configuration event notification. \r\n    </summary>\r\n    <param name=\"cookie\">The cookie used for registration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_UsesIndependentConfigurations(out int usesIndependentConfigurations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.get_UsesIndependentConfigurations(System.Int32@)\">\r\n    <summary>\r\n    Checks whether or not this configuration provider uses independent configurations. \r\n    </summary>\r\n    <param name=\"usesIndependentConfigurations\">true if independent configurations are used, false if they are not used. By default returns true.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.get_UsesIndependentConfigurations(System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.get_UsesIndependentConfigurations(System.Int32@)\">\r\n    <summary>\r\n    Checks whether or not this configuration provider uses independent configurations. \r\n    </summary>\r\n    <param name=\"usesIndependentConfigurations\">true if independent configurations are used, false if they are not used. By default returns true.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AddCfgsOfPlatformName(string platformName, string clonePlatformName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfPlatformName(System.String,System.String)\">\r\n    <summary>\r\n    Copies an existing platform name or creates a new one. \r\n    </summary>\r\n    <param name=\"platformName\">The name of the new platform.</param>\r\n    <param name=\"clonePlatformName\">The name of the platform to copy, or a null reference, indicating that AddCfgsOfPlatformName should create a new platform.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfPlatformName(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfPlatformName(System.String,System.String)\">\r\n    <summary>\r\n    Copies an existing platform name or creates a new one. \r\n    </summary>\r\n    <param name=\"platformName\">The name of the new platform.</param>\r\n    <param name=\"clonePlatformName\">The name of the platform to copy, or a null reference, indicating that AddCfgsOfPlatformName should create a new platform.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DeleteCfgsOfCfgName(string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfCfgName(System.String)\">\r\n    <summary>\r\n    Deletes a specified configuration name. \r\n    </summary>\r\n    <param name=\"name\">The name of the configuration to be deleted.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfCfgName(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfCfgName(System.String)\">\r\n    <summary>\r\n    Deletes a specified configuration name. \r\n    </summary>\r\n    <param name=\"name\">The name of the configuration to be deleted.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ProjectConfig CreateProjectConfiguration(string configName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.CreateProjectConfiguration(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgNames(uint celt, string[] names, uint[] actual)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the existing configurations stored in the project file.\r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of property names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of configuration property names specified by celt. This parameter can also be a null reference if the celt parameter is zero. \r\n    On output, names contains configuration property names.</param>\r\n    <param name=\"actual\">The actual number of property names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgNames(System.UInt32,System.String[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the existing configurations stored in the project file.\r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of property names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of configuration property names specified by celt. This parameter can also be a null reference if the celt parameter is zero. \r\n    On output, names contains configuration property names.</param>\r\n    <param name=\"actual\">The actual number of property names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DeleteCfgsOfPlatformName(string platName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfPlatformName(System.String)\">\r\n    <summary>\r\n    Deletes a specified platform name. \r\n    </summary>\r\n    <param name=\"platName\">The platform name to delet.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfPlatformName(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfPlatformName(System.String)\">\r\n    <summary>\r\n    Deletes a specified platform name. \r\n    </summary>\r\n    <param name=\"platName\">The platform name to delet.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int RenameCfgsOfCfgName(string old, string newname)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.RenameCfgsOfCfgName(System.String,System.String)\">\r\n    <summary>\r\n    Assigns a new name to a configuration. \r\n    </summary>\r\n    <param name=\"old\">The old name of the target configuration.</param>\r\n    <param name=\"newname\">The new name of the target configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.RenameCfgsOfCfgName(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.RenameCfgsOfCfgName(System.String,System.String)\">\r\n    <summary>\r\n    Assigns a new name to a configuration. \r\n    </summary>\r\n    <param name=\"old\">The old name of the target configuration.</param>\r\n    <param name=\"newname\">The new name of the target configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetPlatformNames(uint celt, string[] names, uint[] actual)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns one or more platform names. \r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be a null reference if the celt parameter is zero. On output, names contains platform names.</param>\r\n    <param name=\"actual\">The actual number of platform names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns one or more platform names. \r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be a null reference if the celt parameter is zero. On output, names contains platform names.</param>\r\n    <param name=\"actual\">The actual number of platform names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AddCfgsOfCfgName(string name, string cloneName, int fPrivate)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfCfgName(System.String,System.String,System.Int32)\">\r\n    <summary>\r\n    Copies an existing configuration name or creates a new one. \r\n    </summary>\r\n    <param name=\"name\">The name of the new configuration.</param>\r\n    <param name=\"cloneName\">the name of the configuration to copy, or a null reference, indicating that AddCfgsOfCfgName should create a new configuration.</param>\r\n    <param name=\"fPrivate\">Flag indicating whether or not the new configuration is private. If fPrivate is set to true, the configuration is private. If set to false, the configuration is public. This flag can be ignored.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfCfgName(System.String,System.String,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfCfgName(System.String,System.String,System.Int32)\">\r\n    <summary>\r\n    Copies an existing configuration name or creates a new one. \r\n    </summary>\r\n    <param name=\"name\">The name of the new configuration.</param>\r\n    <param name=\"cloneName\">the name of the configuration to copy, or a null reference, indicating that AddCfgsOfCfgName should create a new configuration.</param>\r\n    <param name=\"fPrivate\">Flag indicating whether or not the new configuration is private. If fPrivate is set to true, the configuration is private. If set to false, the configuration is public. This flag can be ignored.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ConfigProvider",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ConfigProvider",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int get_DisplayName(out string pbstrDisplayName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_DisplayName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_CanonicalName(out string pbstrCanonicalName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_CanonicalName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Description(out string pbstrDescription)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_Description(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void InvalidateGroup()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.InvalidateGroup",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_KeyOutputObject(out IVsOutput2 ppKeyOutput)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_KeyOutputObject(Microsoft.VisualStudio.Shell.Interop.IVsOutput2@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_DeployDependencies(uint celt, IVsDeployDependency[] rgpdpd, uint[] pcActual)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_DeployDependencies(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency[],System.UInt32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_KeyOutput(out string pbstrCanonicalName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_KeyOutput(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Property(string pszProperty, out object pvar)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_Property(System.String,System.Object@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Outputs(uint celt, IVsOutput2[] rgpcfg, uint[] pcActual)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_Outputs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutput2[],System.UInt32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_ProjectCfg(out IVsProjectCfg2 ppIVsProjectCfg2)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_ProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void Refresh()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.Refresh",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OutputGroup\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.OutputGroup\">\r\n    <summary>\r\n    Allows projects to group outputs according to usage.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.OutputGroup",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.OutputGroup\">\r\n    <summary>\r\n    Allows projects to group outputs according to usage.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class AfterProjectFileOpenedEventArgs\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.AfterProjectFileOpenedEventArgs",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override void ResolveReference()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolveReference",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    Disposes the node\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    Disposes the node\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int Close()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Close\">\r\n    <summary>\r\n    Closes the node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Close",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Close\">\r\n    <summary>\r\n    Closes the node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void BindReferenceData()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.BindReferenceData",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default reference icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default reference icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class AssemblyReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.AssemblyReferenceNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override void Reload()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.Reload\">\r\n    <summary>\r\n    Reloads a project and its nested project nodes.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.Reload",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.Reload\">\r\n    <summary>\r\n    Reloads a project and its nested project nodes.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void ReloadNestedProjectNode(NestedProjectNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadNestedProjectNode(Microsoft.VisualStudio.Project.NestedProjectNode)\">\r\n    <summary>\r\n    Reloads a nested project node by deleting it and readding it.\r\n    </summary>\r\n    <param name=\"node\">The node to reload.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadNestedProjectNode(Microsoft.VisualStudio.Project.NestedProjectNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadNestedProjectNode(Microsoft.VisualStudio.Project.NestedProjectNode)\">\r\n    <summary>\r\n    Reloads a nested project node by deleting it and readding it.\r\n    </summary>\r\n    <param name=\"node\">The node to reload.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void AddVirtualProjects()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddVirtualProjects\">\r\n    <summary>\r\n    Links the nested project nodes to the solution. The default implementation parses all nested project nodes and calles AddVirtualProjectEx on them.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddVirtualProjects",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddVirtualProjects\">\r\n    <summary>\r\n    Links the nested project nodes to the solution. The default implementation parses all nested project nodes and calles AddVirtualProjectEx on them.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int ReloadItem(uint itemId, uint reserved)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadItem(System.UInt32,System.UInt32)\">\r\n    <summary>\r\n    Called to reload a project item. \r\n    Reloads a project and its nested project nodes.\r\n    </summary>\r\n    <param name=\"itemId\">Specifies itemid from VSITEMID.</param>\r\n    <param name=\"reserved\">Reserved.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadItem(System.UInt32,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadItem(System.UInt32,System.UInt32)\">\r\n    <summary>\r\n    Called to reload a project item. \r\n    Reloads a project and its nested project nodes.\r\n    </summary>\r\n    <param name=\"itemId\">Specifies itemid from VSITEMID.</param>\r\n    <param name=\"reserved\">Reserved.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual NestedProjectNode CreateNestedProjectNode(ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Override this method if you want to provide your own type of nodes.\r\n    This would be the case if you derive a class from NestedProjectNode\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Override this method if you want to provide your own type of nodes.\r\n    This would be the case if you derive a class from NestedProjectNode\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenChildren()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.OpenChildren",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual IVsHierarchy[] EnumNestedHierachiesForBuildDependency()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.EnumNestedHierachiesForBuildDependency\">\r\n    <summary>\r\n    Enumerates the nested hierachies that should be added to the build dependency list.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.EnumNestedHierachiesForBuildDependency",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.EnumNestedHierachiesForBuildDependency\">\r\n    <summary>\r\n    Enumerates the nested hierachies that should be added to the build dependency list.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int CloseChildren()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.CloseChildren",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override bool FilterItemTypeToBeAddedToHierarchy(string itemType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.FilterItemTypeToBeAddedToHierarchy(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int IsItemDirty(uint itemId, IntPtr punkDocData, out int pfDirty)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic override int GetNestedHierarchy(UInt32 itemId, ref Guid iidHierarchyNested, out IntPtr ppHierarchyNested, out uint pItemId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)\">\r\n    <summary>\r\n    Gets the nested hierarchy.\r\n    </summary>\r\n    <param name=\"itemId\">The item id.</param>\r\n    <param name=\"iidHierarchyNested\">Identifier of the interface to be returned in ppHierarchyNested.</param>\r\n    <param name=\"ppHierarchyNested\">Pointer to the interface whose identifier was passed in iidHierarchyNested.</param>\r\n    <param name=\"pItemId\">Pointer to an item identifier of the root node of the nested hierarchy.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. If ITEMID is not a nested hierarchy, this method returns E_FAIL.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)\">\r\n    <summary>\r\n    Gets the nested hierarchy.\r\n    </summary>\r\n    <param name=\"itemId\">The item id.</param>\r\n    <param name=\"iidHierarchyNested\">Identifier of the interface to be returned in ppHierarchyNested.</param>\r\n    <param name=\"ppHierarchyNested\">Pointer to the interface whose identifier was passed in iidHierarchyNested.</param>\r\n    <param name=\"pItemId\">Pointer to an item identifier of the root node of the nested hierarchy.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. If ITEMID is not a nested hierarchy, this method returns E_FAIL.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual string GetProjectTemplatePath(ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetProjectTemplatePath(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Based on the Template and TypeGuid properties of the\r\n    element, generate the full template path.\r\n    \r\n    TypeGuid should be the Guid of a registered project factory.\r\n    Template can be a full path, a project template (for projects\r\n    that support VsTemplates) or a relative path (for other projects).\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetProjectTemplatePath(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetProjectTemplatePath(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Based on the Template and TypeGuid properties of the\r\n    element, generate the full template path.\r\n    \r\n    TypeGuid should be the Guid of a registered project factory.\r\n    Template can be a full path, a project template (for projects\r\n    that support VsTemplates) or a relative path (for other projects).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SaveItem(VSSAVEFLAGS dwSave, string silentSaveAsName, uint itemid, IntPtr punkDocData, out int pfCancelled)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class ProjectContainerNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectContainerNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class ReplaceBetweenPairToken",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken\">\r\n    <summary>\r\n    Storage classes for string to be deleted between tokens to be deleted \r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken\">\r\n    <summary>\r\n    Storage classes for string to be deleted between tokens to be deleted \r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual void ResolveReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ResolveReference\">\r\n    <summary>\r\n    Resolves references.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.ResolveReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ResolveReference\">\r\n    <summary>\r\n    Resolves references.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected bool IsAlreadyAdded()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded\">\r\n    <summary>\r\n    Checks if a reference is already added. The method parses all references and compares the Url.\r\n    </summary>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded\">\r\n    <summary>\r\n    Checks if a reference is already added. The method parses all references and compares the Url.\r\n    </summary>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int ExcludeFromProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ExcludeFromProject\">\r\n    <summary>\r\n    Not supported.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.ExcludeFromProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ExcludeFromProject\">\r\n    <summary>\r\n    Not supported.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual bool CanAddReference(out CannotAddReferenceErrorMessage errorHandler)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)\">\r\n    <summary>\r\n    Validates that a reference can be added.\r\n    </summary>\r\n    <param name=\"errorHandler\">A CannotAddReferenceErrorMessage delegate to show the error message.</param>\r\n    <returns>true if the reference can be added.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)\">\r\n    <summary>\r\n    Validates that a reference can be added.\r\n    </summary>\r\n    <param name=\"errorHandler\">A CannotAddReferenceErrorMessage delegate to show the error message.</param>\r\n    <returns>true if the reference can be added.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected abstract void BindReferenceData();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.BindReferenceData",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual int ShowObjectBrowser()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ShowObjectBrowser\">\r\n    <summary>\r\n    Shows the Object Browser\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.ShowObjectBrowser",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ShowObjectBrowser\">\r\n    <summary>\r\n    Shows the Object Browser\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetAutomationObject\">\r\n    <summary>\r\n    Get an instance of the automation object for ReferenceNode\r\n    </summary>\r\n    <returns>An instance of Automation.OAReferenceItem type if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetAutomationObject\">\r\n    <summary>\r\n    Get an instance of the automation object for ReferenceNode\r\n    </summary>\r\n    <returns>An instance of Automation.OAReferenceItem type if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.AddReference\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.AddReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.AddReference\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetMkDocument\">\r\n    <summary>\r\n    This method is called by the interface method GetMkDocument to specify the item moniker.\r\n    </summary>\r\n    <returns>The moniker for this item</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.GetMkDocument",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetMkDocument\">\r\n    <summary>\r\n    This method is called by the interface method GetMkDocument to specify the item moniker.\r\n    </summary>\r\n    <returns>The moniker for this item</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetEditLabel\">\r\n    <summary>\r\n    Disable inline editing of Caption of a ReferendeNode\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetEditLabel\">\r\n    <summary>\r\n    Disable inline editing of Caption of a ReferendeNode\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public abstract class ReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReferenceNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class ActiveConfigurationChangedEventArgs",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs\">\r\n    <summary>\r\n    Defines the event args for the active configuration chnage event.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs\">\r\n    <summary>\r\n    Defines the event args for the active configuration chnage event.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class FolderNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FolderNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override void Initialize()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectPackage.Initialize",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override void Dispose(bool disposing)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectPackage.Dispose(System.Boolean)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class ProjectPackage\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectPackage\">\r\n    <summary>\r\n    Defines abstract package.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectPackage",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectPackage\">\r\n    <summary>\r\n    Defines abstract package.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override int OpenWithSpecific(uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file with a specific editor\r\n    </summary>\r\n    <param name=\"editorFlags\">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>\r\n    <param name=\"editorType\">Unique identifier of the editor type</param>\r\n    <param name=\"physicalView\">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file with a specific editor\r\n    </summary>\r\n    <param name=\"editorFlags\">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>\r\n    <param name=\"editorType\">Unique identifier of the editor type</param>\r\n    <param name=\"physicalView\">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Open(bool newFile, bool openWith, Guid logicalView, out IVsWindowFrame frame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window with a std editor\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"frame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window with a std editor\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"frame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Open(bool newFile, bool openWith, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Open(bool newFile, bool openWith, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window with a std editor\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window with a std editor\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int Open(ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file using the standard editor\r\n    </summary>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file using the standard editor\r\n    </summary>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class FileDocumentManager\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.FileDocumentManager\">\r\n    <summary>\r\n    This class handles opening, saving of file items in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.FileDocumentManager",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.FileDocumentManager\">\r\n    <summary>\r\n    This class handles opening, saving of file items in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Defines whether this node is valid node for painting the refererence icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Defines whether this node is valid node for painting the refererence icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void Remove(bool removeFromStorage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Overridden method. The method updates the build dependency list before removing the node from the hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.Remove(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Overridden method. The method updates the build dependency list before removing the node from the hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override bool CanAddReference(out CannotAddReferenceErrorMessage errorHandler)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)\">\r\n    <summary>\r\n    Checks if a project reference can be added to the hierarchy. It calls base to see if the reference is not already there, then checks for circular references.\r\n    </summary>\r\n    <param name=\"errorHandler\">The error handler delegate to return</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)\">\r\n    <summary>\r\n    Checks if a project reference can be added to the hierarchy. It calls base to see if the reference is not already there, then checks for circular references.\r\n    </summary>\r\n    <param name=\"errorHandler\">The error handler delegate to return</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void BindReferenceData()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.BindReferenceData",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void AddReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.AddReference\">\r\n    <summary>\r\n    The node is added to the hierarchy and then updates the build dependency list.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.AddReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.AddReference\">\r\n    <summary>\r\n    The node is added to the hierarchy and then updates the build dependency list.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ProjectReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectReferenceNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ReferenceNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReferenceNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetAutomationObject\">\r\n    <summary>\r\n    Returns an instance of the automation object for ReferenceContainerNode\r\n    </summary>\r\n    <returns>An intance of the Automation.OAReferenceFolderItem type if succeeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetAutomationObject\">\r\n    <summary>\r\n    Returns an instance of the automation object for ReferenceContainerNode\r\n    </summary>\r\n    <returns>An intance of the Automation.OAReferenceFolderItem type if succeeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetEditLabel\">\r\n    <summary>\r\n    Disable inline editing of Caption of a ReferendeContainerNode\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetEditLabel\">\r\n    <summary>\r\n    Disable inline editing of Caption of a ReferendeContainerNode\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int ExcludeFromProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.ExcludeFromProject\">\r\n    <summary>\r\n    Not supported.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.ExcludeFromProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.ExcludeFromProject\">\r\n    <summary>\r\n    Not supported.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ComReferenceNode CreateComReferenceNode(ProjectElement reference)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates a com reference node from the project element.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates a com reference node from the project element.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual AssemblyReferenceNode CreateAssemblyReferenceNode(ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates an assembly refernce node from a project element.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates an assembly refernce node from a project element.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public ReferenceNode AddReferenceFromSelectorData(VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Adds a reference to this container using the selector data structure to identify it.\r\n    </summary>\r\n    <param name=\"selectorData\">data describing selected component</param>\r\n    <returns>Reference in case of a valid reference node has been created. Otherwise null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Adds a reference to this container using the selector data structure to identify it.\r\n    </summary>\r\n    <param name=\"selectorData\">data describing selected component</param>\r\n    <returns>Reference in case of a valid reference node has been created. Otherwise null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Defines whether this node is valid node for painting the refererences icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Defines whether this node is valid node for painting the refererences icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual AssemblyReferenceNode CreateAssemblyReferenceNode(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(System.String)\">\r\n    <summary>\r\n    Creates an assembly reference node from a file path.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(System.String)\">\r\n    <summary>\r\n    Creates an assembly reference node from a file path.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void LoadReferencesFromBuildProject(MSBuild.Project buildProject)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.LoadReferencesFromBuildProject(Microsoft.Build.Evaluation.Project)\">\r\n    <summary>\r\n    Adds references to this container from a MSBuild project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.LoadReferencesFromBuildProject(Microsoft.Build.Evaluation.Project)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.LoadReferencesFromBuildProject(Microsoft.Build.Evaluation.Project)\">\r\n    <summary>\r\n    Adds references to this container from a MSBuild project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ReferenceNode CreateReferenceNode(string referenceType, ProjectElement element)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateReferenceNode(System.String,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual ComReferenceNode CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Creates a com reference node from a selector data.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Creates a com reference node from a selector data.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IList<ReferenceNode> EnumReferences()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.EnumReferences",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual ProjectReferenceNode CreateProjectReferenceNode(ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates a project reference node given an existing project element.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates a project reference node given an existing project element.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ProjectReferenceNode CreateProjectReferenceNode(VSCOMPONENTSELECTORDATA selectorData)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)\">\r\n    <summary>\r\n    Create a Project to Project reference given a VSCOMPONENTSELECTORDATA structure\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)\">\r\n    <summary>\r\n    Create a Project to Project reference given a VSCOMPONENTSELECTORDATA structure\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ReferenceNode CreateFileComponent(VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Creates an assemby or com reference node given a selector data.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Creates an assemby or com reference node given a selector data.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ReferenceNode CreateReferenceNode(VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ReferenceContainerNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReferenceContainerNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public int get_CanonicalName(out string canonicalName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_CanonicalName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_ReferredProject(out object unknownProject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_ReferredProject(System.Object@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_Description(out string description)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_Description(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_HelpFile(out string helpFile)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_HelpFile(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_Type(out System.Guid guidType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_Type(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_MustUpdateBefore(out int mustUpdateBefore)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_MustUpdateBefore(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic int get_HelpContext(out uint helpContext)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_HelpContext(System.UInt32@)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class NestedProjectBuildDependency\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.NestedProjectBuildDependency\">\r\n    <summary>\r\n    Used for adding a build dependency to nested project (not a real project reference)\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.NestedProjectBuildDependency",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.NestedProjectBuildDependency\">\r\n    <summary>\r\n    Used for adding a build dependency to nested project (not a real project reference)\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class ProjectConfigProperties\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectConfigProperties\">\r\n    <summary>\r\n    Implements the configuration dependent properties interface\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectConfigProperties",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectConfigProperties\">\r\n    <summary>\r\n    Implements the configuration dependent properties interface\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class ReplacePairToken",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ReplacePairToken\">\r\n    <summary>\r\n     Storage classes for replacement tokens\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReplacePairToken",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ReplacePairToken\">\r\n    <summary>\r\n     Storage classes for replacement tokens\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Attr\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1720:IdentifiersShouldNotContainTypeNames\", MessageId = \"bool\")]\r\npublic virtual bool GetBoolAttr(string config, string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetBoolAttr(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int UpgradeProject(uint grfUpgradeFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.UpgradeProject(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int InitializeForOuter(string filename, string location, string name, uint flags, ref Guid iid, out IntPtr projectPointer, out int canceled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)\">\r\n    <summary>\r\n    This is where the initialization occurs.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)\">\r\n    <summary>\r\n    This is where the initialization occurs.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void PrepareBuild(string config, bool cleanBuild)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PrepareBuild(System.String,System.Boolean)\">\r\n    <summary>\r\n    This is called from the main thread before the background build starts.\r\n     cleanBuild is not part of the vsopts, but passed down as the callpath is differently\r\n     PrepareBuild mainly creates directories and cleans house if cleanBuild is true\r\n    </summary>\r\n    <param name=\"config\"></param>\r\n    <param name=\"cleanBuild\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.PrepareBuild(System.String,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PrepareBuild(System.String,System.Boolean)\">\r\n    <summary>\r\n    This is called from the main thread before the background build starts.\r\n     cleanBuild is not part of the vsopts, but passed down as the callpath is differently\r\n     PrepareBuild mainly creates directories and cleans house if cleanBuild is true\r\n    </summary>\r\n    <param name=\"config\"></param>\r\n    <param name=\"cleanBuild\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetProperty(int propid, object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProperty(System.Int32,System.Object)\">\r\n    <summary>\r\n    Sets the properties for the project node.\r\n    </summary>\r\n    <param name=\"propid\">Identifier of the hierarchy property. For a list of propid values, <see cref=\"T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID\"/> </param>\r\n    <param name=\"value\">The value to set. </param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetProperty(System.Int32,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProperty(System.Int32,System.Object)\">\r\n    <summary>\r\n    Sets the properties for the project node.\r\n    </summary>\r\n    <param name=\"propid\">Identifier of the hierarchy property. For a list of propid values, <see cref=\"T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID\"/> </param>\r\n    <param name=\"value\">The value to set. </param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenItemWithSpecific(uint itemId, uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame frame)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OpenItemWithSpecific(System.UInt32,System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string GetProjectProperty(string propertyName, bool resetCache)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String,System.Boolean)\">\r\n    <summary>\r\n    Return the value of a project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to get</param>\r\n    <param name=\"resetCache\">True to avoid using the cache</param>\r\n    <returns>null if property does not exist, otherwise value of the property</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String,System.Boolean)\">\r\n    <summary>\r\n    Return the value of a project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to get</param>\r\n    <param name=\"resetCache\">True to avoid using the cache</param>\r\n    <returns>null if property does not exist, otherwise value of the property</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetGuidProperty(int propid, ref Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Sets Guid properties for the project node.\r\n    </summary>\r\n    <param name=\"propid\">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>\r\n    <param name=\"guid\">The guid value to set.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Sets Guid properties for the project node.\r\n    </summary>\r\n    <param name=\"propid\">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>\r\n    <param name=\"guid\">The guid value to set.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetProjectProperty(string propertyName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String)\">\r\n    <summary>\r\n    Get value of Project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of Property to retrieve</param>\r\n    <returns>Evaluated value of property.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String)\">\r\n    <summary>\r\n    Get value of Project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of Property to retrieve</param>\r\n    <returns>Evaluated value of property.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    Disposes the project node object.\r\n    </summary>\r\n    <param name=\"disposing\">Flag determining ehether it was deterministic or non deterministic clean up.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    Disposes the project node object.\r\n    </summary>\r\n    <param name=\"disposing\">Flag determining ehether it was deterministic or non deterministic clean up.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SaveCompleted(string filename)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SaveCompleted(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual bool FilterItemTypeToBeAddedToHierarchy(string itemType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.FilterItemTypeToBeAddedToHierarchy(System.String)\">\r\n    <summary>\r\n    Filter items that should not be processed as file items. Example: Folders and References.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.FilterItemTypeToBeAddedToHierarchy(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.FilterItemTypeToBeAddedToHierarchy(System.String)\">\r\n    <summary>\r\n    Filter items that should not be processed as file items. Example: Folders and References.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\"), SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"dlg\")]\r\npublic virtual VSADDRESULT RunWizard(HierarchyNode parentNode, string itemName, string wizardToRun, IntPtr dlgOwner)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RunWizard(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String,System.IntPtr)\">\r\n    <summary>\r\n    Executes a wizard.\r\n    </summary>\r\n    <param name=\"parentNode\">The node to which the wizard should add item(s).</param>\r\n    <param name=\"itemName\">The name of the file that the user typed in.</param>\r\n    <param name=\"wizardToRun\">The name of the wizard to run.</param>\r\n    <param name=\"dlgOwner\">The owner of the dialog box.</param>\r\n    <returns>A VSADDRESULT enum value describing success or failure.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RunWizard(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RunWizard(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String,System.IntPtr)\">\r\n    <summary>\r\n    Executes a wizard.\r\n    </summary>\r\n    <param name=\"parentNode\">The node to which the wizard should add item(s).</param>\r\n    <param name=\"itemName\">The name of the file that the user typed in.</param>\r\n    <param name=\"wizardToRun\">The name of the wizard to run.</param>\r\n    <param name=\"dlgOwner\">The owner of the dialog box.</param>\r\n    <returns>A VSADDRESULT enum value describing success or failure.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SccGlyphChanged(int affectedNodes, uint[] itemidAffectedNodes, VsStateIcon[] newGlyphs, uint[] newSccStatus)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])\">\r\n    <summary>\r\n    This method is called by the source control portion of the environment to inform the project of changes to the source control glyph on various nodes. \r\n    </summary>\r\n    <param name=\"affectedNodes\">Count of changed nodes.</param>\r\n    <param name=\"itemidAffectedNodes\">An array of VSITEMID identifiers of the changed nodes.</param>\r\n    <param name=\"newGlyphs\">An array of VsStateIcon glyphs representing the new state of the corresponding item in rgitemidAffectedNodes.</param>\r\n    <param name=\"newSccStatus\">An array of status flags from SccStatus corresponding to rgitemidAffectedNodes. </param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])\">\r\n    <summary>\r\n    This method is called by the source control portion of the environment to inform the project of changes to the source control glyph on various nodes. \r\n    </summary>\r\n    <param name=\"affectedNodes\">Count of changed nodes.</param>\r\n    <param name=\"itemidAffectedNodes\">An array of VSITEMID identifiers of the changed nodes.</param>\r\n    <param name=\"newGlyphs\">An array of VsStateIcon glyphs representing the new state of the corresponding item in rgitemidAffectedNodes.</param>\r\n    <param name=\"newSccStatus\">An array of status flags from SccStatus corresponding to rgitemidAffectedNodes. </param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetSccFiles(uint itemid, CALPOLESTR[] stringsOut, CADWORD[] flagsOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])\">\r\n    <summary>\r\n    This method is called to determine which files should be placed under source control for a given VSITEMID within this hierarchy.\r\n    </summary>\r\n    <param name=\"itemid\">Identifier for the VSITEMID being queried.</param>\r\n    <param name=\"stringsOut\">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>\r\n    <param name=\"flagsOut\">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])\">\r\n    <summary>\r\n    This method is called to determine which files should be placed under source control for a given VSITEMID within this hierarchy.\r\n    </summary>\r\n    <param name=\"itemid\">Identifier for the VSITEMID being queried.</param>\r\n    <param name=\"stringsOut\">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>\r\n    <param name=\"flagsOut\">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int InitNew(uint formatIndex)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.InitNew(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void Reload()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Reload\">\r\n    <summary>\r\n    Reload project from project file\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Reload",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Reload\">\r\n    <summary>\r\n    Reload project from project file\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SetHostObject(string targetName, string taskName, object hostObject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetHostObject(System.String,System.String,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Scc\")]\r\nprotected void RegisterSccProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RegisterSccProject\">\r\n    <summary>\r\n    Register the project with the Scc manager.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RegisterSccProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RegisterSccProject\">\r\n    <summary>\r\n    Register the project with the Scc manager.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetSccSpecialFiles(uint itemid, string sccFile, CALPOLESTR[] stringsOut, CADWORD[] flagsOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])\">\r\n    <summary>\r\n    This method is called to discover special (hidden files) associated with a given VSITEMID within this hierarchy. \r\n    </summary>\r\n    <param name=\"itemid\">Identifier for the VSITEMID being queried.</param>\r\n    <param name=\"sccFile\">One of the files associated with the node</param>\r\n    <param name=\"stringsOut\">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>\r\n    <param name=\"flagsOut\">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n    <remarks>This method is called to discover any special or hidden files associated with an item in the project hierarchy. It is called when GetSccFiles returns with the SFF_HasSpecialFiles flag set for any of the files associated with the node.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])\">\r\n    <summary>\r\n    This method is called to discover special (hidden files) associated with a given VSITEMID within this hierarchy. \r\n    </summary>\r\n    <param name=\"itemid\">Identifier for the VSITEMID being queried.</param>\r\n    <param name=\"sccFile\">One of the files associated with the node</param>\r\n    <param name=\"stringsOut\">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>\r\n    <param name=\"flagsOut\">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n    <remarks>This method is called to discover any special or hidden files associated with an item in the project hierarchy. It is called when GetSccFiles returns with the SFF_HasSpecialFiles flag set for any of the files associated with the node.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual HierarchyNode CreateFolderNodes(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNodes(System.String)\">\r\n    <summary>\r\n    Walks the subpaths of a project relative path and checks if the folder nodes hierarchy is already there, if not creates it.\r\n    </summary>\r\n    <param name=\"strPath\">Path of the folder, can be relative to project or absolute</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNodes(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNodes(System.String)\">\r\n    <summary>\r\n    Walks the subpaths of a project relative path and checks if the folder nodes hierarchy is already there, if not creates it.\r\n    </summary>\r\n    <param name=\"strPath\">Path of the folder, can be relative to project or absolute</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAutomationObject\">\r\n    <summary>\r\n    Gets the automation object for the project node.\r\n    </summary>\r\n    <returns>An instance of an EnvDTE.Project implementation object representing the automation object for the project.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAutomationObject\">\r\n    <summary>\r\n    Gets the automation object for the project node.\r\n    </summary>\r\n    <returns>An instance of an EnvDTE.Project implementation object representing the automation object for the project.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void SuspendMSBuild()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SuspendMSBuild\">\r\n    <summary>\r\n    Suspends MSBuild\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SuspendMSBuild",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SuspendMSBuild\">\r\n    <summary>\r\n    Suspends MSBuild\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"XML\")]\r\nprotected void PersistXMLFragments()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PersistXMLFragments\">\r\n    <summary>\r\n    Retrieve all XML fragments that need to be saved from the flavors and store the information in msbuild.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.PersistXMLFragments",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PersistXMLFragments\">\r\n    <summary>\r\n    Retrieve all XML fragments that need to be saved from the flavors and store the information in msbuild.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\"), System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Globalization\", \"CA1308:NormalizeStringsToUppercase\")]\r\npublic virtual ProjectOptions GetProjectOptions(string config = null)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectOptions(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ICodeCompiler GetCompiler()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetCompiler\">\r\n    <summary>\r\n    Returns the Compiler associated to the project \r\n    </summary>\r\n    <returns>Null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetCompiler",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetCompiler\">\r\n    <summary>\r\n    Returns the Compiler associated to the project \r\n    </summary>\r\n    <returns>Null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void ResumeMSBuild(string config, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void RemoveBuildDependency(IVsBuildDependency dependency)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RemoveBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override void Remove(bool removeFromStorage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Removes items from the hierarchy. \r\n    </summary>\r\n    <devdoc>Project overwrites this.</devdoc>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Remove(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Removes items from the hierarchy. \r\n    </summary>\r\n    <devdoc>Project overwrites this.</devdoc>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetProjectPropertyUnevaluated(string propertyName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectPropertyUnevaluated(System.String)\">\r\n    <summary>\r\n    Gets the unevaluated value of a project property.\r\n    </summary>\r\n    <param name=\"propertyName\">The name of the property to retrieve.</param>\r\n    <returns>Unevaluated value of the property.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectPropertyUnevaluated(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectPropertyUnevaluated(System.String)\">\r\n    <summary>\r\n    Gets the unevaluated value of a project property.\r\n    </summary>\r\n    <param name=\"propertyName\">The name of the property to retrieve.</param>\r\n    <returns>Unevaluated value of the property.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void SetOutputLogger(IVsOutputWindowPane output)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetOutputLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Associate window output pane to the build logger\r\n    </summary>\r\n    <param name=\"output\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetOutputLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetOutputLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Associate window output pane to the build logger\r\n    </summary>\r\n    <param name=\"output\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AddComponent(VSADDCOMPOPERATION dwAddCompOperation, uint cComponents, System.IntPtr[] rgpcsdComponents, System.IntPtr hwndDialog, VSADDCOMPRESULT[] pResult)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])\">\r\n    <summary>\r\n    Add Components to the Project.\r\n    Used by the environment to add components specified by the user in the Component Selector dialog \r\n    to the specified project\r\n    </summary>\r\n    <param name=\"dwAddCompOperation\">The component operation to be performed.</param>\r\n    <param name=\"cComponents\">Number of components to be added</param>\r\n    <param name=\"rgpcsdComponents\">array of component selector data</param>\r\n    <param name=\"hwndDialog\">Handle to the component picker dialog</param>\r\n    <param name=\"pResult\">Result to be returned to the caller</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])\">\r\n    <summary>\r\n    Add Components to the Project.\r\n    Used by the environment to add components specified by the user in the Component Selector dialog \r\n    to the specified project\r\n    </summary>\r\n    <param name=\"dwAddCompOperation\">The component operation to be performed.</param>\r\n    <param name=\"cComponents\">Number of components to be added</param>\r\n    <param name=\"rgpcsdComponents\">array of component selector data</param>\r\n    <param name=\"hwndDialog\">Handle to the component picker dialog</param>\r\n    <param name=\"pResult\">Result to be returned to the caller</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1506:AvoidExcessiveClassCoupling\"), System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\")]\r\npublic virtual int AddItemWithSpecific(uint itemIdLoc, VSADDITEMOPERATION op, string itemName, uint filesToOpen, string[] files, IntPtr dlgOwner, uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, VSADDRESULT[] result)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])\">\r\n    <summary>\r\n    Creates new items in a project, adds existing files to a project, or causes Add Item wizards to be run\r\n    </summary>\r\n    <param name=\"itemIdLoc\"></param>\r\n    <param name=\"op\"></param>\r\n    <param name=\"itemName\"></param>\r\n    <param name=\"filesToOpen\"></param>\r\n    <param name=\"files\">Array of file names. \r\n    If dwAddItemOperation is VSADDITEMOP_CLONEFILE the first item in the array is the name of the file to clone. \r\n    If dwAddItemOperation is VSADDITEMOP_OPENDIRECTORY, the first item in the array is the directory to open. \r\n    If dwAddItemOperation is VSADDITEMOP_RUNWIZARD, the first item is the name of the wizard to run, \r\n    and the second item is the file name the user supplied (same as itemName).</param>\r\n    <param name=\"dlgOwner\"></param>\r\n    <param name=\"editorFlags\"></param>\r\n    <param name=\"editorType\"></param>\r\n    <param name=\"physicalView\"></param>\r\n    <param name=\"logicalView\"></param>\r\n    <param name=\"result\"></param>\r\n    <returns>S_OK if it succeeds </returns>\r\n    <remarks>The result array is initalized to failure.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])\">\r\n    <summary>\r\n    Creates new items in a project, adds existing files to a project, or causes Add Item wizards to be run\r\n    </summary>\r\n    <param name=\"itemIdLoc\"></param>\r\n    <param name=\"op\"></param>\r\n    <param name=\"itemName\"></param>\r\n    <param name=\"filesToOpen\"></param>\r\n    <param name=\"files\">Array of file names. \r\n    If dwAddItemOperation is VSADDITEMOP_CLONEFILE the first item in the array is the name of the file to clone. \r\n    If dwAddItemOperation is VSADDITEMOP_OPENDIRECTORY, the first item in the array is the directory to open. \r\n    If dwAddItemOperation is VSADDITEMOP_RUNWIZARD, the first item is the name of the wizard to run, \r\n    and the second item is the file name the user supplied (same as itemName).</param>\r\n    <param name=\"dlgOwner\"></param>\r\n    <param name=\"editorFlags\"></param>\r\n    <param name=\"editorType\"></param>\r\n    <param name=\"physicalView\"></param>\r\n    <param name=\"logicalView\"></param>\r\n    <param name=\"result\"></param>\r\n    <returns>S_OK if it succeeds </returns>\r\n    <remarks>The result array is initalized to failure.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnPaste(int wasCut, uint dropEffect)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnPaste(System.Int32,System.UInt32)\">\r\n     <summary>\r\n     Called after your cut/copied items has been pasted\r\n     </summary>\r\n    <param name=\"wasCut\">If true, then the IDataObject has been successfully pasted into a target hierarchy. \r\n     If false, then the cut or copy operation was cancelled.</param>\r\n     <param name=\"dropEffect\">Visual effects associated with the drag and drop operation, such as cursors, bitmaps, and so on. \r\n     These should be the same visual effects used in OnDropNotify</param>\r\n     <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnPaste(System.Int32,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnPaste(System.Int32,System.UInt32)\">\r\n     <summary>\r\n     Called after your cut/copied items has been pasted\r\n     </summary>\r\n    <param name=\"wasCut\">If true, then the IDataObject has been successfully pasted into a target hierarchy. \r\n     If false, then the cut or copy operation was cancelled.</param>\r\n     <param name=\"dropEffect\">Visual effects associated with the drag and drop operation, such as cursors, bitmaps, and so on. \r\n     These should be the same visual effects used in OnDropNotify</param>\r\n     <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnDropNotify(int fDropped, uint dwEffects)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnDropNotify(System.Int32,System.UInt32)\">\r\n    <summary>\r\n    Notifies clients that the dragged item was dropped. \r\n    </summary>\r\n    <param name=\"fDropped\">If true, then the dragged item was dropped on the target. If false, then the drop did not occur.</param>\r\n    <param name=\"dwEffects\">Visual effects associated with the drag-and-drop operation, such as cursors, bitmaps, and so on. \r\n    The value of dwEffects passed to the source object via OnDropNotify method is the value of pdwEffects returned by Drop method.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnDropNotify(System.Int32,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnDropNotify(System.Int32,System.UInt32)\">\r\n    <summary>\r\n    Notifies clients that the dragged item was dropped. \r\n    </summary>\r\n    <param name=\"fDropped\">If true, then the dragged item was dropped on the target. If false, then the drop did not occur.</param>\r\n    <param name=\"dwEffects\">Visual effects associated with the drag-and-drop operation, such as cursors, bitmaps, and so on. \r\n    The value of dwEffects passed to the source object via OnDropNotify method is the value of pdwEffects returned by Drop method.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int GetTargetFramework(out string ppTargetFramework)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetTargetFramework(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int DragLeave()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragLeave\">\r\n    <summary>\r\n    Called when one or more items are dragged out of the hierarchy or hierarchy window, or when the drag-and-drop operation is cancelled or completed.\r\n    </summary>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.DragLeave",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragLeave\">\r\n    <summary>\r\n    Called when one or more items are dragged out of the hierarchy or hierarchy window, or when the drag-and-drop operation is cancelled or completed.\r\n    </summary>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int ReopenItem(uint itemId, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame frame)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ReopenItem(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void FlushBuildLoggerContent()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.FlushBuildLoggerContent\">\r\n    <summary>\r\n    Flush any remaining content from build logger.\r\n    This method is called as part of the callback method passed to the buildsubmission during async build\r\n    so that results can be printed the the build is finished.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.FlushBuildLoggerContent",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.FlushBuildLoggerContent\">\r\n    <summary>\r\n    Flush any remaining content from build logger.\r\n    This method is called as part of the callback method passed to the buildsubmission during async build\r\n    so that results can be printed the the build is finished.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int OpenDependency(string szDependencyCanonicalName, out IVsDependency dependency)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OpenDependency(System.String,Microsoft.VisualStudio.Shell.Interop.IVsDependency@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string GetOutputPath(string config)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputPath(System.String)\">\r\n    <summary>\r\n    Get the output path for a specific configuration name\r\n    </summary>\r\n    <param name=\"config\">name of configuration</param>\r\n    <returns>Output path</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputPath(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputPath(System.String)\">\r\n    <summary>\r\n    Get the output path for a specific configuration name\r\n    </summary>\r\n    <param name=\"config\">name of configuration</param>\r\n    <returns>Output path</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual HierarchyNode GetInner()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetInner\">\r\n    <summary>\r\n    Get the inner object of an aggregated hierarchy\r\n    </summary>\r\n    <returns>A HierarchyNode</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetInner",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetInner\">\r\n    <summary>\r\n    Get the inner object of an aggregated hierarchy\r\n    </summary>\r\n    <returns>A HierarchyNode</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void ResumeMSBuild(string config, IVsOutputWindowPane output, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetFormatList(out string formatlist)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetFormatList(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"ToMs\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\nprotected virtual ProjectElement AddFileToMsBuild(string file)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileToMsBuild(System.String)\">\r\n    <summary>\r\n    Adds a file to the msbuild project.\r\n    </summary>\r\n    <param name=\"file\">The file to be added.</param>\r\n    <returns>A ProjectElement describing the newly added file.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddFileToMsBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileToMsBuild(System.String)\">\r\n    <summary>\r\n    Adds a file to the msbuild project.\r\n    </summary>\r\n    <param name=\"file\">The file to be added.</param>\r\n    <returns>A ProjectElement describing the newly added file.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int CancelBatchEdit()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CancelBatchEdit",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public ProjectElement GetProjectElement(MSBuild.ProjectItem item)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectElement(Microsoft.Build.Evaluation.ProjectItem)\">\r\n    <summary>\r\n    This method returns new project element based on existing MSBuild item. It does not modify/add project/build hierarchy at all.\r\n    </summary>\r\n    <param name=\"item\">MSBuild item instance</param>\r\n    <returns>wrapping project element</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectElement(Microsoft.Build.Evaluation.ProjectItem)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectElement(Microsoft.Build.Evaluation.ProjectItem)\">\r\n    <summary>\r\n    This method returns new project element based on existing MSBuild item. It does not modify/add project/build hierarchy at all.\r\n    </summary>\r\n    <param name=\"item\">MSBuild item instance</param>\r\n    <returns>wrapping project element</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\nprotected virtual MSBuildResult InvokeMsBuild(string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InvokeMsBuild(System.String)\">\r\n    <summary>\r\n    This execute an MSBuild target for a design-time build.\r\n    </summary>\r\n    <param name=\"target\">Name of the MSBuild target to execute</param>\r\n    <returns>Result from executing the target (success/failure)</returns>\r\n    <remarks>\r\n    If you depend on the items/properties generated by the target\r\n    you should be aware that any call to BuildTarget on any project\r\n    will reset the list of generated items/properties\r\n    </remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.InvokeMsBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InvokeMsBuild(System.String)\">\r\n    <summary>\r\n    This execute an MSBuild target for a design-time build.\r\n    </summary>\r\n    <param name=\"target\">Name of the MSBuild target to execute</param>\r\n    <returns>Result from executing the target (success/failure)</returns>\r\n    <remarks>\r\n    If you depend on the items/properties generated by the target\r\n    you should be aware that any call to BuildTarget on any project\r\n    will reset the list of generated items/properties\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"ToMs\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\nprotected virtual ProjectElement AddFolderToMsBuild(string folder)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderToMsBuild(System.String)\">\r\n    <summary>\r\n    Adds a folder to the msbuild project.\r\n    </summary>\r\n    <param name=\"folder\">The folder to be added.</param>\r\n    <returns>A Projectelement describing the newly added folder.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderToMsBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderToMsBuild(System.String)\">\r\n    <summary>\r\n    Adds a folder to the msbuild project.\r\n    </summary>\r\n    <param name=\"folder\">The folder to be added.</param>\r\n    <returns>A Projectelement describing the newly added folder.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult Build(string target, IVsOutputWindowPane output)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Overloaded method. Invokes MSBuild using the default configuration.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Overloaded method. Invokes MSBuild using the default configuration.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual FileNode CreateFileNode(string file)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(System.String)\">\r\n    <summary>\r\n    Create a file node based on a string.\r\n    </summary>\r\n    <param name=\"file\">filename of the new filenode</param>\r\n    <returns>File node added</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(System.String)\">\r\n    <summary>\r\n    Create a file node based on a string.\r\n    </summary>\r\n    <param name=\"file\">filename of the new filenode</param>\r\n    <returns>File node added</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual bool IsItemTypeFileType(string type)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsItemTypeFileType(System.String)\">\r\n    <summary>\r\n    Called by the project to know if the item is a file (that is part of the project)\r\n    or an intermediate file used by the MSBuild tasks/targets\r\n    Override this method if your project has more types or different ones\r\n    </summary>\r\n    <param name=\"type\">Type name</param>\r\n    <returns>True = items of this type should be included in the project</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsItemTypeFileType(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsItemTypeFileType(System.String)\">\r\n    <summary>\r\n    Called by the project to know if the item is a file (that is part of the project)\r\n    or an intermediate file used by the MSBuild tasks/targets\r\n    Override this method if your project has more types or different ones\r\n    </summary>\r\n    <param name=\"type\">Type name</param>\r\n    <returns>True = items of this type should be included in the project</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"SubFolder\")]\r\nprotected virtual FolderNode VerifySubFolderExists(string path, HierarchyNode parent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.VerifySubFolderExists(System.String,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Takes a path and verifies that we have a node with that name.\r\n    It is meant to be a helper method for CreateFolderNodes().\r\n    For some scenario it may be useful to override.\r\n    </summary>\r\n    <param name=\"path\">full path to the subfolder we want to verify.</param>\r\n    <param name=\"parent\">the parent node where to add the subfolder if it does not exist.</param>\r\n    <returns>the foldernode correcsponding to the path.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.VerifySubFolderExists(System.String,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.VerifySubFolderExists(System.String,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Takes a path and verifies that we have a node with that name.\r\n    It is meant to be a helper method for CreateFolderNodes().\r\n    For some scenario it may be useful to override.\r\n    </summary>\r\n    <param name=\"path\">full path to the subfolder we want to verify.</param>\r\n    <param name=\"parent\">the parent node where to add the subfolder if it does not exist.</param>\r\n    <returns>the foldernode correcsponding to the path.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetBuildSystemKind(out uint kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetBuildSystemKind(System.UInt32@)\">\r\n    <summary>\r\n    Used to determine the kind of build system, in VS 2005 there's only one defined kind: MSBuild \r\n    </summary>\r\n    <param name=\"kind\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetBuildSystemKind(System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetBuildSystemKind(System.UInt32@)\">\r\n    <summary>\r\n    Used to determine the kind of build system, in VS 2005 there's only one defined kind: MSBuild \r\n    </summary>\r\n    <param name=\"kind\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int SetInnerProject(object innerProject)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetInnerProject(System.Object)\">\r\n    <summary>\r\n    We are always the inner most part of the aggregation\r\n    and as such we don't support setting an inner project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetInnerProject(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetInnerProject(System.Object)\">\r\n    <summary>\r\n    We are always the inner most part of the aggregation\r\n    and as such we don't support setting an inner project\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void SetBuildConfigurationProperties(string config)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildConfigurationProperties(System.String)\">\r\n    <summary>\r\n    Set configuration properties for a specific configuration\r\n    </summary>\r\n    <param name=\"config\">configuration name</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildConfigurationProperties(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildConfigurationProperties(System.String)\">\r\n    <summary>\r\n    Set configuration properties for a specific configuration\r\n    </summary>\r\n    <param name=\"config\">configuration name</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int GetClassID(out Guid clsid)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetClassID(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAggregationComplete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnAggregationComplete\">\r\n    <summary>\r\n    This is called after the project is done initializing the different layer of the aggregations\r\n    </summary>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnAggregationComplete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnAggregationComplete\">\r\n    <summary>\r\n    This is called after the project is done initializing the different layer of the aggregations\r\n    </summary>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void SetProjectFileDirty(bool value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectFileDirty(System.Boolean)\">\r\n    <summary>\r\n    Set dirty state of project\r\n    </summary>\r\n    <param name=\"value\">boolean value indicating dirty state</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectFileDirty(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectFileDirty(System.Boolean)\">\r\n    <summary>\r\n    Set dirty state of project\r\n    </summary>\r\n    <param name=\"value\">boolean value indicating dirty state</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int IsDirty(out int isDirty)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsDirty(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void WalkSourceProjectAndAdd(IVsHierarchy sourceHierarchy, uint itemId, HierarchyNode targetNode, bool addSiblings)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.ProjectNode.WalkSourceProjectAndAdd(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Project.HierarchyNode,System.Boolean)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.WalkSourceProjectAndAdd(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Project.HierarchyNode,System.Boolean)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.ProjectNode.WalkSourceProjectAndAdd(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Project.HierarchyNode,System.Boolean)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void SaveMSBuildProjectFileAs(string newFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SaveMSBuildProjectFileAs(System.String)\">\r\n    <summary>\r\n    Saves project file related information to the new file name. It also calls msbuild API to save the project file.\r\n    It is called by the SaveAs method and the SetEditLabel before the project file rename related events are triggered. \r\n    An implementer can override this method to provide specialized semantics on how the project file is renamed in the msbuild file.\r\n    </summary>\r\n    <param name=\"newFileName\">The new full path of the project file</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SaveMSBuildProjectFileAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SaveMSBuildProjectFileAs(System.String)\">\r\n    <summary>\r\n    Saves project file related information to the new file name. It also calls msbuild API to save the project file.\r\n    It is called by the SaveAs method and the SetEditLabel before the project file rename related events are triggered. \r\n    An implementer can override this method to provide specialized semantics on how the project file is renamed in the msbuild file.\r\n    </summary>\r\n    <param name=\"newFileName\">The new full path of the project file</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetItemContext(uint itemId, out Microsoft.VisualStudio.OLE.Interop.IServiceProvider psp)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetItemContext(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual bool NodeHasDesigner(string itemPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.NodeHasDesigner(System.String)\">\r\n    <summary>\r\n    Defines if Node has Designer. By default we do not support designers for nodes\r\n    </summary>\r\n    <param name=\"itemPath\">Path to item to query for designer support</param>\r\n    <returns>true if node has designer</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.NodeHasDesigner(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.NodeHasDesigner(System.String)\">\r\n    <summary>\r\n    Defines if Node has Designer. By default we do not support designers for nodes\r\n    </summary>\r\n    <param name=\"itemPath\">Path to item to query for designer support</param>\r\n    <returns>true if node has designer</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AddProjectReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddProjectReference\">\r\n    <summary>\r\n    Override this method if you want to modify the behavior of the Add Reference dialog\r\n    By example you could change which pages are visible and which is visible by default.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddProjectReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddProjectReference\">\r\n    <summary>\r\n    Override this method if you want to modify the behavior of the Add Reference dialog\r\n    By example you could change which pages are visible and which is visible by default.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int GetDropInfo(out uint pdwOKEffects, out IOleDataObject ppDataObject, out IDropSource ppDropSource)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)\">\r\n    <summary>\r\n    Returns information about one or more of the items being dragged\r\n    </summary>\r\n    <param name=\"pdwOKEffects\">Pointer to a DWORD value describing the effects displayed while the item is being dragged, \r\n    such as cursor icons that change during the drag-and-drop operation. \r\n    For example, if the item is dragged over an invalid target point \r\n    (such as the item's original location), the cursor icon changes to a circle with a line through it. \r\n    Similarly, if the item is dragged over a valid target point, the cursor icon changes to a file or folder.</param>\r\n    <param name=\"ppDataObject\">Pointer to the IDataObject interface on the item being dragged. \r\n    This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>\r\n    <param name=\"ppDropSource\">Pointer to the IDropSource interface of the item being dragged.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)\">\r\n    <summary>\r\n    Returns information about one or more of the items being dragged\r\n    </summary>\r\n    <param name=\"pdwOKEffects\">Pointer to a DWORD value describing the effects displayed while the item is being dragged, \r\n    such as cursor icons that change during the drag-and-drop operation. \r\n    For example, if the item is dragged over an invalid target point \r\n    (such as the item's original location), the cursor icon changes to a circle with a line through it. \r\n    Similarly, if the item is dragged over a valid target point, the cursor icon changes to a file or folder.</param>\r\n    <param name=\"ppDataObject\">Pointer to the IDataObject interface on the item being dragged. \r\n    This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>\r\n    <param name=\"ppDropSource\">Pointer to the IDropSource interface of the item being dragged.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual int SaveAs(string newFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project file on a new name.\r\n    </summary>\r\n    <param name=\"newFileName\">The new name of the project file.</param>\r\n    <returns>Success value or an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SaveAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project file on a new name.\r\n    </summary>\r\n    <param name=\"newFileName\">The new name of the project file.</param>\r\n    <returns>Success value or an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult CallMSBuild(string config, IVsOutputWindowPane output, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. If it is suspended then it will remember to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. If it is suspended then it will remember to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void InitializeProjectProperties()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitializeProjectProperties\">\r\n    <summary>\r\n    Initialize common project properties with default value if they are empty\r\n    </summary>\r\n    <remarks>The following common project properties are defaulted to projectName (if empty):\r\n       AssemblyName, Name and RootNamespace.\r\n    If the project filename is not set then no properties are set</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.InitializeProjectProperties",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitializeProjectProperties\">\r\n    <summary>\r\n    Initialize common project properties with default value if they are empty\r\n    </summary>\r\n    <remarks>The following common project properties are defaulted to projectName (if empty):\r\n       AssemblyName, Name and RootNamespace.\r\n    If the project filename is not set then no properties are set</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int DragOver(uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called when one or more items are dragged over the target hierarchy or hierarchy window. \r\n    </summary>\r\n    <param name=\"grfKeyState\">Current state of the keyboard keys and the mouse modifier buttons. See <seealso cref=\"T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget\"/></param>\r\n    <param name=\"itemid\">Item identifier of the drop data target over which the item is being dragged</param>\r\n    <param name=\"pdwEffect\"> On entry, reference to the value of the pdwEffect parameter of the IVsHierarchy object, identifying all effects that the hierarchy supports. \r\n    On return, the pdwEffect parameter must contain one of the effect flags that indicate the result of the drop operation. For a list of pwdEffects values, see <seealso cref=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\"/></param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called when one or more items are dragged over the target hierarchy or hierarchy window. \r\n    </summary>\r\n    <param name=\"grfKeyState\">Current state of the keyboard keys and the mouse modifier buttons. See <seealso cref=\"T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget\"/></param>\r\n    <param name=\"itemid\">Item identifier of the drop data target over which the item is being dragged</param>\r\n    <param name=\"pdwEffect\"> On entry, reference to the value of the pdwEffect parameter of the IVsHierarchy object, identifying all effects that the hierarchy supports. \r\n    On return, the pdwEffect parameter must contain one of the effect flags that indicate the result of the drop operation. For a list of pwdEffects values, see <seealso cref=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\"/></param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int TransferItem(string oldMkDoc, string newMkDoc, IVsWindowFrame frame)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)\">\r\n    <summary>\r\n    Implements IVsProject3::TransferItem\r\n    This function is called when an open miscellaneous file is being transferred\r\n    to our project. The sequence is for the shell to call AddItemWithSpecific and\r\n    then use TransferItem to transfer the open document to our project.\r\n    </summary>\r\n    <param name=\"oldMkDoc\">Old document name</param>\r\n    <param name=\"newMkDoc\">New document name</param>\r\n    <param name=\"frame\">Optional frame if the document is open</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)\">\r\n    <summary>\r\n    Implements IVsProject3::TransferItem\r\n    This function is called when an open miscellaneous file is being transferred\r\n    to our project. The sequence is for the shell to call AddItemWithSpecific and\r\n    then use TransferItem to transfer the open document to our project.\r\n    </summary>\r\n    <param name=\"oldMkDoc\">Old document name</param>\r\n    <param name=\"newMkDoc\">New document name</param>\r\n    <param name=\"frame\">Optional frame if the document is open</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int EnumDependencies(out IVsEnumDependencies enumDependencies)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.EnumDependencies(Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual DependentFileNode CreateDependentFileNode(string file)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(System.String)\">\r\n    <summary>\r\n    Create a dependent file node based on a string.\r\n    </summary>\r\n    <param name=\"file\">filename of the new dependent file node</param>\r\n    <returns>Dependent node added</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(System.String)\">\r\n    <summary>\r\n    Create a dependent file node based on a string.\r\n    </summary>\r\n    <param name=\"file\">filename of the new dependent file node</param>\r\n    <returns>Dependent node added</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SetSccLocation(string sccProjectName, string sccAuxPath, string sccLocalPath, string sccProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSccLocation(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    This method is called by the source control portion of the environment when a project is initially added to source control, or to change some of the project's settings.\r\n    </summary>\r\n    <param name=\"sccProjectName\">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>\r\n    <param name=\"sccLocalPath\">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>\r\n    <param name=\"sccAuxPath\">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>\r\n    <param name=\"sccProvider\">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetSccLocation(System.String,System.String,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSccLocation(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    This method is called by the source control portion of the environment when a project is initially added to source control, or to change some of the project's settings.\r\n    </summary>\r\n    <param name=\"sccProjectName\">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>\r\n    <param name=\"sccLocalPath\">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>\r\n    <param name=\"sccAuxPath\">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>\r\n    <param name=\"sccProvider\">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual BuildSubmission DoMSBuildSubmission(BuildKind buildKind, string target, Action<MSBuildResult, string> uiThreadCallback)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DoMSBuildSubmission(Microsoft.VisualStudio.Project.BuildKind,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})\">\r\n    <summary>\r\n    Start MSBuild build submission\r\n    </summary>\r\n    If buildKind is ASync, this method starts the submission and returns. uiThreadCallback will be called on UI thread once submissions completes.\r\n    if buildKind is Sync, this method executes the submission and runs uiThreadCallback\r\n    <param name=\"buildKind\">Is it a Sync or ASync build</param>\r\n    <param name=\"target\">target to build</param>\r\n    <param name=\"projectInstance\">project instance to build; if null, this.BuildProject.CreateProjectInstance() is used to populate</param>\r\n    <param name=\"uiThreadCallback\">callback to be run UI thread </param>\r\n    <returns>A Build submission instance.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.DoMSBuildSubmission(Microsoft.VisualStudio.Project.BuildKind,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DoMSBuildSubmission(Microsoft.VisualStudio.Project.BuildKind,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})\">\r\n    <summary>\r\n    Start MSBuild build submission\r\n    </summary>\r\n    If buildKind is ASync, this method starts the submission and returns. uiThreadCallback will be called on UI thread once submissions completes.\r\n    if buildKind is Sync, this method executes the submission and runs uiThreadCallback\r\n    <param name=\"buildKind\">Is it a Sync or ASync build</param>\r\n    <param name=\"target\">target to build</param>\r\n    <param name=\"projectInstance\">project instance to build; if null, this.BuildProject.CreateProjectInstance() is used to populate</param>\r\n    <param name=\"uiThreadCallback\">callback to be run UI thread </param>\r\n    <returns>A Build submission instance.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCurFile(out string name, out uint formatIndex)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetCurFile(System.String@,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int ResolveAssemblyPathInTargetFx(string[] prgAssemblySpecs, uint cAssembliesToResolve, VsResolvedAssemblyPath[] prgResolvedAssemblyPaths, out uint pcResolvedAssemblyPaths)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ResolveAssemblyPathInTargetFx(System.String[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath[],System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual DependentFileNode CreateDependentFileNode(ProjectElement item)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Create dependent file node based on an msbuild item\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>dependent file node</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Create dependent file node based on an msbuild item\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>dependent file node</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void OverwriteExistingItem(HierarchyNode existingNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OverwriteExistingItem(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Handle owerwriting of an existing item in the hierarchy.\r\n    </summary>\r\n    <param name=\"existingNode\">The node that exists.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OverwriteExistingItem(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OverwriteExistingItem(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Handle owerwriting of an existing item in the hierarchy.\r\n    </summary>\r\n    <param name=\"existingNode\">The node that exists.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int IsDocumentInProject(string mkDoc, out int found, VSDOCUMENTPRIORITY[] pri, out uint itemId)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsDocumentInProject(System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY[],System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual ReferenceContainerNode CreateReferenceContainerNode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateReferenceContainerNode\">\r\n    <summary>\r\n    Factory method for reference container node\r\n    </summary>\r\n    <returns>ReferenceContainerNode created</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateReferenceContainerNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateReferenceContainerNode\">\r\n    <summary>\r\n    Factory method for reference container node\r\n    </summary>\r\n    <returns>ReferenceContainerNode created</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int UpdateTargetFramework(IVsHierarchy pHier, string currentTargetFramework, string newTargetFramework)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.UpdateTargetFramework(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode NodeFromItemId(uint itemId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.NodeFromItemId(System.UInt32)\">\r\n    <summary>\r\n    Get Node from ItemID.\r\n    </summary>\r\n    <param name=\"itemId\">ItemID for the requested node</param>\r\n    <returns>Node if found</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.NodeFromItemId(System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.NodeFromItemId(System.UInt32)\">\r\n    <summary>\r\n    Get Node from ItemID.\r\n    </summary>\r\n    <param name=\"itemId\">ItemID for the requested node</param>\r\n    <returns>Node if found</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual FileNode CreateFileNode(ProjectElement item)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Create a file node based on an msbuild item.\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>FileNode added</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Create a file node based on an msbuild item.\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>FileNode added</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider site)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)\">\r\n    <summary>\r\n    Sets the service provider from which to access the services. \r\n    </summary>\r\n    <param name=\"site\">An instance to an Microsoft.VisualStudio.OLE.Interop object</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)\">\r\n    <summary>\r\n    Sets the service provider from which to access the services. \r\n    </summary>\r\n    <param name=\"site\">An instance to an Microsoft.VisualStudio.OLE.Interop object</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual int CanOverwriteExistingItem(string originalFileName, string computedNewFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanOverwriteExistingItem(System.String,System.String)\">\r\n    <summary>\r\n    Determines whether an item can be owerwritten in the hierarchy.\r\n    </summary>\r\n    <param name=\"originalFileName\">The orginal filname.</param>\r\n    <param name=\"computedNewFileName\">The computed new file name, that will be copied to the project directory or into the folder .</param>\r\n    <returns>S_OK for success, or an error message</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CanOverwriteExistingItem(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanOverwriteExistingItem(System.String,System.String)\">\r\n    <summary>\r\n    Determines whether an item can be owerwritten in the hierarchy.\r\n    </summary>\r\n    <param name=\"originalFileName\">The orginal filname.</param>\r\n    <param name=\"computedNewFileName\">The computed new file name, that will be copied to the project directory or into the folder .</param>\r\n    <returns>S_OK for success, or an error message</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void OnTargetFrameworkMonikerChanged(ProjectOptions options, FrameworkName currentTargetFramework, FrameworkName newTargetFramework)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnTargetFrameworkMonikerChanged(Microsoft.VisualStudio.Project.ProjectOptions,System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int RemoveItem(uint reserved, uint itemId, out int result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RemoveItem(System.UInt32,System.UInt32,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void OnOpenItem(string fullPathToSourceFile)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnOpenItem(System.String)\">\r\n    <summary>\r\n    Called when the project opens an editor window for the given file\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnOpenItem(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnOpenItem(System.String)\">\r\n    <summary>\r\n    Called when the project opens an editor window for the given file\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"vsopts\")]\r\npublic virtual MSBuildResult Build(uint vsopts, string config, IVsOutputWindowPane output, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Do the build by invoking msbuild\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Do the build by invoking msbuild\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Handles command status on the project node. If a command cannot be handled then the base should be called.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>\r\n    <param name=\"cmd\">The command to query status for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>\r\n    <param name=\"result\">An out parameter specifying the QueryStatusResult of the command.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Handles command status on the project node. If a command cannot be handled then the base should be called.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>\r\n    <param name=\"cmd\">The command to query status for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>\r\n    <param name=\"result\">An out parameter specifying the QueryStatusResult of the command.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int StartBatchEdit()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.StartBatchEdit",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgProvider(out IVsCfgProvider p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual ConfigProvider CreateConfigProvider()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateConfigProvider\">\r\n    <summary>\r\n    Factory method for configuration provider\r\n    </summary>\r\n    <returns>Configuration provider created</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateConfigProvider",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateConfigProvider\">\r\n    <summary>\r\n    Factory method for configuration provider\r\n    </summary>\r\n    <returns>Configuration provider created</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult Build(string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String)\">\r\n    <summary>\r\n    Overloaded method. Invokes MSBuild using the default configuration and does without logging on the output window pane.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String)\">\r\n    <summary>\r\n    Overloaded method. Invokes MSBuild using the default configuration and does without logging on the output window pane.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult Build(string config, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,System.String)\">\r\n    <summary>\r\n    Overloaded method to invoke MSBuild. Does not log build results to the output window pane.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,System.String)\">\r\n    <summary>\r\n    Overloaded method to invoke MSBuild. Does not log build results to the output window pane.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IReferenceContainer GetReferenceContainer()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetReferenceContainer\">\r\n    <summary>\r\n    Returns the reference container node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetReferenceContainer",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetReferenceContainer\">\r\n    <summary>\r\n    Returns the reference container node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddFileFromTemplate(string source, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Called to add a file to the project from a template.\r\n    Override to do it yourself if you want to customize the file\r\n    </summary>\r\n    <param name=\"source\">Full path of template file</param>\r\n    <param name=\"target\">Full path of file once added to the project</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddFileFromTemplate(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Called to add a file to the project from a template.\r\n    Override to do it yourself if you want to customize the file\r\n    </summary>\r\n    <param name=\"source\">Full path of template file</param>\r\n    <param name=\"target\">Full path of file once added to the project</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int EndBatchEdit()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.EndBatchEdit",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual HierarchyNode AddNodeIfTargetExistInStorage(HierarchyNode parentNode, string name, string targetPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddNodeIfTargetExistInStorage(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String)\">\r\n    <summary>\r\n    Add an existing item (file/folder) to the project if it already exist in our storage.\r\n    </summary>\r\n    <param name=\"parentNode\">Node to that this item to</param>\r\n    <param name=\"name\">Name of the item being added</param>\r\n    <param name=\"targetPath\">Path of the item being added</param>\r\n    <returns>Node that was added</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddNodeIfTargetExistInStorage(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddNodeIfTargetExistInStorage(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String)\">\r\n    <summary>\r\n    Add an existing item (file/folder) to the project if it already exist in our storage.\r\n    </summary>\r\n    <param name=\"parentNode\">Node to that this item to</param>\r\n    <param name=\"name\">Name of the item being added</param>\r\n    <param name=\"targetPath\">Path of the item being added</param>\r\n    <returns>Node that was added</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GenerateUniqueItemName(uint itemIdLoc, string ext, string suggestedRoot, out string itemName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)\">\r\n    <summary>\r\n    for now used by add folder. Called on the ROOT, as only the project should need\r\n    to implement this.\r\n    for folders, called with parent folder, blank extension and blank suggested root\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)\">\r\n    <summary>\r\n    for now used by add folder. Called on the ROOT, as only the project should need\r\n    to implement this.\r\n    for folders, called with parent folder, blank extension and blank suggested root\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool IsCodeFile(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsCodeFile(System.String)\">\r\n    <summary>\r\n    Determines whether a file is a code file.\r\n    </summary>\r\n    <param name=\"fileName\">Name of the file to be evaluated</param>\r\n    <returns>false by default for any fileName</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsCodeFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsCodeFile(System.String)\">\r\n    <summary>\r\n    Determines whether a file is a code file.\r\n    </summary>\r\n    <param name=\"fileName\">Name of the file to be evaluated</param>\r\n    <returns>false by default for any fileName</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"iid\")]\r\npublic virtual void Load(string fileName, string location, string name, uint flags, ref Guid iidProject, out int canceled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Load(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Int32@)\">\r\n    <summary>\r\n    Loads a project file. Called from the factory CreateProject to load the project.\r\n    </summary>\r\n    <param name=\"fileName\">File name of the project that will be created. </param>\r\n    <param name=\"location\">Location where the project will be created.</param>\r\n    <param name=\"name\">If applicable, the name of the template to use when cloning a new project.</param>\r\n    <param name=\"flags\">Set of flag values taken from the VSCREATEPROJFLAGS enumeration.</param>\r\n    <param name=\"iidProject\">Identifier of the interface that the caller wants returned. </param>\r\n    <param name=\"canceled\">An out parameter specifying if the project creation was canceled</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Load(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Load(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Int32@)\">\r\n    <summary>\r\n    Loads a project file. Called from the factory CreateProject to load the project.\r\n    </summary>\r\n    <param name=\"fileName\">File name of the project that will be created. </param>\r\n    <param name=\"location\">Location where the project will be created.</param>\r\n    <param name=\"name\">If applicable, the name of the template to use when cloning a new project.</param>\r\n    <param name=\"flags\">Set of flag values taken from the VSCREATEPROJFLAGS enumeration.</param>\r\n    <param name=\"iidProject\">Identifier of the interface that the caller wants returned. </param>\r\n    <param name=\"canceled\">An out parameter specifying if the project creation was canceled</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult CallMSBuild(string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. Does not log and uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. Does not log and uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AddItem(uint itemIdLoc, VSADDITEMOPERATION op, string itemName, uint filesToOpen, string[] files, IntPtr dlgOwner, VSADDRESULT[] result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual HierarchyNode AddDependentFileNode(IDictionary<String, MSBuild.ProjectItem> subitems, string key)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNode(System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItem},System.String)\">\r\n    <summary>\r\n    This add methos adds the \"key\" item to the hierarchy, potentially adding other subitems in the process\r\n    This method may recurse if the parent is an other subitem\r\n    \r\n    </summary>\r\n    <param name=\"subitems\">List of subitems not yet added to the hierarchy</param>\r\n    <param name=\"key\">Key to retrieve the target item from the subitems list</param>\r\n    <returns>Newly added node</returns>\r\n    <remarks>If the parent node was found we add the dependent item to it otherwise we add the item ignoring the \"DependentUpon\" metatdata</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNode(System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItem},System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNode(System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItem},System.String)\">\r\n    <summary>\r\n    This add methos adds the \"key\" item to the hierarchy, potentially adding other subitems in the process\r\n    This method may recurse if the parent is an other subitem\r\n    \r\n    </summary>\r\n    <param name=\"subitems\">List of subitems not yet added to the hierarchy</param>\r\n    <param name=\"key\">Key to retrieve the target item from the subitems list</param>\r\n    <returns>Newly added node</returns>\r\n    <remarks>If the parent node was found we add the dependent item to it otherwise we add the item ignoring the \"DependentUpon\" metatdata</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetFile(int fileId, uint flags, out uint itemid, out string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)\">\r\n    <summary>\r\n    Allows you to query the project for special files and optionally create them. \r\n    </summary>\r\n    <param name=\"fileId\">__PSFFILEID of the file</param>\r\n    <param name=\"flags\">__PSFFLAGS flags for the file</param>\r\n    <param name=\"itemid\">The itemid of the node in the hierarchy</param>\r\n    <param name=\"fileName\">The file name of the special file.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)\">\r\n    <summary>\r\n    Allows you to query the project for special files and optionally create them. \r\n    </summary>\r\n    <param name=\"fileId\">__PSFFILEID of the file</param>\r\n    <param name=\"flags\">__PSFFLAGS flags for the file</param>\r\n    <param name=\"itemid\">The itemid of the node in the hierarchy</param>\r\n    <param name=\"fileName\">The file name of the special file.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual Guid[] GetConfigurationIndependentPropertyPages()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationIndependentPropertyPages\">\r\n    <summary>\r\n    List of Guids of the config independent property pages. It is called by the GetProperty for VSHPROPID_PropertyPagesCLSIDList property.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationIndependentPropertyPages",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationIndependentPropertyPages\">\r\n    <summary>\r\n    List of Guids of the config independent property pages. It is called by the GetProperty for VSHPROPID_PropertyPagesCLSIDList property.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected int IsFlavorDirty()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsFlavorDirty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenItem(uint itemId, ref Guid logicalView, IntPtr punkDocDataExisting, out IVsWindowFrame frame)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OpenItem(System.UInt32,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int GetGuidProperty(int propid, out Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Gets the GUID value of the node. \r\n    </summary>\r\n    <param name=\"propid\">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>\r\n    <param name=\"guid\">The guid to return for the property.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Gets the GUID value of the node. \r\n    </summary>\r\n    <param name=\"propid\">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>\r\n    <param name=\"guid\">The guid to return for the property.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual ProjectOptions CreateProjectOptions()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateProjectOptions\">\r\n    <summary>\r\n    Override this method if you have your own project specific\r\n    subclass of ProjectOptions\r\n    </summary>\r\n    <returns>This method returns a new instance of the ProjectOptions base class.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateProjectOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateProjectOptions\">\r\n    <summary>\r\n    Override this method if you have your own project specific\r\n    subclass of ProjectOptions\r\n    </summary>\r\n    <returns>This method returns a new instance of the ProjectOptions base class.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void AddNewFileNodeToHierarchy(HierarchyNode parentNode, string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddNewFileNodeToHierarchy(Microsoft.VisualStudio.Project.HierarchyNode,System.String)\">\r\n    <summary>\r\n    Adds a new file node to the hierarchy.\r\n    </summary>\r\n    <param name=\"parentNode\">The parent of the new fileNode</param>\r\n    <param name=\"fileName\">The file name</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddNewFileNodeToHierarchy(Microsoft.VisualStudio.Project.HierarchyNode,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddNewFileNodeToHierarchy(Microsoft.VisualStudio.Project.HierarchyNode,System.String)\">\r\n    <summary>\r\n    Adds a new file node to the hierarchy.\r\n    </summary>\r\n    <param name=\"parentNode\">The parent of the new fileNode</param>\r\n    <param name=\"fileName\">The file name</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string GetAssemblyName(string config)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAssemblyName(System.String)\">\r\n    <summary>\r\n    Get the assembly name for a give configuration\r\n    </summary>\r\n    <param name=\"config\">the matching configuration in the msbuild file</param>\r\n    <returns>assembly name</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetAssemblyName(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAssemblyName(System.String)\">\r\n    <summary>\r\n    Get the assembly name for a give configuration\r\n    </summary>\r\n    <param name=\"config\">the matching configuration in the msbuild file</param>\r\n    <returns>assembly name</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult CallMSBuild(string config, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,System.String)\">\r\n    <summary>\r\n    Overloaded method. Calls MSBuild if it is not suspended. Does not log on the outputwindow. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,System.String)\">\r\n    <summary>\r\n    Overloaded method. Calls MSBuild if it is not suspended. Does not log on the outputwindow. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetOutputAssembly(string config)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputAssembly(System.String)\">\r\n    <summary>\r\n    Get output assembly for a specific configuration name\r\n    </summary>\r\n    <param name=\"config\">Name of configuration</param>\r\n    <returns>Name of output assembly</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputAssembly(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputAssembly(System.String)\">\r\n    <summary>\r\n    Get output assembly for a specific configuration name\r\n    </summary>\r\n    <param name=\"config\">Name of configuration</param>\r\n    <returns>Name of output assembly</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetProperty(int propId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Gets the properties of the project node. \r\n    </summary>\r\n    <param name=\"propId\">The __VSHPROPID of the property.</param>\r\n    <returns>A property dependent value. See: <see cref=\"T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID\"/> for details.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProperty(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Gets the properties of the project node. \r\n    </summary>\r\n    <param name=\"propId\">The __VSHPROPID of the property.</param>\r\n    <returns>A property dependent value. See: <see cref=\"T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID\"/> for details.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument\">\r\n    <summary>\r\n    Gets the moniker for the project node. That is the full path of the project file.\r\n    </summary>\r\n    <returns>The moniker for the project file.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument\">\r\n    <summary>\r\n    Gets the moniker for the project node. That is the full path of the project file.\r\n    </summary>\r\n    <returns>The moniker for the project file.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual Guid[] GetPriorityProjectDesignerPages()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetPriorityProjectDesignerPages\">\r\n    <summary>\r\n    An ordered list of guids of the prefered property pages. See <see cref=\"!:__VSHPROPID.VSHPROPID_PriorityPropertyPagesCLSIDList\"/>\r\n    </summary>\r\n    <returns>An array of guids.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetPriorityProjectDesignerPages",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetPriorityProjectDesignerPages\">\r\n    <summary>\r\n    An ordered list of guids of the prefered property pages. See <see cref=\"!:__VSHPROPID.VSHPROPID_PriorityPropertyPagesCLSIDList\"/>\r\n    </summary>\r\n    <returns>An array of guids.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void ResumeMSBuild(string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int Drop(IOleDataObject pDataObject, uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called when one or more items are dropped into the target hierarchy or hierarchy window when the mouse button is released.\r\n    </summary>\r\n    <param name=\"pDataObject\">Reference to the IDataObject interface on the item being dragged. This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>\r\n    <param name=\"grfKeyState\">Current state of the keyboard and the mouse modifier keys. See <seealso cref=\"T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget\"/></param>\r\n    <param name=\"itemid\">Item identifier of the drop data target over which the item is being dragged</param>\r\n    <param name=\"pdwEffect\">Visual effects associated with the drag-and drop-operation, such as a cursor, bitmap, and so on. \r\n    The value of dwEffects passed to the source object via the OnDropNotify method is the value of pdwEffects returned by the Drop method</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called when one or more items are dropped into the target hierarchy or hierarchy window when the mouse button is released.\r\n    </summary>\r\n    <param name=\"pDataObject\">Reference to the IDataObject interface on the item being dragged. This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>\r\n    <param name=\"grfKeyState\">Current state of the keyboard and the mouse modifier keys. See <seealso cref=\"T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget\"/></param>\r\n    <param name=\"itemid\">Item identifier of the drop data target over which the item is being dragged</param>\r\n    <param name=\"pdwEffect\">Visual effects associated with the drag-and drop-operation, such as a cursor, bitmap, and so on. \r\n    The value of dwEffects passed to the source object via the OnDropNotify method is the value of pdwEffects returned by the Drop method</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual int CleanProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CleanProject\">\r\n    <summary>\r\n    Handles the clean project command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CleanProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CleanProject\">\r\n    <summary>\r\n    Handles the clean project command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult Build(string config, IVsOutputWindowPane output, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Overloaded method to invoke MSBuild\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Overloaded method to invoke MSBuild\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Save(string fileToBeSaved, int remember, uint formatIndex)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Save(System.String,System.Int32,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Load(string fileName, uint mode, int readOnly)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Load(System.String,System.UInt32,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Security\", \"CA2109:ReviewVisibleEventHandlers\", Justification = \"This method will give the opportunity to update global properties based on active configuration change. \" + \"There is no security threat that could otherwise not be reached by listening to configuration chnage events.\")]\r\nprotected virtual void OnHandleConfigurationRelatedGlobalProperties(object sender, ActiveConfigurationChangedEventArgs eventArgs)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnHandleConfigurationRelatedGlobalProperties(System.Object,Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs)\">\r\n    <summary>\r\n    Handles global properties related to configuration and platform changes invoked by a change in the active configuration.\r\n    </summary>\r\n    <param name=\"sender\">The sender of the event.</param>\r\n    <param name=\"eventArgs\">The event args</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnHandleConfigurationRelatedGlobalProperties(System.Object,Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnHandleConfigurationRelatedGlobalProperties(System.Object,Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs)\">\r\n    <summary>\r\n    Handles global properties related to configuration and platform changes invoked by a change in the active configuration.\r\n    </summary>\r\n    <param name=\"sender\">The sender of the event.</param>\r\n    <param name=\"eventArgs\">The event args</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetEditLabel(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Renames the project node.\r\n    </summary>\r\n    <param name=\"label\">The new name</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Renames the project node.\r\n    </summary>\r\n    <param name=\"label\">The new name</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddBuildDependency(IVsBuildDependency dependency)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void RenameProjectFile(string newFile)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RenameProjectFile(System.String)\">\r\n    <summary>\r\n    Renames the project file\r\n    </summary>\r\n    <param name=\"newFile\">The full path of the new project file.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RenameProjectFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RenameProjectFile(System.String)\">\r\n    <summary>\r\n    Renames the project file\r\n    </summary>\r\n    <param name=\"newFile\">The full path of the new project file.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult CallMSBuild(string target, IVsOutputWindowPane output)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. Uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. Uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)\">\r\n    <summary>\r\n    Get the boolean value for the deletion of a project item\r\n    </summary>\r\n    <param name=\"deleteOperation\">A flag that specifies the type of delete operation (delete from storage or remove from project)</param>\r\n    <returns>true if item can be deleted from project</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)\">\r\n    <summary>\r\n    Get the boolean value for the deletion of a project item\r\n    </summary>\r\n    <param name=\"deleteOperation\">A flag that specifies the type of delete operation (delete from storage or remove from project)</param>\r\n    <returns>true if item can be deleted from project</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int GetAggregateProjectTypeGuids(out string projectTypeGuids)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAggregateProjectTypeGuids(System.String@)\">\r\n    <summary>\r\n    Retrieve the list of project GUIDs that are aggregated together to make this project.\r\n    </summary>\r\n    <param name=\"projectTypeGuids\">Semi colon separated list of Guids. Typically, the last GUID would be the GUID of the base project factory</param>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetAggregateProjectTypeGuids(System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAggregateProjectTypeGuids(System.String@)\">\r\n    <summary>\r\n    Retrieve the list of project GUIDs that are aggregated together to make this project.\r\n    </summary>\r\n    <param name=\"projectTypeGuids\">Semi colon separated list of Guids. Typically, the last GUID would be the GUID of the base project factory</param>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int Close()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Close\">\r\n    <summary>\r\n    Closes the project node.\r\n    </summary>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Close",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Close\">\r\n    <summary>\r\n    Closes the project node.\r\n    </summary>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int DragEnter(IOleDataObject pDataObject, uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called as soon as the mouse drags an item over a new hierarchy or hierarchy window\r\n    </summary>\r\n    <param name=\"pDataObject\">reference to interface IDataObject of the item being dragged</param>\r\n    <param name=\"grfKeyState\">Current state of the keyboard and the mouse modifier keys. See docs for a list of possible values</param>\r\n    <param name=\"itemid\">Item identifier for the item currently being dragged</param>\r\n    <param name=\"pdwEffect\">On entry, a pointer to the current DropEffect. On return, must contain the new valid DropEffect</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called as soon as the mouse drags an item over a new hierarchy or hierarchy window\r\n    </summary>\r\n    <param name=\"pDataObject\">reference to interface IDataObject of the item being dragged</param>\r\n    <param name=\"grfKeyState\">Current state of the keyboard and the mouse modifier keys. See docs for a list of possible values</param>\r\n    <param name=\"itemid\">Item identifier for the item currently being dragged</param>\r\n    <param name=\"pdwEffect\">On entry, a pointer to the current DropEffect. On return, must contain the new valid DropEffect</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnBeforeDropNotify(IOleDataObject o, uint dwEffect, out int fCancelDrop)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Allows the drag source to prompt to save unsaved items being dropped. \r\n    Notifies the source hierarchy that information dragged from it is about to be dropped on a target. \r\n    This method is called immediately after the mouse button is released on a drop. \r\n    </summary>\r\n    <param name=\"o\">Reference to the IDataObject interface on the item being dragged. \r\n    This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the hierarchy window of the new hierarchy.</param>\r\n    <param name=\"dwEffect\">Current state of the keyboard and the mouse modifier keys.</param>\r\n    <param name=\"fCancelDrop\">If true, then the drop is cancelled by the source hierarchy. If false, then the drop can continue.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Allows the drag source to prompt to save unsaved items being dropped. \r\n    Notifies the source hierarchy that information dragged from it is about to be dropped on a target. \r\n    This method is called immediately after the mouse button is released on a drop. \r\n    </summary>\r\n    <param name=\"o\">Reference to the IDataObject interface on the item being dragged. \r\n    This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the hierarchy window of the new hierarchy.</param>\r\n    <param name=\"dwEffect\">Current state of the keyboard and the mouse modifier keys.</param>\r\n    <param name=\"fCancelDrop\">If true, then the drop is cancelled by the source hierarchy. If false, then the drop can continue.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool IsEmbeddedResource(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsEmbeddedResource(System.String)\">\r\n    <summary>\r\n    Determines whether the given file is a resource file (resx file).\r\n    </summary>\r\n    <param name=\"fileName\">Name of the file to be evaluated.</param>\r\n    <returns>true if the file is a resx file, otherwise false.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsEmbeddedResource(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsEmbeddedResource(System.String)\">\r\n    <summary>\r\n    Determines whether the given file is a resource file (resx file).\r\n    </summary>\r\n    <param name=\"fileName\">Name of the file to be evaluated.</param>\r\n    <returns>true if the file is a resx file, otherwise false.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int SetAggregateProjectTypeGuids(string projectTypeGuids)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetAggregateProjectTypeGuids(System.String)\">\r\n    <summary>\r\n    Set the list of GUIDs that are aggregated together to create this project.\r\n    </summary>\r\n    <param name=\"projectTypeGuids\">Semi-colon separated list of GUIDs, the last one is usually the project factory of the base project factory</param>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetAggregateProjectTypeGuids(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetAggregateProjectTypeGuids(System.String)\">\r\n    <summary>\r\n    Set the list of GUIDs that are aggregated together to create this project.\r\n    </summary>\r\n    <param name=\"projectTypeGuids\">Semi-colon separated list of GUIDs, the last one is usually the project factory of the base project factory</param>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\npublic ProjectElement CreateMsBuildFileItem(string file, string itemType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateMsBuildFileItem(System.String,System.String)\">\r\n    <summary>\r\n    This method return new project element, and add new MSBuild item to the project/build hierarchy\r\n    </summary>\r\n    <param name=\"file\">file name</param>\r\n    <param name=\"itemType\">MSBuild item type</param>\r\n    <returns>new project element</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateMsBuildFileItem(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateMsBuildFileItem(System.String,System.String)\">\r\n    <summary>\r\n    This method return new project element, and add new MSBuild item to the project/build hierarchy\r\n    </summary>\r\n    <param name=\"file\">file name</param>\r\n    <param name=\"itemType\">MSBuild item type</param>\r\n    <returns>new project element</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1030:UseEventsWhereAppropriate\")]\r\nprotected void RaiseProjectPropertyChanged(string propertyName, string oldValue, string newValue)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RaiseProjectPropertyChanged(System.String,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Handles command execution.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"nCmdexecopt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"pvaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"pvaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Handles command execution.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"nCmdexecopt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"pvaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"pvaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual Guid[] GetConfigurationDependentPropertyPages()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationDependentPropertyPages\">\r\n    <summary>\r\n    Returns a list of Guids of the configuration dependent property pages. It is called by the GetProperty for VSHPROPID_CfgPropertyPagesCLSIDList property.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationDependentPropertyPages",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationDependentPropertyPages\">\r\n    <summary>\r\n    Returns a list of Guids of the configuration dependent property pages. It is called by the GetProperty for VSHPROPID_CfgPropertyPagesCLSIDList property.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"UnRegister\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Un\")]\r\nprotected void UnRegisterProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.UnRegisterProject\">\r\n    <summary>\r\n     Unregisters us from the SCC manager\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.UnRegisterProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.UnRegisterProject\">\r\n    <summary>\r\n     Unregisters us from the SCC manager\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int BuildTarget(string targetName, out bool success)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.BuildTarget(System.String,System.Boolean@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnClear(int wasCut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnClear(System.Int32)\">\r\n    <summary>\r\n    Called when your cut/copied operation is canceled\r\n    </summary>\r\n    <param name=\"wasCut\">This flag informs the source that the Cut method was called (true), \r\n    rather than Copy (false), so the source knows whether to \"un-cut-highlight\" the items that were cut.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnClear(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnClear(System.Int32)\">\r\n    <summary>\r\n    Called when your cut/copied operation is canceled\r\n    </summary>\r\n    <param name=\"wasCut\">This flag informs the source that the Cut method was called (true), \r\n    rather than Copy (false), so the source knows whether to \"un-cut-highlight\" the items that were cut.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void SetProjectProperty(string propertyName, string propertyValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectProperty(System.String,System.String)\">\r\n    <summary>\r\n    Set value of project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of property</param>\r\n    <param name=\"propertyValue\">Value of property</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectProperty(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectProperty(System.String,System.String)\">\r\n    <summary>\r\n    Set value of project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of property</param>\r\n    <param name=\"propertyValue\">Value of property</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetMkDocument(uint itemId, out string mkDoc)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument(System.UInt32,System.String@)\">\r\n    <summary>\r\n    Callback from the additem dialog. Deals with adding new and existing items\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument(System.UInt32,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument(System.UInt32,System.String@)\">\r\n    <summary>\r\n    Callback from the additem dialog. Deals with adding new and existing items\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"catid\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"CATID\")]\r\nprotected void AddCATIDMapping(Type type, Guid catid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddCATIDMapping(System.Type,System.Guid)\">\r\n    <summary>\r\n    This is used to specify a CATID corresponding to a BrowseObject or an ExtObject.\r\n    The CATID can be any GUID you choose. For types which are your owns, you could use\r\n    their type GUID, while for other types (such as those provided in the MPF) you should\r\n    provide a different GUID.\r\n    </summary>\r\n    <param name=\"type\">Type of the extensible object</param>\r\n    <param name=\"catid\">GUID that extender can use to uniquely identify your object type</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddCATIDMapping(System.Type,System.Guid)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddCATIDMapping(System.Type,System.Guid)\">\r\n    <summary>\r\n    This is used to specify a CATID corresponding to a BrowseObject or an ExtObject.\r\n    The CATID can be any GUID you choose. For types which are your owns, you could use\r\n    their type GUID, while for other types (such as those provided in the MPF) you should\r\n    provide a different GUID.\r\n    </summary>\r\n    <param name=\"type\">Type of the extensible object</param>\r\n    <param name=\"catid\">GUID that extender can use to uniquely identify your object type</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public abstract partial class ProjectNode",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectNode\">\r\n    <summary>\r\n    Manages the persistent state of the project (References, options, files, etc.) and deals with user interaction via a GUI in the form a hierarchy.\r\n    </summary>\r\n    <summary>\r\n    Manages the CopyPaste and Drag and Drop scenarios for a Project.\r\n    </summary>\r\n    <remarks>This is a partial class.</remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectNode\">\r\n    <summary>\r\n    Manages the persistent state of the project (References, options, files, etc.) and deals with user interaction via a GUI in the form a hierarchy.\r\n    </summary>\r\n    <summary>\r\n    Manages the CopyPaste and Drag and Drop scenarios for a Project.\r\n    </summary>\r\n    <remarks>This is a partial class.</remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"CALPOLESTR\")]\r\npublic static CALPOLESTR CreateCALPOLESTR(IList<string> strings)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateCALPOLESTR(System.Collections.Generic.IList{System.String})\">\r\n    <summary>\r\n    Creates a CALPOLESTR from a list of strings \r\n    It is the responsability of the caller to release this memory.\r\n    </summary>\r\n    <param name=\"guids\"></param>\r\n    <returns>A CALPOLESTR that was created from the the list of strings.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.CreateCALPOLESTR(System.Collections.Generic.IList{System.String})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateCALPOLESTR(System.Collections.Generic.IList{System.String})\">\r\n    <summary>\r\n    Creates a CALPOLESTR from a list of strings \r\n    It is the responsability of the caller to release this memory.\r\n    </summary>\r\n    <param name=\"guids\"></param>\r\n    <returns>A CALPOLESTR that was created from the the list of strings.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static void RecursivelyCopyDirectory(string source, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.RecursivelyCopyDirectory(System.String,System.String)\">\r\n    <summary>\r\n    Copy a directory recursively to the specified non-existing directory\r\n    </summary>\r\n    <param name=\"source\">Directory to copy from</param>\r\n    <param name=\"target\">Directory to copy to</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.RecursivelyCopyDirectory(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.RecursivelyCopyDirectory(System.String,System.String)\">\r\n    <summary>\r\n    Copy a directory recursively to the specified non-existing directory\r\n    </summary>\r\n    <param name=\"source\">Directory to copy from</param>\r\n    <param name=\"target\">Directory to copy to</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\")]\r\npublic static ImageList GetImageList(Stream imageStream)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.IO.Stream)\">\r\n    <summary>\r\n    Splits a bitmap from a Stream into an ImageList\r\n    </summary>\r\n    <param name=\"imageStream\">A Stream representing a Bitmap</param>\r\n    <returns>An ImageList object representing the images from the given stream</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.IO.Stream)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.IO.Stream)\">\r\n    <summary>\r\n    Splits a bitmap from a Stream into an ImageList\r\n    </summary>\r\n    <param name=\"imageStream\">A Stream representing a Bitmap</param>\r\n    <returns>An ImageList object representing the images from the given stream</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static string CreateSemicolonDelimitedListOfStringFromGuids(Guid[] guids)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateSemicolonDelimitedListOfStringFromGuids(System.Guid[])\">\r\n    <summary>\r\n    Creates a semicolon delinited list of strings. This can be used to provide the properties for VSHPROPID_CfgPropertyPagesCLSIDList, VSHPROPID_PropertyPagesCLSIDList, VSHPROPID_PriorityPropertyPagesCLSIDList\r\n    </summary>\r\n    <param name=\"guids\">An array of Guids.</param>\r\n    <returns>A semicolon delimited string, or null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.CreateSemicolonDelimitedListOfStringFromGuids(System.Guid[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateSemicolonDelimitedListOfStringFromGuids(System.Guid[])\">\r\n    <summary>\r\n    Creates a semicolon delinited list of strings. This can be used to provide the properties for VSHPROPID_CfgPropertyPagesCLSIDList, VSHPROPID_PropertyPagesCLSIDList, VSHPROPID_PriorityPropertyPagesCLSIDList\r\n    </summary>\r\n    <param name=\"guids\">An array of Guids.</param>\r\n    <returns>A semicolon delimited string, or null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\")]\r\npublic static ImageList GetImageList(object imageListAsPointer)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.Object)\">\r\n    <summary>\r\n    Splits a bitmap from a pointer to an ImageList\r\n    </summary>\r\n    <param name=\"imageListAsPointer\">A pointer to a bitmap of images to split</param>\r\n    <returns>An ImageList object representing the images from the given stream</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.Object)\">\r\n    <summary>\r\n    Splits a bitmap from a pointer to an ImageList\r\n    </summary>\r\n    <param name=\"imageListAsPointer\">A pointer to a bitmap of images to split</param>\r\n    <returns>An ImageList object representing the images from the given stream</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"msbuild\")]\r\npublic static string GetMsBuildPath(IServiceProvider serviceProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider)\">\r\n    <summary>\r\n    Look in the registry under the current hive for the path\r\n    of MSBuild\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider)\">\r\n    <summary>\r\n    Look in the registry under the current hive for the path\r\n    of MSBuild\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", MessageId = \"0\", Justification = \"The name is validated.\")]\r\npublic static bool ContainsInvalidFileNameChars(string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ContainsInvalidFileNameChars(System.String)\">\r\n    <summary>\r\n    Returns true if thename that can represent a path, absolut or relative, or a file name contains invalid filename characters.\r\n    </summary>\r\n    <param name=\"name\">File name</param>\r\n    <returns>true if file name is invalid</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.ContainsInvalidFileNameChars(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ContainsInvalidFileNameChars(System.String)\">\r\n    <summary>\r\n    Returns true if thename that can represent a path, absolut or relative, or a file name contains invalid filename characters.\r\n    </summary>\r\n    <param name=\"name\">File name</param>\r\n    <returns>true if file name is invalid</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"CADWORD\")]\r\npublic static CADWORD CreateCADWORD(IList<tagVsSccFilesFlags> flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateCADWORD(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    Creates a CADWORD from a list of tagVsSccFilesFlags. Memory is allocated for the elems. \r\n    It is the responsability of the caller to release this memory.\r\n    </summary>\r\n    <param name=\"guids\"></param>\r\n    <returns>A CADWORD created from the list of tagVsSccFilesFlags.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.CreateCADWORD(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateCADWORD(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    Creates a CADWORD from a list of tagVsSccFilesFlags. Memory is allocated for the elems. \r\n    It is the responsability of the caller to release this memory.\r\n    </summary>\r\n    <param name=\"guids\"></param>\r\n    <returns>A CADWORD created from the list of tagVsSccFilesFlags.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static Guid[] GuidsArrayFromSemicolonDelimitedStringOfGuids(string guidList)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GuidsArrayFromSemicolonDelimitedStringOfGuids(System.String)\">\r\n    <summary>\r\n    Take list of guids as a single string and generate an array of Guids from it\r\n    </summary>\r\n    <param name=\"guidList\">Semi-colon separated list of Guids</param>\r\n    <returns>Array of Guids</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GuidsArrayFromSemicolonDelimitedStringOfGuids(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GuidsArrayFromSemicolonDelimitedStringOfGuids(System.String)\">\r\n    <summary>\r\n    Take list of guids as a single string and generate an array of Guids from it\r\n    </summary>\r\n    <param name=\"guidList\">Semi-colon separated list of Guids</param>\r\n    <returns>Array of Guids</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static string SetStringValueFromConvertedEnum<T>(T enumValue, CultureInfo culture)where T : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Sets a string value from an enum\r\n    </summary>\r\n    <typeparam name=\"T\">The enum type</typeparam>\r\n    <param name=\"enumValue\">The value of teh enum.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Sets a string value from an enum\r\n    </summary>\r\n    <typeparam name=\"T\">The enum type</typeparam>\r\n    <param name=\"enumValue\">The value of teh enum.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static bool IsVisualStudioInDesignMode(IServiceProvider site)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsVisualStudioInDesignMode(System.IServiceProvider)\">\r\n    <summary>\r\n    Is Visual Studio in design mode.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <returns>true if visual studio is in design mode</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsVisualStudioInDesignMode(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsVisualStudioInDesignMode(System.IServiceProvider)\">\r\n    <summary>\r\n    Is Visual Studio in design mode.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <returns>true if visual studio is in design mode</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1720:IdentifiersShouldNotContainTypeNames\", MessageId = \"obj\")]\r\npublic static bool IsSameComObject(object obj1, object obj2)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsSameComObject(System.Object,System.Object)\">\r\n    <summary>\r\n    Verifies that two objects represent the same instance of a COM object.\r\n    This essentially compares the IUnkown pointers of the 2 objects.\r\n    This is needed in scenario where aggregation is involved.\r\n    </summary>\r\n    <param name=\"obj1\">Can be an object, interface or IntPtr</param>\r\n    <param name=\"obj2\">Can be an object, interface or IntPtr</param>\r\n    <returns>True if the 2 items represent the same thing</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsSameComObject(System.Object,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsSameComObject(System.Object,System.Object)\">\r\n    <summary>\r\n    Verifies that two objects represent the same instance of a COM object.\r\n    This essentially compares the IUnkown pointers of the 2 objects.\r\n    This is needed in scenario where aggregation is involved.\r\n    </summary>\r\n    <param name=\"obj1\">Can be an object, interface or IntPtr</param>\r\n    <param name=\"obj2\">Can be an object, interface or IntPtr</param>\r\n    <returns>True if the 2 items represent the same thing</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static Nullable<T> ConvertFromType<T>(string value, CultureInfo culture)where T : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Helper method for converting from a string to an enum using a converter.\r\n    </summary>\r\n    <typeparam name=\"T\"></typeparam>\r\n    <param name=\"value\"></param>\r\n    <param name=\"culture\">The culture to use to read the localized strings</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Helper method for converting from a string to an enum using a converter.\r\n    </summary>\r\n    <typeparam name=\"T\"></typeparam>\r\n    <param name=\"value\"></param>\r\n    <param name=\"culture\">The culture to use to read the localized strings</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static bool IsFileNameInvalid(string fileName)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Utilities.IsFileNameInvalid(System.String)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsFileNameInvalid(System.String)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Utilities.IsFileNameInvalid(System.String)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static object ConvertToType<T>(T value, Type typeToConvert, CultureInfo culture)where T : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Helper method to call a converter explicitely to convert to an enum type\r\n    </summary>\r\n    <typeparam name=\"T\">THe enum to convert to</typeparam>\r\n    <typeparam name=\"V\">The converter that will be created</typeparam>\r\n    <param name=\"value\">The enum value to be converted to</param>\r\n    <param name=\"typeToConvert\">The type to convert</param>\r\n    <param name=\"culture\">The culture to use to read the localized strings</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Helper method to call a converter explicitely to convert to an enum type\r\n    </summary>\r\n    <typeparam name=\"T\">THe enum to convert to</typeparam>\r\n    <typeparam name=\"V\">The converter that will be created</typeparam>\r\n    <param name=\"value\">The enum value to be converted to</param>\r\n    <param name=\"typeToConvert\">The type to convert</param>\r\n    <param name=\"culture\">The culture to use to read the localized strings</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\npublic static string GetMsBuildPath(IServiceProvider serviceProvider, string version)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider,System.String)\">\r\n    <summary>\r\n    Search the registry for the tools path for MSBuild.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <param name=\"version\">Msbuild version.</param>\r\n    <returns>The msbuild tools path</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider,System.String)\">\r\n    <summary>\r\n    Search the registry for the tools path for MSBuild.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <param name=\"version\">Msbuild version.</param>\r\n    <returns>The msbuild tools path</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static bool IsInAutomationFunction(IServiceProvider serviceProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsInAutomationFunction(System.IServiceProvider)\">\r\n    <include file='doc\\VsShellUtilities.uex' path='docs/doc[@for=\"Utilities.IsInAutomationFunction\"]/*' />\r\n    <devdoc>\r\n    Is an extensibility object executing an automation function.\r\n    </devdoc>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <returns>true if the extensiblity object is executing an automation function.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsInAutomationFunction(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsInAutomationFunction(System.IServiceProvider)\">\r\n    <include file='doc\\VsShellUtilities.uex' path='docs/doc[@for=\"Utilities.IsInAutomationFunction\"]/*' />\r\n    <devdoc>\r\n    Is an extensibility object executing an automation function.\r\n    </devdoc>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <returns>true if the extensiblity object is executing an automation function.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static void ValidateFileName(IServiceProvider serviceProvider, string filePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ValidateFileName(System.IServiceProvider,System.String)\">\r\n    <summary>\r\n    Validates a file path by validating all file parts. If the \r\n    the file name is invalid it throws an exception if the project is in automation. Otherwise it shows a dialog box with the error message.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider</param>\r\n    <param name=\"filePath\">A full path to a file name</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">In case of failure an InvalidOperationException is thrown.</exception>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.ValidateFileName(System.IServiceProvider,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ValidateFileName(System.IServiceProvider,System.String)\">\r\n    <summary>\r\n    Validates a file path by validating all file parts. If the \r\n    the file name is invalid it throws an exception if the project is in automation. Otherwise it shows a dialog box with the error message.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider</param>\r\n    <param name=\"filePath\">A full path to a file name</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">In case of failure an InvalidOperationException is thrown.</exception>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public static class Utilities",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Utilities",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class ProjectPropertyChangedArgs",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs\">\r\n    <summary>\r\n    Argument of the event raised when a project property is changed.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs\">\r\n    <summary>\r\n    Argument of the event raised when a project property is changed.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public IntPtr GetIconHandle(int iconIndex)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.GetIconHandle(System.Int32)\">\r\n    <summary>\r\n    Returns the handle to an icon build from the image of index\r\n    iconIndex in the image list.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.GetIconHandle(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.GetIconHandle(System.Int32)\">\r\n    <summary>\r\n    Returns the handle to an icon build from the image of index\r\n    iconIndex in the image list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void AddImage(Image image)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.AddImage(System.Drawing.Image)\">\r\n    <summary>\r\n    Add an image to the ImageHandler.\r\n    </summary>\r\n    <param name=\"image\">the image object to be added.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.AddImage(System.Drawing.Image)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.AddImage(System.Drawing.Image)\">\r\n    <summary>\r\n    Add an image to the ImageHandler.\r\n    </summary>\r\n    <param name=\"image\">the image object to be added.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Close()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.Close\">\r\n    <summary>\r\n    Closes the ImageHandler object freeing its resources.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.Close",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.Close\">\r\n    <summary>\r\n    Closes the ImageHandler object freeing its resources.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ImageHandler",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ImageHandler",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default reference icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default reference icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void BindReferenceData()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.BindReferenceData",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ComReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ComReferenceNode\">\r\n    <summary>\r\n    This type of node is used for references to COM components.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ComReferenceNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ComReferenceNode\">\r\n    <summary>\r\n    This type of node is used for references to COM components.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class ComReferenceProperties",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ComReferenceProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual void DeleteTokens(ref string buffer, DeleteToken tokenToDelete)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.DeleteTokens(System.String@,Microsoft.VisualStudio.Project.DeleteToken)\">\r\n    <summary>\r\n    Deletes the token from the buffer\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"tokenToDelete\">token to delete</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.DeleteTokens(System.String@,Microsoft.VisualStudio.Project.DeleteToken)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.DeleteTokens(System.String@,Microsoft.VisualStudio.Project.DeleteToken)\">\r\n    <summary>\r\n    Deletes the token from the buffer\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"tokenToDelete\">token to delete</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"tokenid\")]\r\npublic virtual void AddReplaceBetween(string tokenid, string tokenStart, string tokenEnd, string replacement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplaceBetween(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    Add replace between entry\r\n    </summary>\r\n    <param name=\"tokenStart\">Start token</param>\r\n    <param name=\"tokenEnd\">End token</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplaceBetween(System.String,System.String,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplaceBetween(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    Add replace between entry\r\n    </summary>\r\n    <param name=\"tokenStart\">Start token</param>\r\n    <param name=\"tokenEnd\">End token</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"c\")]\r\nprotected static bool IsValidIdentifierStartChar(char c)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierStartChar(System.Char)\">\r\n    <summary>\r\n    Verifies if the start character is valid\r\n    </summary>\r\n    <param name=\"c\">Start character</param>\r\n    <returns>true if successful false otherwise</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierStartChar(System.Char)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierStartChar(System.Char)\">\r\n    <summary>\r\n    Verifies if the start character is valid\r\n    </summary>\r\n    <param name=\"c\">Start character</param>\r\n    <returns>true if successful false otherwise</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddReplace(string token, string replacement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplace(System.String,System.String)\">\r\n    <summary>\r\n    Add a replacement type entry\r\n    </summary>\r\n    <param name=\"token\">token to replace</param>\r\n    <param name=\"replacement\">replacement string</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplace(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplace(System.String,System.String)\">\r\n    <summary>\r\n    Add a replacement type entry\r\n    </summary>\r\n    <param name=\"token\">token to replace</param>\r\n    <param name=\"replacement\">replacement string</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void ReplaceBetweenTokens(ref string buffer, ReplaceBetweenPairToken rpBetweenToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceBetweenTokens(System.String@,Microsoft.VisualStudio.Project.ReplaceBetweenPairToken)\">\r\n    <summary>\r\n    Replaces the token from the buffer between the provided tokens\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"rpBetweenToken\">replacement token</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceBetweenTokens(System.String@,Microsoft.VisualStudio.Project.ReplaceBetweenPairToken)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceBetweenTokens(System.String@,Microsoft.VisualStudio.Project.ReplaceBetweenPairToken)\">\r\n    <summary>\r\n    Replaces the token from the buffer between the provided tokens\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"rpBetweenToken\">replacement token</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\"), SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Untoken\")]\r\npublic virtual void UntokenFile(string source, string destination)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.UntokenFile(System.String,System.String)\">\r\n    <summary>\r\n    For all known token, replace token with correct value\r\n    </summary>\r\n    <param name=\"source\">File of the source file</param>\r\n    <param name=\"destination\">File of the destination file</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.UntokenFile(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.UntokenFile(System.String,System.String)\">\r\n    <summary>\r\n    For all known token, replace token with correct value\r\n    </summary>\r\n    <param name=\"source\">File of the source file</param>\r\n    <param name=\"destination\">File of the destination file</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"c\")]\r\nprotected static bool IsValidIdentifierChar(char c)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierChar(System.Char)\">\r\n    <summary>\r\n    This function will accept a subset of the characters that can create an\r\n    identifier name: there are other unicode char that can be inside the name, but\r\n    this function will not allow. By now it can work this way, but when and if the\r\n    VSIP package will handle also languages different from english, this function\r\n    must be changed.\r\n    </summary>\r\n    <param name=\"c\">Character to validate</param>\r\n    <returns>true if successful false otherwise</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierChar(System.Char)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierChar(System.Char)\">\r\n    <summary>\r\n    This function will accept a subset of the characters that can create an\r\n    identifier name: there are other unicode char that can be inside the name, but\r\n    this function will not allow. By now it can work this way, but when and if the\r\n    VSIP package will handle also languages different from english, this function\r\n    must be changed.\r\n    </summary>\r\n    <param name=\"c\">Character to validate</param>\r\n    <returns>true if successful false otherwise</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1822:MarkMembersAsStatic\")]\r\npublic string GuidToForm1(Guid value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.GuidToForm1(System.Guid)\">\r\n    <summary>\r\n    Generates a string representation of a guid with the following format:\r\n    0x01020304, 0x0506, 0x0708, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10\r\n    </summary>\r\n    <param name=\"value\">Guid to be generated</param>\r\n    <returns>The guid as string</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.GuidToForm1(System.Guid)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.GuidToForm1(System.Guid)\">\r\n    <summary>\r\n    Generates a string representation of a guid with the following format:\r\n    0x01020304, 0x0506, 0x0708, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10\r\n    </summary>\r\n    <param name=\"value\">Guid to be generated</param>\r\n    <returns>The guid as string</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Reset()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.Reset\">\r\n    <summary>\r\n    Reset list of TokenReplacer entries\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.Reset",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.Reset\">\r\n    <summary>\r\n    Reset list of TokenReplacer entries\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void ReplaceTokens(ref string buffer, ReplacePairToken tokenToReplace)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceTokens(System.String@,Microsoft.VisualStudio.Project.ReplacePairToken)\">\r\n    <summary>\r\n    Replaces the tokens in a buffer with the replacement string\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"tokenToReplace\">replacement data</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceTokens(System.String@,Microsoft.VisualStudio.Project.ReplacePairToken)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceTokens(System.String@,Microsoft.VisualStudio.Project.ReplacePairToken)\">\r\n    <summary>\r\n    Replaces the tokens in a buffer with the replacement string\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"tokenToReplace\">replacement data</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddDelete(string tokenToDelete)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddDelete(System.String)\">\r\n    <summary>\r\n    Add a deletion entry\r\n    </summary>\r\n    <param name=\"tokenToDelete\">Token to delete</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.AddDelete(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddDelete(System.String)\">\r\n    <summary>\r\n    Add a deletion entry\r\n    </summary>\r\n    <param name=\"tokenToDelete\">Token to delete</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1822:MarkMembersAsStatic\")]\r\npublic string GetFileNamespace(string fileFullPath, ProjectNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.GetFileNamespace(System.String,Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    The goal here is to reduce the risk of name conflict between 2 classes\r\n    added in different directories. This code does NOT garanty uniqueness.\r\n    To garanty uniqueness, you should change this function to work with\r\n    the language service to verify that the namespace+class generated does\r\n    not conflict.\r\n    </summary>\r\n    <param name=\"fileFullPath\">Full path to the new file</param>\r\n    <returns>Namespace to use for the new file</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.GetFileNamespace(System.String,Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.GetFileNamespace(System.String,Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    The goal here is to reduce the risk of name conflict between 2 classes\r\n    added in different directories. This code does NOT garanty uniqueness.\r\n    To garanty uniqueness, you should change this function to work with\r\n    the language service to verify that the namespace+class generated does\r\n    not conflict.\r\n    </summary>\r\n    <param name=\"fileFullPath\">Full path to the new file</param>\r\n    <returns>Namespace to use for the new file</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class TokenProcessor\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.TokenProcessor\">\r\n    <summary>\r\n    Contain a number of functions that handle token replacement\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.TokenProcessor",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.TokenProcessor\">\r\n    <summary>\r\n    Contain a number of functions that handle token replacement\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class SingleFileGeneratorNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SingleFileGeneratorNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\">true if called from IDispose.Dispose; false if called from Finalizer.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\">true if called from IDispose.Dispose; false if called from Finalizer.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateSolution_Cancel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Cancel\">\r\n    <summary>\r\n    Called when a build is being cancelled. \r\n    </summary>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Cancel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Cancel\">\r\n    <summary>\r\n    Called when a build is being cancelled. \r\n    </summary>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateProjectCfg_Done(IVsHierarchy hierarchy, IVsCfg configProject, IVsCfg configSolution, uint action, int success, int cancel)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)\">\r\n    <summary>\r\n    Called right after a project configuration is finished building. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project that has finished building.</param>\r\n    <param name=\"configProject\">A configuration project object.</param>\r\n    <param name=\"configSolution\">A configuration solution object.</param>\r\n    <param name=\"action\">The action taken.</param>\r\n    <param name=\"success\">Flag indicating success.</param>\r\n    <param name=\"cancel\">Flag indicating cancel.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n    <remarks>The values for the action are defined in the enum _SLNUPDACTION env\\msenv\\core\\slnupd2.h</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)\">\r\n    <summary>\r\n    Called right after a project configuration is finished building. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project that has finished building.</param>\r\n    <param name=\"configProject\">A configuration project object.</param>\r\n    <param name=\"configSolution\">A configuration solution object.</param>\r\n    <param name=\"action\">The action taken.</param>\r\n    <param name=\"success\">Flag indicating success.</param>\r\n    <param name=\"cancel\">Flag indicating cancel.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n    <remarks>The values for the action are defined in the enum _SLNUPDACTION env\\msenv\\core\\slnupd2.h</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateSolution_StartUpdate(ref int cancelUpdate)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_StartUpdate(System.Int32@)\">\r\n    <summary>\r\n    Called before the first project configuration is about to be built. \r\n    </summary>\r\n    <param name=\"cancelUpdate\">A flag indicating cancel update.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_StartUpdate(System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_StartUpdate(System.Int32@)\">\r\n    <summary>\r\n    Called before the first project configuration is about to be built. \r\n    </summary>\r\n    <param name=\"cancelUpdate\">A flag indicating cancel update.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterActiveSolutionCfgChange(IVsCfg oldActiveSlnCfg, IVsCfg newActiveSlnCfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnAfterActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)\">\r\n    <summary>\r\n    Fired after the active solution config is changed (pOldActiveSlnCfg can be NULL).\r\n    </summary>\r\n    <param name=\"oldActiveSlnCfg\">Old configuration.</param>\r\n    <param name=\"newActiveSlnCfg\">New configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnAfterActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnAfterActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)\">\r\n    <summary>\r\n    Fired after the active solution config is changed (pOldActiveSlnCfg can be NULL).\r\n    </summary>\r\n    <param name=\"oldActiveSlnCfg\">Old configuration.</param>\r\n    <param name=\"newActiveSlnCfg\">New configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int UpdateProjectCfg_Begin(IVsHierarchy hierarchy, IVsCfg configProject, IVsCfg configSolution, uint action, ref int cancel)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Called right before a project configuration begins to build. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project that is to be build.</param>\r\n    <param name=\"configProject\">A configuration project object.</param>\r\n    <param name=\"configSolution\">A configuration solution object.</param>\r\n    <param name=\"action\">The action taken.</param>\r\n    <param name=\"cancel\">A flag indicating cancel.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n    <remarks>The values for the action are defined in the enum _SLNUPDACTION env\\msenv\\core\\slnupd2.h</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Called right before a project configuration begins to build. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project that is to be build.</param>\r\n    <param name=\"configProject\">A configuration project object.</param>\r\n    <param name=\"configSolution\">A configuration solution object.</param>\r\n    <param name=\"action\">The action taken.</param>\r\n    <param name=\"cancel\">A flag indicating cancel.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n    <remarks>The values for the action are defined in the enum _SLNUPDACTION env\\msenv\\core\\slnupd2.h</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeActiveSolutionCfgChange(IVsCfg oldActiveSlnCfg, IVsCfg newActiveSlnCfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnBeforeActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)\">\r\n    <summary>\r\n    Fired before the active solution config is changed (pOldActiveSlnCfg can be NULL\r\n    </summary>\r\n    <param name=\"oldActiveSlnCfg\">Old configuration.</param>\r\n    <param name=\"newActiveSlnCfg\">New configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnBeforeActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnBeforeActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)\">\r\n    <summary>\r\n    Fired before the active solution config is changed (pOldActiveSlnCfg can be NULL\r\n    </summary>\r\n    <param name=\"oldActiveSlnCfg\">Old configuration.</param>\r\n    <param name=\"newActiveSlnCfg\">New configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateSolution_Begin(ref int cancelUpdate)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Begin(System.Int32@)\">\r\n    <summary>\r\n    Called before any build actions have begun. This is the last chance to cancel the build before any building begins. \r\n    </summary>\r\n    <param name=\"cancelUpdate\">Flag indicating cancel update.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Begin(System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Begin(System.Int32@)\">\r\n    <summary>\r\n    Called before any build actions have begun. This is the last chance to cancel the build before any building begins. \r\n    </summary>\r\n    <param name=\"cancelUpdate\">Flag indicating cancel update.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateSolution_Done(int fSucceeded, int fModified, int fCancelCommand)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)\">\r\n    <summary>\r\n    Called when a build is completed. \r\n    </summary>\r\n    <param name=\"succeeded\">true if no update actions failed.</param>\r\n    <param name=\"modified\">true if any update action succeeded.</param>\r\n    <param name=\"cancelCommand\">true if update actions were canceled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)\">\r\n    <summary>\r\n    Called when a build is completed. \r\n    </summary>\r\n    <param name=\"succeeded\">true if no update actions failed.</param>\r\n    <param name=\"modified\">true if any update action succeeded.</param>\r\n    <param name=\"cancelCommand\">true if update actions were canceled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnActiveProjectCfgChange(IVsHierarchy hierarchy)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Called when the active project configuration for a project in the solution has changed. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project whose configuration has changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Called when the active project configuration for a project in the solution has changed. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project whose configuration has changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public abstract class UpdateSolutionEventsListener\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener\">\r\n    <summary>\r\n    Defines an abstract class implementing IVsUpdateSolutionEvents interfaces.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener\">\r\n    <summary>\r\n    Defines an abstract class implementing IVsUpdateSolutionEvents interfaces.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void RenameDirectory(string newPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.RenameDirectory(System.String)\">\r\n    <summary>\r\n    Rename the physical directory for a folder node\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.RenameDirectory(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.RenameDirectory(System.String)\">\r\n    <summary>\r\n    Rename the physical directory for a folder node\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.GetAutomationObject\">\r\n    <summary>\r\n    Get the automation object for the FolderNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OAFolderNode type if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.GetAutomationObject\">\r\n    <summary>\r\n    Get the automation object for the FolderNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OAFolderNode type if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1804:RemoveUnusedLocals\", MessageId = \"e\")]\r\npublic virtual void CreateDirectory()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory\">\r\n    <summary>\r\n    creates the physical directory for a folder node\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory\">\r\n    <summary>\r\n    creates the physical directory for a folder node\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1804:RemoveUnusedLocals\", MessageId = \"e\")]\r\npublic virtual void CreateDirectory(string newName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory(System.String)\">\r\n    <summary>\r\n    Creates a folder nodes physical directory\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n    <param name=\"newName\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory(System.String)\">\r\n    <summary>\r\n    Creates a folder nodes physical directory\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n    <param name=\"newName\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetEditLabel(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Rename Folder\r\n    </summary>\r\n    <param name=\"label\">new Name of Folder</param>\r\n    <returns>VSConstants.S_OK, if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Rename Folder\r\n    </summary>\r\n    <param name=\"label\">new Name of Folder</param>\r\n    <returns>VSConstants.S_OK, if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void DeleteFolder(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.DeleteFolder(System.String)\">\r\n    <summary>\r\n    Override if your node is not a file system folder so that\r\n    it does nothing or it deletes it from your storage location.\r\n    </summary>\r\n    <param name=\"path\">Path to the folder to delete</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.DeleteFolder(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.DeleteFolder(System.String)\">\r\n    <summary>\r\n    Override if your node is not a file system folder so that\r\n    it does nothing or it deletes it from your storage location.\r\n    </summary>\r\n    <param name=\"path\">Path to the folder to delete</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.GetMkDocument",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class FolderNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FolderNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override int ApplyChanges()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildPropertyPage.ApplyChanges",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildPropertyPage.GetClassName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override void BindProperties()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildPropertyPage.BindProperties",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class BuildPropertyPage\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildPropertyPage\">\r\n    <summary>\r\n    Defines the properties on the build property page and the logic the binds the properties to project data (load and save)\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildPropertyPage",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildPropertyPage\">\r\n    <summary>\r\n    Defines the properties on the build property page and the logic the binds the properties to project data (load and save)\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.Equals(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void RefreshProperties()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.RefreshProperties\">\r\n    <summary>\r\n    Reevaluate all properties for the current item\r\n    This should be call if you believe the property for this item\r\n    may have changed since it was created/refreshed, or global properties\r\n    this items depends on have changed.\r\n    Be aware that there is a perf cost in calling this function.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.RefreshProperties",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.RefreshProperties\">\r\n    <summary>\r\n    Reevaluate all properties for the current item\r\n    This should be call if you believe the property for this item\r\n    may have changed since it was created/refreshed, or global properties\r\n    this items depends on have changed.\r\n    Be aware that there is a perf cost in calling this function.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Rename(string newPath)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.Rename(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string GetEvaluatedMetadata(string attributeName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetEvaluatedMetadata(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void SetMetadata(string attributeName, string attributeValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.SetMetadata(System.String,System.String)\">\r\n    <summary>\r\n    Set an attribute on the project element\r\n    </summary>\r\n    <param name=\"attributeName\">Name of the attribute to set</param>\r\n    <param name=\"attributeValue\">Value to give to the attribute.  Use <c>null</c> to delete the metadata definition.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.SetMetadata(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.SetMetadata(System.String,System.String)\">\r\n    <summary>\r\n    Set an attribute on the project element\r\n    </summary>\r\n    <param name=\"attributeName\">Name of the attribute to set</param>\r\n    <param name=\"attributeValue\">Value to give to the attribute.  Use <c>null</c> to delete the metadata definition.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetHashCode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void RemoveFromProjectFile()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.RemoveFromProjectFile\">\r\n    <summary>\r\n    Calling this method remove this item from the project file.\r\n    Once the item is delete, you should not longer be using it.\r\n    Note that the item should be removed from the hierarchy prior to this call.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.RemoveFromProjectFile",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.RemoveFromProjectFile\">\r\n    <summary>\r\n    Calling this method remove this item from the project file.\r\n    Once the item is delete, you should not longer be using it.\r\n    Note that the item should be removed from the hierarchy prior to this call.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetFullPathForElement()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetFullPathForElement\">\r\n    <summary>\r\n    Return an absolute path for the passed in element.\r\n    If the element is already an absolute path, it is returned.\r\n    Otherwise, it is unrelativized using the project directory\r\n    as the base.\r\n    Note that any \"..\" in the paths will be resolved.\r\n    \r\n    For non-file system based project, it may make sense to override.\r\n    </summary>\r\n    <returns>FullPath</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetFullPathForElement",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetFullPathForElement\">\r\n    <summary>\r\n    Return an absolute path for the passed in element.\r\n    If the element is already an absolute path, it is returned.\r\n    Otherwise, it is unrelativized using the project directory\r\n    as the base.\r\n    Note that any \"..\" in the paths will be resolved.\r\n    \r\n    For non-file system based project, it may make sense to override.\r\n    </summary>\r\n    <returns>FullPath</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetMetadataAndThrow(string attributeName, Exception exception)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadataAndThrow(System.String,System.Exception)\">\r\n    <summary>\r\n    Gets the attribute and throws the handed exception if the exception if the attribute is empty or null.\r\n    </summary>\r\n    <param name=\"attributeName\">The name of the attribute to get.</param>\r\n    <param name=\"exception\">The exception to be thrown if not found or empty.</param>\r\n    <returns>The attribute if found</returns>\r\n    <remarks>The method will throw an Exception and neglect the passed in exception if the attribute is deleted</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadataAndThrow(System.String,System.Exception)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadataAndThrow(System.String,System.Exception)\">\r\n    <summary>\r\n    Gets the attribute and throws the handed exception if the exception if the attribute is empty or null.\r\n    </summary>\r\n    <param name=\"attributeName\">The name of the attribute to get.</param>\r\n    <param name=\"exception\">The exception to be thrown if not found or empty.</param>\r\n    <returns>The attribute if found</returns>\r\n    <remarks>The method will throw an Exception and neglect the passed in exception if the attribute is deleted</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetMetadata(string attributeName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadata(System.String)\">\r\n    <summary>\r\n    Get the value of an attribute on a project element\r\n    </summary>\r\n    <param name=\"attributeName\">Name of the attribute to get the value for</param>\r\n    <returns>Value of the attribute</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadata(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadata(System.String)\">\r\n    <summary>\r\n    Get the value of an attribute on a project element\r\n    </summary>\r\n    <param name=\"attributeName\">Name of the attribute to get the value for</param>\r\n    <returns>Value of the attribute</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public sealed class ProjectElement\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectElement\">\r\n    <summary>\r\n    This class represent a project item (usualy a file) and allow getting and\r\n    setting attribute on it.\r\n    This class allow us to keep the internal details of our items hidden from\r\n    our derived classes.\r\n    While the class itself is public so it can be manipulated by derived classes,\r\n    its internal constructors make sure it can only be created from within the assembly.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectElement",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectElement\">\r\n    <summary>\r\n    This class represent a project item (usualy a file) and allow getting and\r\n    setting attribute on it.\r\n    This class allow us to keep the internal details of our items hidden from\r\n    our derived classes.\r\n    While the class itself is public so it can be manipulated by derived classes,\r\n    its internal constructors make sure it can only be created from within the assembly.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public static class ProjectFileConstants",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectFileConstants\">\r\n    <summary>\r\n    Defines the constant strings used with project files.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectFileConstants",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectFileConstants\">\r\n    <summary>\r\n    Defines the constant strings used with project files.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Gets a handle to the icon that should be set for this node\r\n    </summary>\r\n    <param name=\"open\">Whether the folder is open, ignored here.</param>\r\n    <returns>Handle to icon for the node</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Gets a handle to the icon that should be set for this node\r\n    </summary>\r\n    <param name=\"open\">Whether the folder is open, ignored here.</param>\r\n    <returns>Handle to icon for the node</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.GetEditLabel\">\r\n    <summary>\r\n    Disable rename\r\n    </summary>\r\n    <param name=\"label\">new label</param>\r\n    <returns>E_NOTIMPLE in order to tell the call that we do not support rename</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.GetEditLabel\">\r\n    <summary>\r\n    Disable rename\r\n    </summary>\r\n    <param name=\"label\">new label</param>\r\n    <returns>E_NOTIMPLE in order to tell the call that we do not support rename</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Disable certain commands for dependent file nodes \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Disable certain commands for dependent file nodes \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class DependentFileNode\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DependentFileNode\">\r\n    <summary>\r\n    Defines the logic for all dependent file nodes (solution explorer icon, commands etc.)\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DependentFileNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DependentFileNode\">\r\n    <summary>\r\n    Defines the logic for all dependent file nodes (solution explorer icon, commands etc.)\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class DependentFileNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.DependentFileNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public static class DefaultSortOrderNode",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DefaultSortOrderNode\">\r\n    <summary>\r\n    A set of constants that specify the default sort order for different types of hierarchy nodes.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DefaultSortOrderNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DefaultSortOrderNode\">\r\n    <summary>\r\n    A set of constants that specify the default sort order for different types of hierarchy nodes.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class ProjectReferencesProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectReferencesProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public sealed class AutomationBrowsableAttribute",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute\">\r\n    <summary>\r\n    All public properties on Nodeproperties or derived classes are assumed to be used by Automation by default.\r\n    Set this attribute to false on Properties that should not be visible for Automation.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute\">\r\n    <summary>\r\n    All public properties on Nodeproperties or derived classes are assumed to be used by Automation by default.\r\n    Set this attribute to false on Properties that should not be visible for Automation.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int OnAfterAddFilesEx(int cProjects, int cFiles, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, VSADDFILEFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRemoveDirectories(int cProjects, int cDirectories, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, VSREMOVEDIRECTORYFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterRemoveDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRenameFiles(int cProjects, int cFiles, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgszMkOldNames, string[] rgszMkNewNames, VSRENAMEFILEFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterRenameFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRenameDirectories(int cProjects, int cDirs, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgszMkOldNames, string[] rgszMkNewNames, VSRENAMEDIRECTORYFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterRenameDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterAddDirectoriesEx(int cProjects, int cDirectories, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, VSADDDIRECTORYFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterAddDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryAddFiles(IVsProject pProject, int cFiles, string[] rgpszMkDocuments, VSQUERYADDFILEFLAGS[] rgFlags, VSQUERYADDFILERESULTS[] pSummaryResult, VSQUERYADDFILERESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryAddDirectories(IVsProject pProject, int cDirectories, string[] rgpszMkDocuments, VSQUERYADDDIRECTORYFLAGS[] rgFlags, VSQUERYADDDIRECTORYRESULTS[] pSummaryResult, VSQUERYADDDIRECTORYRESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Usage\", \"CA1806:DoNotIgnoreMethodResults\", MessageId = \"Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.UnadviseTrackProjectDocumentsEvents(System.UInt32)\")]\r\nprotected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterSccStatusChanged(int cProjects, int cFiles, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, uint[] rgdwSccStatus)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterSccStatusChanged(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryRemoveDirectories(IVsProject pProject, int cDirectories, string[] rgpszMkDocuments, VSQUERYREMOVEDIRECTORYFLAGS[] rgFlags, VSQUERYREMOVEDIRECTORYRESULTS[] pSummaryResult, VSQUERYREMOVEDIRECTORYRESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRemoveFiles(int cProjects, int cFiles, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, VSREMOVEFILEFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterRemoveFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Init()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Init",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryRenameFiles(IVsProject pProject, int cFiles, string[] rgszMkOldNames, string[] rgszMkNewNames, VSQUERYRENAMEFILEFLAGS[] rgFlags, VSQUERYRENAMEFILERESULTS[] pSummaryResult, VSQUERYRENAMEFILERESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryRenameDirectories(IVsProject pProject, int cDirs, string[] rgszMkOldNames, string[] rgszMkNewNames, VSQUERYRENAMEDIRECTORYFLAGS[] rgFlags, VSQUERYRENAMEDIRECTORYRESULTS[] pSummaryResult, VSQUERYRENAMEDIRECTORYRESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryRemoveFiles(IVsProject pProject, int cFiles, string[] rgpszMkDocuments, VSQUERYREMOVEFILEFLAGS[] rgFlags, VSQUERYREMOVEFILERESULTS[] pSummaryResult, VSQUERYREMOVEFILERESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class ProjectDocumentsListener\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectDocumentsListener",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public sealed class PropertyPageTypeConverterAttribute\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute\">\r\n    <summary>\r\n    Defines a type converter.\r\n    </summary>\r\n    <remarks>This is needed to get rid of the type TypeConverter type that could not give back the Type we were passing to him.\r\n    We do not want to use reflection to get the type back from the  ConverterTypeName. Also the GetType methos does not spwan converters from other assemblies.</remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute\">\r\n    <summary>\r\n    Defines a type converter.\r\n    </summary>\r\n    <remarks>This is needed to get rid of the type TypeConverter type that could not give back the Type we were passing to him.\r\n    We do not want to use reflection to get the type back from the  ConverterTypeName. Also the GetType methos does not spwan converters from other assemblies.</remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class VsMenus",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.VsMenus\">\r\n    <summary>\r\n    Defines menu commands guids and menu command id's\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.VsMenus",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.VsMenus\">\r\n    <summary>\r\n    Defines menu commands guids and menu command id's\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OutputTypeConverter",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.OutputTypeConverter",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int UnadviseBuildStatusCallback(uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.UnadviseBuildStatusCallback(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int StartClean(IVsOutputWindowPane pane, uint options)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.StartClean(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Wait(uint ms, int fTickWhenMessageQNotEmpty)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.Wait(System.UInt32,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int StartBuild(IVsOutputWindowPane pane, uint options)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.StartBuild(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStatus(out int done)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.QueryStatus(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int AdviseBuildStatusCallback(IVsBuildStatusCallback callback, out uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.AdviseBuildStatusCallback(Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_ProjectCfg(out IVsProjectCfg p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.get_ProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int StartUpToDateCheck(IVsOutputWindowPane pane, uint options)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.StartUpToDateCheck(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStartUpToDateCheck(uint options, int[] supported, int[] ready)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.QueryStartUpToDateCheck(System.UInt32,System.Int32[],System.Int32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStartBuild(uint options, int[] supported, int[] ready)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.QueryStartBuild(System.UInt32,System.Int32[],System.Int32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Stop(int fsync)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.Stop(System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStartClean(uint options, int[] supported, int[] ready)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.QueryStartClean(System.UInt32,System.Int32[],System.Int32[])",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class BuildableProjectConfig\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildableProjectConfig",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public static class MsBuildGeneratedItemType",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.MsBuildGeneratedItemType",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int GetGeneratorInformation(string progId, out int generatesDesignTimeSource, out int generatesSharedDesignTimeSource, out int useTempPEFlag, out Guid guidGenerator)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetGeneratorInformation(System.String,System.Int32@,System.Int32@,System.Int32@,System.Guid@)\">\r\n    <summary>\r\n    Gets the generator information.\r\n    </summary>\r\n    <param name=\"progId\">prog id of the generator to be created. For e.g HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\9.0Exp\\Generators\\[prjfacguid]\\[wszProgId]</param>\r\n    <param name=\"generatesDesignTimeSource\">GeneratesDesignTimeSource key value</param>\r\n    <param name=\"generatesSharedDesignTimeSource\">GeneratesSharedDesignTimeSource key value</param>\r\n    <param name=\"useTempPEFlag\">UseDesignTimeCompilationFlag key value</param>\r\n    <param name=\"guiddGenerator\">CLSID key value</param>\r\n    <returns>S_OK if succesful</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetGeneratorInformation(System.String,System.Int32@,System.Int32@,System.Int32@,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetGeneratorInformation(System.String,System.Int32@,System.Int32@,System.Int32@,System.Guid@)\">\r\n    <summary>\r\n    Gets the generator information.\r\n    </summary>\r\n    <param name=\"progId\">prog id of the generator to be created. For e.g HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\9.0Exp\\Generators\\[prjfacguid]\\[wszProgId]</param>\r\n    <param name=\"generatesDesignTimeSource\">GeneratesDesignTimeSource key value</param>\r\n    <param name=\"generatesSharedDesignTimeSource\">GeneratesSharedDesignTimeSource key value</param>\r\n    <param name=\"useTempPEFlag\">UseDesignTimeCompilationFlag key value</param>\r\n    <param name=\"guiddGenerator\">CLSID key value</param>\r\n    <returns>S_OK if succesful</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetDefaultGenerator(string filename, out string progID)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetDefaultGenerator(System.String,System.String@)\">\r\n    <summary>\r\n    Gets the default generator based on the file extension. HKLM\\Software\\Microsoft\\VS\\9.0\\Generators\\[prjfacguid]\\.extension\r\n    </summary>\r\n    <param name=\"filename\">File name with extension</param>\r\n    <param name=\"progID\">The generator prog ID</param>\r\n    <returns>S_OK if successful</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetDefaultGenerator(System.String,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetDefaultGenerator(System.String,System.String@)\">\r\n    <summary>\r\n    Gets the default generator based on the file extension. HKLM\\Software\\Microsoft\\VS\\9.0\\Generators\\[prjfacguid]\\.extension\r\n    </summary>\r\n    <param name=\"filename\">File name with extension</param>\r\n    <param name=\"progID\">The generator prog ID</param>\r\n    <returns>S_OK if successful</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int CreateGeneratorInstance(string progId, out int generatesDesignTimeSource, out int generatesSharedDesignTimeSource, out int useTempPEFlag, out IVsSingleFileGenerator generate)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.CreateGeneratorInstance(System.String,System.Int32@,System.Int32@,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator@)\">\r\n    <summary>\r\n    Creates an instance of the single file generator requested\r\n    </summary>\r\n    <param name=\"progId\">prog id of the generator to be created. For e.g HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\9.0Exp\\Generators\\[prjfacguid]\\[wszProgId]</param>\r\n    <param name=\"generatesDesignTimeSource\">GeneratesDesignTimeSource key value</param>\r\n    <param name=\"generatesSharedDesignTimeSource\">GeneratesSharedDesignTimeSource key value</param>\r\n    <param name=\"useTempPEFlag\">UseDesignTimeCompilationFlag key value</param>\r\n    <param name=\"generate\">IVsSingleFileGenerator interface</param>\r\n    <returns>S_OK if succesful</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.CreateGeneratorInstance(System.String,System.Int32@,System.Int32@,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.CreateGeneratorInstance(System.String,System.Int32@,System.Int32@,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator@)\">\r\n    <summary>\r\n    Creates an instance of the single file generator requested\r\n    </summary>\r\n    <param name=\"progId\">prog id of the generator to be created. For e.g HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\9.0Exp\\Generators\\[prjfacguid]\\[wszProgId]</param>\r\n    <param name=\"generatesDesignTimeSource\">GeneratesDesignTimeSource key value</param>\r\n    <param name=\"generatesSharedDesignTimeSource\">GeneratesSharedDesignTimeSource key value</param>\r\n    <param name=\"useTempPEFlag\">UseDesignTimeCompilationFlag key value</param>\r\n    <param name=\"generate\">IVsSingleFileGenerator interface</param>\r\n    <returns>S_OK if succesful</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class SingleFileGeneratorFactory\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory\">\r\n    <summary>\r\n    Provides implementation IVsSingleFileGeneratorFactory for\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory\">\r\n    <summary>\r\n    Provides implementation IVsSingleFileGeneratorFactory for\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class FileNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FileNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual AttributeCollection GetAttributes()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetAttributes",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual object GetEditor(Type editorBaseType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetEditor(System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual object GetPropertyOwner(PropertyDescriptor pd)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual TypeConverter GetConverter()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetConverter",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EventDescriptor GetDefaultEvent()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetDefaultEvent",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual PropertyDescriptorCollection GetProperties(System.Attribute[] attributes)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetProperties(System.Attribute[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetClassName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual DesignPropertyDescriptor CreateDesignPropertyDescriptor(PropertyDescriptor propertyDescriptor)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.CreateDesignPropertyDescriptor(System.ComponentModel.PropertyDescriptor)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string GetComponentName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetComponentName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EventDescriptorCollection GetEvents()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetEvents",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual PropertyDescriptorCollection GetProperties()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EventDescriptorCollection GetEvents(System.Attribute[] attributes)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetEvents(System.Attribute[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual PropertyDescriptor GetDefaultProperty()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetDefaultProperty",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class LocalizableProperties\r\n\r\n#endregionICustomTypeDescriptor",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.LocalizableProperties\">\r\n    <summary>\r\n    Enables a managed object to expose properties and attributes for COM objects.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.LocalizableProperties",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.LocalizableProperties\">\r\n    <summary>\r\n    Enables a managed object to expose properties and attributes for COM objects.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int OnAfterOpenProject(IVsHierarchy hierarchy, int added)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterChangeProjectParent(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryUnloadProject(IVsHierarchy pRealHierarchy, ref int cancel)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryCloseSolution(object pUnkReserved, ref int cancel)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryCloseSolution(System.Object,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeClosingChildren(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterCloseSolution(object reserved)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterCloseSolution(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterLoadProject(IVsHierarchy stubHierarchy, IVsHierarchy realHierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeCloseProject(IVsHierarchy hierarchy, int removed)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeUnloadProject(IVsHierarchy realHierarchy, IVsHierarchy rtubHierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryCloseProject(IVsHierarchy hierarchy, int removing, ref int cancel)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA1806:DoNotIgnoreMethodResults\", MessageId = \"Microsoft.VisualStudio.Shell.Interop.IVsSolution.UnadviseSolutionEvents(System.UInt32)\")]\r\nprotected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterOpeningChildren(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterAsynchOpenProject(IVsHierarchy hierarchy, int added)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterAsynchOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryChangeProjectParent(IVsHierarchy hierarchy, IVsHierarchy newParentHier, ref int cancel)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)\">\r\n    <summary>\r\n    Fired before a project is moved from one parent to another in the solution explorer\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)\">\r\n    <summary>\r\n    Fired before a project is moved from one parent to another in the solution explorer\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterMergeSolution(object pUnkReserved)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterMergeSolution(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterOpenSolution(object pUnkReserved, int fNewSolution)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterOpenSolution(System.Object,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeOpeningChildren(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterClosingChildren(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Init()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.Init",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeCloseSolution(object pUnkReserved)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeCloseSolution(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRenameProject(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class SolutionListener\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SolutionListener",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual string GetOptionHelp()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectOptions.GetOptionHelp",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ProjectOptions",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectOptions",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual void SetPageSite(IPropertyPageSite theSite)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.SetPageSite(Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Activate(IntPtr parent, RECT[] pRect, int bModal)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Activate(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int TranslateAccelerator(MSG[] arrMsg)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SettingsPage.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SettingsPage.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Apply()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Apply",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string GetProperty(string propertyName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetProperty(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected ProjectConfig[] GetProjectConfigurations()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetProjectConfigurations",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Deactivate()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Deactivate",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string GetConfigProperty(string propertyName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetConfigProperty(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object GetTypedProperty(string name, Type type)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetTypedProperty(System.String,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Help(string helpDir)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Help(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Move(RECT[] arrRect)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Move(Microsoft.VisualStudio.OLE.Interop.RECT[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Show(uint cmd)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Show(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected abstract int ApplyChanges();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.ApplyChanges",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected void UpdateObjects()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.UpdateObjects",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object GetTypedConfigProperty(string name, Type type)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetTypedConfigProperty(System.String,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int IsPageDirty()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.IsPageDirty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected abstract void BindProperties();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.BindProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void GetPageInfo(PROPPAGEINFO[] arrInfo)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetPageInfo(Microsoft.VisualStudio.OLE.Interop.PROPPAGEINFO[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void SetObjects(uint count, object[] punk)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.SetObjects(System.UInt32,System.Object[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void SetConfigProperty(string name, string value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SettingsPage.SetConfigProperty(System.String,System.String)\">\r\n    <summary>\r\n    Sets the value of a configuration dependent property.\r\n    If the attribute does not exist it is created.  \r\n    If value is null it will be set to an empty string.\r\n    </summary>\r\n    <param name=\"name\">property name.</param>\r\n    <param name=\"value\">value of property</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.SetConfigProperty(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SettingsPage.SetConfigProperty(System.String,System.String)\">\r\n    <summary>\r\n    Sets the value of a configuration dependent property.\r\n    If the attribute does not exist it is created.  \r\n    If value is null it will be set to an empty string.\r\n    </summary>\r\n    <param name=\"name\">property name.</param>\r\n    <param name=\"value\">value of property</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public abstract class SettingsPage",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SettingsPage\">\r\n    <summary>\r\n    The base class for property pages.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.SettingsPage",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SettingsPage\">\r\n    <summary>\r\n    The base class for property pages.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public static IVsUIHierarchyWindow GetUIHierarchyWindow(IServiceProvider serviceProvider, Guid persistenceSlot)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIHierarchyUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)\">\r\n    <summary>\r\n    Get reference to IVsUIHierarchyWindow interface from guid persistence slot.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <param name=\"persistenceSlot\">Unique identifier for a tool window created using IVsUIShell::CreateToolWindow. \r\n    The caller of this method can use predefined identifiers that map to tool windows if those tool windows \r\n    are known to the caller. </param>\r\n    <returns>A reference to an IVsUIHierarchyWindow interface.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIHierarchyUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIHierarchyUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)\">\r\n    <summary>\r\n    Get reference to IVsUIHierarchyWindow interface from guid persistence slot.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <param name=\"persistenceSlot\">Unique identifier for a tool window created using IVsUIShell::CreateToolWindow. \r\n    The caller of this method can use predefined identifiers that map to tool windows if those tool windows \r\n    are known to the caller. </param>\r\n    <returns>A reference to an IVsUIHierarchyWindow interface.</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public static class UIHierarchyUtilities",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UIHierarchyUtilities\">\r\n     <summary>\r\n    This class provides some useful static shell based methods. \r\n     </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.UIHierarchyUtilities",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UIHierarchyUtilities\">\r\n     <summary>\r\n    This class provides some useful static shell based methods. \r\n     </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override string GetComponentName()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetComponentName\">\r\n    <summary>\r\n    Get the Caption of the Hierarchy Node instance. If Caption is null or empty we delegate to base\r\n    </summary>\r\n    <returns>Caption of Hierarchy node instance</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetComponentName",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetComponentName\">\r\n    <summary>\r\n    Get the Caption of the Hierarchy Node instance. If Caption is null or empty we delegate to base\r\n    </summary>\r\n    <returns>Caption of Hierarchy node instance</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProjectDesignerPages(CAUUID[] pages)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration independent.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration independent.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected void SetProperty(string name, string value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.SetProperty(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected string GetProperty(string name, string def)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetProperty(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgProvider(out IVsCfgProvider p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[Browsable(false)]\r\npublic object ExtenderNames()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.ExtenderNames",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object Extender(string extenderName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.Extender(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProjectItem(out IVsHierarchy hier, out uint itemid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)\">\r\n    <summary>\r\n    Maps back to the hierarchy or project item object corresponding to the browse object.\r\n    </summary>\r\n    <param name=\"hier\">Reference to the hierarchy object.</param>\r\n    <param name=\"itemid\">Reference to the project item.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)\">\r\n    <summary>\r\n    Maps back to the hierarchy or project item object corresponding to the browse object.\r\n    </summary>\r\n    <param name=\"hier\">Reference to the hierarchy object.</param>\r\n    <param name=\"itemid\">Reference to the project item.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void GetPages(CAUUID[] pages)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class NodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.NodeProperties\">\r\n    <summary>\r\n    To create your own localizable node properties, subclass this and add public properties\r\n    decorated with your own localized display name, category and description attributes.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.NodeProperties",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.NodeProperties\">\r\n    <summary>\r\n    To create your own localizable node properties, subclass this and add public properties\r\n    decorated with your own localized display name, category and description attributes.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)\">\r\n    <summary>\r\n    This is temporary until we have support for re-adding a nested item\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)\">\r\n    <summary>\r\n    This is temporary until we have support for re-adding a nested item\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetEditLabel(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Called by the shell when a node has been renamed from the GUI\r\n    </summary>\r\n    <param name=\"label\">The name of the new label.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Called by the shell when a node has been renamed from the GUI\r\n    </summary>\r\n    <param name=\"label\">The name of the new label.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void CreateProjectDirectory()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CreateProjectDirectory\">\r\n    <summary>\r\n    Creates the project directory if it does not exist.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.CreateProjectDirectory",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CreateProjectDirectory\">\r\n    <summary>\r\n    Creates the project directory if it does not exist.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Init(string fileName, string destination, string projectName, __VSCREATEPROJFLAGS createFlags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Init(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    Initialize the nested hierarhy node.\r\n    </summary>\r\n    <param name=\"fileName\">The file name of the nested project.</param>\r\n    <param name=\"destination\">The location of the nested project.</param>\r\n    <param name=\"projectName\">The name of the project.</param>\r\n    <param name=\"createFlags\">The nested project creation flags </param>\r\n    <remarks>This methos should be called just after a NestedProjectNode object is created.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.Init(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Init(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    Initialize the nested hierarhy node.\r\n    </summary>\r\n    <param name=\"fileName\">The file name of the nested project.</param>\r\n    <param name=\"destination\">The location of the nested project.</param>\r\n    <param name=\"projectName\">The name of the project.</param>\r\n    <param name=\"createFlags\">The nested project creation flags </param>\r\n    <remarks>This methos should be called just after a NestedProjectNode object is created.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int GetGuidProperty(int propid, out Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Gets properties whose values are GUIDs.\r\n    </summary>\r\n    <param name=\"propid\">Identifier of the hierarchy property</param>\r\n    <param name=\"guid\"> Pointer to a GUID property specified in propid</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Gets properties whose values are GUIDs.\r\n    </summary>\r\n    <param name=\"propid\">Identifier of the hierarchy property</param>\r\n    <param name=\"guid\"> Pointer to a GUID property specified in propid</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"RDT\")]\r\nprotected virtual void UnlockRDTEntry()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.UnlockRDTEntry\">\r\n    <summary>\r\n    Unlock the RDT entry for the nested project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.UnlockRDTEntry",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.UnlockRDTEntry\">\r\n    <summary>\r\n    Unlock the RDT entry for the nested project\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"RDT\")]\r\nprotected virtual void LockRDTEntry()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.LockRDTEntry\">\r\n    <summary>\r\n    Lock the RDT Entry for the nested project.\r\n    By default this document is marked as \"Dont Save as\". That means the menu File->SaveAs is disabled for the\r\n    nested project node.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.LockRDTEntry",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.LockRDTEntry\">\r\n    <summary>\r\n    Lock the RDT Entry for the nested project.\r\n    By default this document is marked as \"Dont Save as\". That means the menu File->SaveAs is disabled for the\r\n    nested project node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SaveItem(VSSAVEFLAGS dwSave, string silentSaveAsName, uint itemid, IntPtr punkDocData, out int pfCancelled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Saves the hierarchy item to disk.\r\n    </summary>\r\n    <param name=\"dwSave\">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>\r\n    <param name=\"silentSaveAsName\">File name to be applied when dwSave is set to VSSAVE_SilentSave. </param>\r\n    <param name=\"itemid\">Item identifier of the hierarchy item saved from VSITEMID. </param>\r\n    <param name=\"punkDocData\">Pointer to the IUnknown interface of the hierarchy item saved.</param>\r\n    <param name=\"pfCancelled\">TRUE if the save action was canceled. </param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Saves the hierarchy item to disk.\r\n    </summary>\r\n    <param name=\"dwSave\">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>\r\n    <param name=\"silentSaveAsName\">File name to be applied when dwSave is set to VSSAVE_SilentSave. </param>\r\n    <param name=\"itemid\">Item identifier of the hierarchy item saved from VSITEMID. </param>\r\n    <param name=\"punkDocData\">Pointer to the IUnknown interface of the hierarchy item saved.</param>\r\n    <param name=\"pfCancelled\">TRUE if the save action was canceled. </param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAutomationObject\">\r\n    <summary>\r\n    Get the automation object for the NestedProjectNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OANestedProjectItem type if succeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAutomationObject\">\r\n    <summary>\r\n    Get the automation object for the NestedProjectNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OANestedProjectItem type if succeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetEditLabel\">\r\n    <summary>\r\n    Called by the shell to get the node caption when the user tries to rename from the GUI\r\n    </summary>\r\n    <returns>the node cation</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetEditLabel\">\r\n    <summary>\r\n    Called by the shell to get the node caption when the user tries to rename from the GUI\r\n    </summary>\r\n    <returns>the node cation</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int Close()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Close\">\r\n    <summary>\r\n    Return S_OK. Implementation of Closing a nested project is done in CloseNestedProject which is called by CloseChildren.\r\n    </summary>\r\n    <returns>S_OK</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.Close",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Close\">\r\n    <summary>\r\n    Return S_OK. Implementation of Closing a nested project is done in CloseNestedProject which is called by CloseChildren.\r\n    </summary>\r\n    <returns>S_OK</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int IsItemDirty(uint itemId, IntPtr punkDocData, out int pfDirty)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the hierarchy item changed.\r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of the hierarchy item contained in VSITEMID</param>\r\n    <param name=\"punkDocData\">Pointer to the IUnknown interface of the hierarchy item. </param>\r\n    <param name=\"pfDirty\">TRUE if the hierarchy item changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the hierarchy item changed.\r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of the hierarchy item contained in VSITEMID</param>\r\n    <param name=\"punkDocData\">Pointer to the IUnknown interface of the hierarchy item. </param>\r\n    <param name=\"pfDirty\">TRUE if the hierarchy item changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void RenameNestedProjectInParentProject(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.RenameNestedProjectInParentProject(System.String)\">\r\n    <summary>\r\n    Renames the project file in the parent project structure.\r\n    </summary>\r\n    <param name=\"label\">The new label.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.RenameNestedProjectInParentProject(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.RenameNestedProjectInParentProject(System.String)\">\r\n    <summary>\r\n    Renames the project file in the parent project structure.\r\n    </summary>\r\n    <param name=\"label\">The new label.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA1806:DoNotIgnoreMethodResults\", MessageId = \"Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)\")]\r\npublic override object GetIconHandle(bool open)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Gets the icon handle. It tries first the nested to get the icon handle. If that is not supported it will get it from\r\n    the image list of the nested if that is supported. If neither of these is supported a default image will be shown.\r\n    </summary>\r\n    <returns>An object representing the icon.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Gets the icon handle. It tries first the nested to get the icon handle. If that is not supported it will get it from\r\n    the image list of the nested if that is supported. If neither of these is supported a default image will be shown.\r\n    </summary>\r\n    <returns>An object representing the icon.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void OnRequestEdit(int dispid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.OnRequestEdit(System.Int32)\">\r\n    <summary>\r\n    Notifies a sink that a [requestedit] property is about to change and that the object is asking the sink how to proceed.\r\n    </summary>\r\n    <param name=\"dispid\">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.OnRequestEdit(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.OnRequestEdit(System.Int32)\">\r\n    <summary>\r\n    Notifies a sink that a [requestedit] property is about to change and that the object is asking the sink how to proceed.\r\n    </summary>\r\n    <param name=\"dispid\">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetProperty(int propId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Gets properties of a given node or of the hierarchy.\r\n    </summary>\r\n    <param name=\"propId\">Identifier of the hierarchy property</param>\r\n    <returns>It return an object which type is dependent on the propid.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetProperty(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Gets properties of a given node or of the hierarchy.\r\n    </summary>\r\n    <param name=\"propId\">Identifier of the hierarchy property</param>\r\n    <returns>It return an object which type is dependent on the propid.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void SaveNestedProjectItemInProjectFile(string newFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveNestedProjectItemInProjectFile(System.String)\">\r\n    <summary>\r\n    Saves the nested project information in the project file.\r\n    </summary>\r\n    <param name=\"newFileName\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveNestedProjectItemInProjectFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveNestedProjectItemInProjectFile(System.String)\">\r\n    <summary>\r\n    Saves the nested project information in the project file.\r\n    </summary>\r\n    <param name=\"newFileName\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetMkDocument\">\r\n    <summary>\r\n    Returns the moniker of the nested project.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetMkDocument",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetMkDocument\">\r\n    <summary>\r\n    Returns the moniker of the nested project.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void OnChanged(int dispid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.OnChanged(System.Int32)\">\r\n    <summary>\r\n    Notifies a sink that the [bindable] property specified by dispID has changed. \r\n    If dispID is DISPID_UNKNOWN, then multiple properties have changed together. \r\n    The client (owner of the sink) should then retrieve the current value of each property of interest from the object that generated the notification.\r\n    In our case we will care about the  VSLangProj80.VsProjPropId.VBPROJPROPID_FileName and update the changes in the parent project file.\r\n    </summary>\r\n    <param name=\"dispid\">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.OnChanged(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.OnChanged(System.Int32)\">\r\n    <summary>\r\n    Notifies a sink that the [bindable] property specified by dispID has changed. \r\n    If dispID is DISPID_UNKNOWN, then multiple properties have changed together. \r\n    The client (owner of the sink) should then retrieve the current value of each property of interest from the object that generated the notification.\r\n    In our case we will care about the  VSLangProj80.VsProjPropId.VBPROJPROPID_FileName and update the changes in the parent project file.\r\n    </summary>\r\n    <param name=\"dispid\">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class NestedProjectNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.NestedProjectNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class DeleteToken",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DeleteToken\">\r\n    <summary>\r\n    Storage classes for token to be deleted\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DeleteToken",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DeleteToken\">\r\n    <summary>\r\n    Storage classes for token to be deleted\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override int OnAfterOpenProject(IVsHierarchy hierarchy, int added)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectOpen.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class SolutionListenerForProjectOpen",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SolutionListenerForProjectOpen",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"The services created here will be disposed in the Dispose method of this type.\")]\r\npublic void AddService(Type serviceType, ServiceCreatorCallback callback, bool shouldDisposeServiceInstance)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(System.Type,Microsoft.VisualStudio.Project.OleServiceProvider.ServiceCreatorCallback,System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int QueryService(ref Guid guidService, ref Guid riid, out IntPtr ppvObject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"The services created here will be disposed in the Dispose method of this type.\")]\r\npublic void AddService(Type serviceType, object serviceInstance, bool shouldDisposeServiceInstance)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)\">\r\n    <summary>\r\n    Adds the given service to the service container.\r\n    </summary>\r\n    <param name=\"serviceType\">The type of the service to add.</param>\r\n    <param name=\"serviceInstance\">An instance of the service.</param>\r\n    <param name=\"shouldDisposeServiceInstance\">true if the Dipose of the service provider is allowed to dispose the sevice instance.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)\">\r\n    <summary>\r\n    Adds the given service to the service container.\r\n    </summary>\r\n    <param name=\"serviceType\">The type of the service to add.</param>\r\n    <param name=\"serviceInstance\">An instance of the service.</param>\r\n    <param name=\"shouldDisposeServiceInstance\">true if the Dipose of the service provider is allowed to dispose the sevice instance.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void RemoveService(Type serviceType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.RemoveService(System.Type)\">\r\n    <devdoc>\r\n    Removes the given service type from the service container.\r\n    </devdoc>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.RemoveService(System.Type)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.RemoveService(System.Type)\">\r\n    <devdoc>\r\n    Removes the given service type from the service container.\r\n    </devdoc>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OleServiceProvider\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.OleServiceProvider",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override bool EditComponent(ITypeDescriptorContext context, object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.PropertiesEditorLauncher.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)\">\r\n    <summary>\r\n    Launch the Project Properties Editor (properties pages)\r\n    </summary>\r\n    <returns>If we succeeded or not</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.PropertiesEditorLauncher.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.PropertiesEditorLauncher.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)\">\r\n    <summary>\r\n    Launch the Project Properties Editor (properties pages)\r\n    </summary>\r\n    <returns>If we succeeded or not</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class PropertiesEditorLauncher\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropertiesEditorLauncher\">\r\n    <summary>\r\n    This class is used to enable launching the project properties\r\n    editor from the Properties Browser.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.PropertiesEditorLauncher",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropertiesEditorLauncher\">\r\n    <summary>\r\n    This class is used to enable launching the project properties\r\n    editor from the Properties Browser.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"GetFrameworkPaths\")]\r\npublic virtual void Initialize(ProjectNode projectNode)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.Initialize(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual VsResolvedAssemblyPath[] Resolve(IEnumerable<string> assemblies)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.Resolve(System.Collections.Generic.IEnumerable{System.String})",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class DesignTimeAssemblyResolution",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public static class ProjectFileAttributeValue",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectFileAttributeValue",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int OnSelectionChanged(IVsHierarchy pHierOld, uint itemidOld, IVsMultiItemSelect pMISOld, ISelectionContainer pSCOld, IVsHierarchy pHierNew, uint itemidNew, IVsMultiItemSelect pMISNew, ISelectionContainer pSCNew)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.OnSelectionChanged(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Init()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.Init",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA1806:DoNotIgnoreMethodResults\", MessageId = \"Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.UnadviseSelectionEvents(System.UInt32)\")]\r\nprotected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SelectionListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SelectionListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnCmdUIContextChanged(uint dwCmdUICookie, int fActive)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.OnCmdUIContextChanged(System.UInt32,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnElementValueChanged(uint elementid, object varValueOld, object varValueNew)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.OnElementValueChanged(System.UInt32,System.Object,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SelectionListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SelectionListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public abstract class SelectionListener\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SelectionListener",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public int get_HelpFile(out string helpFile)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_HelpFile(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_MustUpdateBefore(out int mustUpdateBefore)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_MustUpdateBefore(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_CanonicalName(out string canonicalName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_CanonicalName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_Description(out string description)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_Description(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic int get_HelpContext(out uint helpContext)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_HelpContext(System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_Type(out System.Guid guidType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_Type(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_ReferredProject(out object unknownProject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_ReferredProject(System.Object@)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class BuildDependency\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildDependency",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual string GetRelationNameExtension()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationNameExtension\">\r\n    <summary>\r\n    Returns the 'extension' of the relational name\r\n    e.g. form1.resx returns .resx, form1.designer.cs returns .designer.cs\r\n    </summary>\r\n    <returns>The extension</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationNameExtension",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationNameExtension\">\r\n    <summary>\r\n    Returns the 'extension' of the relational name\r\n    e.g. form1.resx returns .resx, form1.designer.cs returns .designer.cs\r\n    </summary>\r\n    <returns>The extension</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetEditLabel\">\r\n    <summary>\r\n    Called by the shell to get the node caption when the user tries to rename from the GUI\r\n    </summary>\r\n    <returns>the node cation</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetEditLabel\">\r\n    <summary>\r\n    Called by the shell to get the node caption when the user tries to rename from the GUI\r\n    </summary>\r\n    <returns>the node cation</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int ParseCanonicalName(string name, out uint itemId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ParseCanonicalName(System.String,System.UInt32@)\">\r\n    <summary>\r\n    the canonicalName of an item is it's URL, or better phrased,\r\n    the persistence data we put into @RelPath, which is a relative URL\r\n    to the root project\r\n    returning the itemID from this means scanning the list\r\n    </summary>\r\n    <param name=\"name\"></param>\r\n    <param name=\"itemId\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ParseCanonicalName(System.String,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ParseCanonicalName(System.String,System.UInt32@)\">\r\n    <summary>\r\n    the canonicalName of an item is it's URL, or better phrased,\r\n    the persistence data we put into @RelPath, which is a relative URL\r\n    to the root project\r\n    returning the itemID from this means scanning the list\r\n    </summary>\r\n    <param name=\"name\"></param>\r\n    <param name=\"itemId\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SetEditLabel(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Called by the shell when a node has been renamed from the GUI\r\n    </summary>\r\n    <param name=\"label\"></param>\r\n    <returns>E_NOTIMPL</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Called by the shell when a node has been renamed from the GUI\r\n    </summary>\r\n    <param name=\"label\"></param>\r\n    <returns>E_NOTIMPL</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual string GetCanonicalName()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetCanonicalName\">\r\n    <summary>\r\n    Returns the Cannonical Name\r\n    </summary>\r\n    <returns>Cannonical Name</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetCanonicalName",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetCanonicalName\">\r\n    <summary>\r\n    Returns the Cannonical Name\r\n    </summary>\r\n    <returns>Cannonical Name</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider site)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object GetService(Type type)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetService(System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int IgnoreItemFileChanges(uint itemId, int ignoreFlag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.UInt32,System.Int32)\">\r\n    <summary>\r\n    Flag indicating that changes to a file can be ignored when item is saved or reloaded. \r\n    </summary>\r\n    <param name=\"itemId\">Specifies the item id from VSITEMID.</param>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.UInt32,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.UInt32,System.Int32)\">\r\n    <summary>\r\n    Flag indicating that changes to a file can be ignored when item is saved or reloaded. \r\n    </summary>\r\n    <param name=\"itemId\">Specifies the item id from VSITEMID.</param>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"vaIn\")]\r\nprotected virtual int ExecCommandThatDependsOnSelectedNodes(Guid cmdGroup, uint cmdId, uint cmdExecOpt, IntPtr vaIn, IntPtr vaOut, CommandOrigin commandOrigin, IList<HierarchyNode> selectedNodes, out bool handled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandThatDependsOnSelectedNodes(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)\">\r\n    <summary>\r\n    Executes a command that can only be executed once the whole selection is known.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <param name=\"selectedNodes\">The list of the selected nodes.</param>\r\n    <param name=\"handled\">An out parameter specifying that the command was handled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandThatDependsOnSelectedNodes(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandThatDependsOnSelectedNodes(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)\">\r\n    <summary>\r\n    Executes a command that can only be executed once the whole selection is known.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <param name=\"selectedNodes\">The list of the selected nodes.</param>\r\n    <param name=\"handled\">An out parameter specifying that the command was handled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"propid\")]\r\npublic void OnPropertyChanged(HierarchyNode node, int propid, uint flags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnPropertyChanged(Microsoft.VisualStudio.Project.HierarchyNode,System.Int32,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryDeleteItem(uint delItemOp, uint itemId, out int candelete)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryDeleteItem(System.UInt32,System.UInt32,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"vaIn\")]\r\nprotected virtual int ExecCommandIndependentOfSelection(Guid cmdGroup, uint cmdId, uint cmdExecOpt, IntPtr vaIn, IntPtr vaOut, CommandOrigin commandOrigin, out bool handled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandIndependentOfSelection(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Boolean@)\">\r\n    <summary>\r\n    Executes command that are independent of a selection.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <param name=\"handled\">An out parameter specifying that the command was handled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandIndependentOfSelection(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Boolean@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandIndependentOfSelection(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Boolean@)\">\r\n    <summary>\r\n    Executes command that are independent of a selection.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <param name=\"handled\">An out parameter specifying that the command was handled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Cmdexecopt\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"n\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"pva\")]\r\nprotected virtual int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Handles command execution.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"nCmdexecopt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"pvaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"pvaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Handles command execution.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"nCmdexecopt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"pvaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"pvaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DragLeave()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DragLeave",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode FindChildByProjectElement(ProjectElement node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.FindChildByProjectElement(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Finds a non virtual hierarchy item by its project element.\r\n    </summary>\r\n    <param name=\"node\">The Project element to find</param>\r\n    <returns>The node found</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.FindChildByProjectElement(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.FindChildByProjectElement(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Finds a non virtual hierarchy item by its project element.\r\n    </summary>\r\n    <param name=\"node\">The Project element to find</param>\r\n    <returns>The node found</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual int ShowInDesigner(IList<HierarchyNode> selectedNodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ShowInDesigner(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode})\">\r\n    <summary>\r\n    Handles the Show in Designer command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ShowInDesigner(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ShowInDesigner(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode})\">\r\n    <summary>\r\n    Handles the Show in Designer command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void OnItemAdded(HierarchyNode parent, HierarchyNode child)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnItemAdded(Microsoft.VisualStudio.Project.HierarchyNode,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"vaIn\")]\r\nprotected virtual int InternalExecCommand(Guid cmdGroup, uint cmdId, uint cmdExecOpt, IntPtr vaIn, IntPtr vaOut, CommandOrigin commandOrigin)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.InternalExecCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)\">\r\n    <summary>\r\n    The main entry point for command excection. Gets called from the IVsUIHierarchy and IOleCommandTarget methods.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.InternalExecCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.InternalExecCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)\">\r\n    <summary>\r\n    The main entry point for command excection. Gets called from the IVsUIHierarchy and IOleCommandTarget methods.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string GetRelationalName()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationalName\">\r\n    <summary>\r\n    Returns the relational name which is defined as the first part of the caption until indexof NameRelationSeparator\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationalName",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationalName\">\r\n    <summary>\r\n    Returns the relational name which is defined as the first part of the caption until indexof NameRelationSeparator\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Unused4()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused4",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Unused2()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused2",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"propid\")]\r\npublic virtual int SetProperty(int propid, object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetProperty(System.Int32,System.Object)\">\r\n    <summary>\r\n    Sets the value of a property for a given property id\r\n    </summary>\r\n    <param name=\"propid\">the property id of the property to be set</param>\r\n    <param name=\"value\">value of the property</param>\r\n    <returns>S_OK if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetProperty(System.Int32,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetProperty(System.Int32,System.Object)\">\r\n    <summary>\r\n    Sets the value of a property for a given property id\r\n    </summary>\r\n    <param name=\"propid\">the property id of the property to be set</param>\r\n    <param name=\"value\">value of the property</param>\r\n    <returns>S_OK if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Cmds\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"c\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"p\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"prg\")]\r\nprotected virtual int QueryStatusSelection(Guid cmdGroup, uint cCmds, OLECMD[] prgCmds, IntPtr pCmdText, CommandOrigin commandOrigin)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)\">\r\n    <summary>\r\n    Queries the object for the command status on a list of selected nodes.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group.</param>\r\n    <param name=\"cCmds\">The number of commands in the prgCmds array</param>\r\n    <param name=\"prgCmds\">A caller-allocated array of OLECMD structures that indicate the commands for which the caller requires status information. This method fills the cmdf member of each structure with values taken from the OLECMDF enumeration</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>\r\n    <param name=\"commandOrigin\">Specifies the origin of the command. Either it was called from the QueryStatusCommand on IVsUIHierarchy or from the IOleCommandTarget</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)\">\r\n    <summary>\r\n    Queries the object for the command status on a list of selected nodes.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group.</param>\r\n    <param name=\"cCmds\">The number of commands in the prgCmds array</param>\r\n    <param name=\"prgCmds\">A caller-allocated array of OLECMD structures that indicate the commands for which the caller requires status information. This method fills the cmdf member of each structure with values taken from the OLECMDF enumeration</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>\r\n    <param name=\"commandOrigin\">Specifies the origin of the command. Either it was called from the QueryStatusCommand on IVsUIHierarchy or from the IOleCommandTarget</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject pDataObject, uint dwEffect, out int fCancelDrop)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"p\")]\r\nprotected virtual int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Handles command status on a node. Should be overridden by descendant nodes. If a command cannot be handled then the base should be called.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>\r\n    <param name=\"cmd\">The command to query status for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>\r\n    <param name=\"result\">An out parameter specifying the QueryStatusResult of the command.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Handles command status on a node. Should be overridden by descendant nodes. If a command cannot be handled then the base should be called.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>\r\n    <param name=\"cmd\">The command to query status for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>\r\n    <param name=\"result\">An out parameter specifying the QueryStatusResult of the command.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\")]\r\nprotected virtual int AddNewFolder()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddNewFolder\">\r\n    <summary>\r\n    Add a new Folder to the project hierarchy.\r\n    </summary>\r\n    <returns>S_OK if succeeded, otherwise an error</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AddNewFolder",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddNewFolder\">\r\n    <summary>\r\n    Add a new Folder to the project hierarchy.\r\n    </summary>\r\n    <returns>S_OK if succeeded, otherwise an error</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStatus(ref Guid guidCmdGroup, uint cCmds, OLECMD[] prgCmds, IntPtr pCmdText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)\">\r\n    <summary>\r\n    Queries the object for the command status\r\n    </summary>\r\n    <remarks>we only support one command at a time, i.e. the first member in the OLECMD array</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)\">\r\n    <summary>\r\n    Queries the object for the command status\r\n    </summary>\r\n    <remarks>we only support one command at a time, i.e. the first member in the OLECMD array</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\">Is the Dispose called by some internal member, or it is called by from GC.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\">Is the Dispose called by some internal member, or it is called by from GC.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual QueryStatusResult QueryStatusCommandFromOleCommandTarget(Guid cmdGroup, uint cmd, out bool handled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusCommandFromOleCommandTarget(System.Guid,System.UInt32,System.Boolean@)\">\r\n    <summary>\r\n    Handles menus originating from IOleCommandTarget.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"handled\">Specifies whether the menu was handled.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusCommandFromOleCommandTarget(System.Guid,System.UInt32,System.Boolean@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusCommandFromOleCommandTarget(System.Guid,System.UInt32,System.Boolean@)\">\r\n    <summary>\r\n    Handles menus originating from IOleCommandTarget.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"handled\">Specifies whether the menu was handled.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int IsItemDirty(uint itemId, IntPtr docData, out int isDirty)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the hierarchy item changed. \r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of the hierarchy item contained in VSITEMID.</param>\r\n    <param name=\"docData\">Pointer to the IUnknown interface of the hierarchy item.</param>\r\n    <param name=\"isDirty\">true if the hierarchy item changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the hierarchy item changed. \r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of the hierarchy item contained in VSITEMID.</param>\r\n    <param name=\"docData\">Pointer to the IUnknown interface of the hierarchy item.</param>\r\n    <param name=\"isDirty\">true if the hierarchy item changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddChild(HierarchyNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddChild(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    AddChild - add a node, sorted in the right location.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AddChild(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddChild(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    AddChild - add a node, sorted in the right location.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject pDataObject, uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Re\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"ReDraw\")]\r\npublic virtual void ReDraw(UIHierarchyElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReDraw(Microsoft.VisualStudio.Project.UIHierarchyElement)\">\r\n    <summary>\r\n    Causes the hierarchy to be redrawn.\r\n    </summary>\r\n    <param name=\"element\">Used by the hierarchy to decide which element to redraw</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ReDraw(Microsoft.VisualStudio.Project.UIHierarchyElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReDraw(Microsoft.VisualStudio.Project.UIHierarchyElement)\">\r\n    <summary>\r\n    Causes the hierarchy to be redrawn.\r\n    </summary>\r\n    <param name=\"element\">Used by the hierarchy to decide which element to redraw</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetDropInfo(out uint pdwOKEffects, out Microsoft.VisualStudio.OLE.Interop.IDataObject ppDataObject, out IDropSource ppDropSource)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void RemoveChild(HierarchyNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.RemoveChild(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Removes a node from the hierarchy.\r\n    </summary>\r\n    <param name=\"node\">The node to remove.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.RemoveChild(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.RemoveChild(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Removes a node from the hierarchy.\r\n    </summary>\r\n    <param name=\"node\">The node to remove.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\"), SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"InCurrent\")]\r\nprotected virtual bool DisableCmdInCurrentMode(Guid commandGroup, uint command)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCmdInCurrentMode(System.Guid,System.UInt32)\">\r\n    <summary>\r\n    Disables commands when the project is in run/break mode.\r\n    </summary>/\r\n    <param name=\"commandGroup\">Unique identifier of the command group</param>\r\n    <param name=\"command\">The command to be executed.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCmdInCurrentMode(System.Guid,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCmdInCurrentMode(System.Guid,System.UInt32)\">\r\n    <summary>\r\n    Disables commands when the project is in run/break mode.\r\n    </summary>/\r\n    <param name=\"commandGroup\">Unique identifier of the command group</param>\r\n    <param name=\"command\">The command to be executed.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SetGuidProperty(uint itemId, int propid, ref Guid guid)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProperty(uint itemId, int propId, out object propVal)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetProperty(System.UInt32,System.Int32,System.Object@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Exec(ref Guid guidCmdGroup, uint nCmdId, uint nCmdExecOpt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    CommandTarget.Exec is called for most major operations if they are NOT UI based. Otherwise IVSUInode::exec is called first\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    CommandTarget.Exec is called for most major operations if they are NOT UI based. Otherwise IVSUInode::exec is called first\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CreatePropertiesObject\">\r\n    <summary>\r\n    Creates an object derived from NodeProperties that will be used to expose properties\r\n    spacific for this object to the property browser.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CreatePropertiesObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CreatePropertiesObject\">\r\n    <summary>\r\n    Creates an object derived from NodeProperties that will be used to expose properties\r\n    spacific for this object to the property browser.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Unused1()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused1",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual int AfterSaveItemAs(IntPtr docData, string newName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AfterSaveItemAs(System.IntPtr,System.String)\">\r\n    <summary>\r\n    Performs save as operation for an item after the save as dialog has been processed.\r\n    </summary>\r\n    <param name=\"docData\">A pointer to the rdt</param>\r\n    <param name=\"newName\">The newName of the item</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AfterSaveItemAs(System.IntPtr,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AfterSaveItemAs(System.IntPtr,System.String)\">\r\n    <summary>\r\n    Performs save as operation for an item after the save as dialog has been processed.\r\n    </summary>\r\n    <param name=\"docData\">A pointer to the rdt</param>\r\n    <param name=\"newName\">The newName of the item</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object GetIconHandle(bool open)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Return an iconhandle\r\n    </summary>\r\n    <param name=\"open\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Return an iconhandle\r\n    </summary>\r\n    <param name=\"open\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DeleteItem(uint delItemOp, uint itemId)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DeleteItem(System.UInt32,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Remove(bool removeFromStorage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Removes items from the hierarchy. Project overwrites this\r\n    </summary>\r\n    <param name=\"removeFromStorage\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Remove(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Removes items from the hierarchy. Project overwrites this\r\n    </summary>\r\n    <param name=\"removeFromStorage\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AdviseHierarchyEvents(IVsHierarchyEvents sink, out uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"propid\")]\r\npublic virtual int GetGuidProperty(int propid, out Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Get a guid property\r\n    </summary>\r\n    <param name=\"propid\">property id for the guid property requested</param>\r\n    <param name=\"guid\">the requested guid</param>\r\n    <returns>S_OK if succeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Get a guid property\r\n    </summary>\r\n    <param name=\"propid\">property id for the guid property requested</param>\r\n    <param name=\"guid\">the requested guid</param>\r\n    <returns>S_OK if succeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnDropNotify(int fDropped, uint dwEffects)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnDropNotify(System.Int32,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Close()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Close",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\")]\r\npublic virtual int SaveItem(VSSAVEFLAGS saveFlag, string silentSaveAsName, uint itemid, IntPtr docData, out int cancelled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Saves the hierarchy item to disk. \r\n    </summary>\r\n    <param name=\"saveFlag\">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>\r\n    <param name=\"silentSaveAsName\">New filename when doing silent save as</param>\r\n    <param name=\"itemid\">Item identifier of the hierarchy item saved from VSITEMID.</param>\r\n    <param name=\"docData\">Item identifier of the hierarchy item saved from VSITEMID.</param>\r\n    <param name=\"cancelled\">[out] true if the save action was canceled.</param>\r\n    <returns>[out] true if the save action was canceled.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Saves the hierarchy item to disk. \r\n    </summary>\r\n    <param name=\"saveFlag\">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>\r\n    <param name=\"silentSaveAsName\">New filename when doing silent save as</param>\r\n    <param name=\"itemid\">Item identifier of the hierarchy item saved from VSITEMID.</param>\r\n    <param name=\"docData\">Item identifier of the hierarchy item saved from VSITEMID.</param>\r\n    <param name=\"cancelled\">[out] true if the save action was canceled.</param>\r\n    <returns>[out] true if the save action was canceled.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStatusCommand(uint itemId, ref Guid guidCmdGroup, uint cCmds, OLECMD[] cmds, IntPtr pCmdText)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void OnItemsAppended(HierarchyNode parent)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnItemsAppended(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Unused0()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused0",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int ExecCommand(uint itemId, ref Guid guidCmdGroup, uint nCmdId, uint nCmdExecOpt, IntPtr pvain, IntPtr p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void OnItemDeleted()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnItemDeleted",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int ReloadItem(uint itemId, uint reserved)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32,System.UInt32)\">\r\n    <summary>\r\n    Called to reload a project item. \r\n    </summary>\r\n    <param name=\"itemId\">Specifies itemid from VSITEMID.</param>\r\n    <param name=\"reserved\">Reserved.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32,System.UInt32)\">\r\n    <summary>\r\n    Called to reload a project item. \r\n    </summary>\r\n    <param name=\"itemId\">Specifies itemid from VSITEMID.</param>\r\n    <param name=\"reserved\">Reserved.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual int ExcludeFromProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeFromProject\">\r\n    <summary>\r\n    Handles the exclude from project command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeFromProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeFromProject\">\r\n    <summary>\r\n    Handles the exclude from project command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"propid\")]\r\npublic virtual int SetGuidProperty(int propid, ref Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Set a guid property.\r\n    </summary>\r\n    <param name=\"propid\">property id of the guid property to be set</param>\r\n    <param name=\"guid\">the guid to be set</param>\r\n    <returns>E_NOTIMPL</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Set a guid property.\r\n    </summary>\r\n    <param name=\"propid\">property id of the guid property to be set</param>\r\n    <param name=\"guid\">the guid to be set</param>\r\n    <returns>E_NOTIMPL</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject pDataObject, uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void DoDefaultAction()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DoDefaultAction\">\r\n    <summary>\r\n    Overwritten in subclasses\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DoDefaultAction",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DoDefaultAction\">\r\n    <summary>\r\n    Overwritten in subclasses\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual int AddItemToHierarchy(HierarchyAddType addType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AddItemToHierarchy(Microsoft.VisualStudio.Project.HierarchyAddType)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Overwrite this method to tell that you support the default icon for this node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Overwrite this method to tell that you support the default icon for this node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Mk\")]\r\npublic virtual string GetMkDocument()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetMkDocument\">\r\n    <summary>\r\n    This method is called by the interface method GetMkDocument to specify the item moniker.\r\n    </summary>\r\n    <returns>The moniker for this item</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetMkDocument",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetMkDocument\">\r\n    <summary>\r\n    This method is called by the interface method GetMkDocument to specify the item moniker.\r\n    </summary>\r\n    <returns>The moniker for this item</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected void CloseDocumentWindow(HierarchyNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CloseDocumentWindow(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Close open document frame for a specific node.\r\n    </summary> \r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CloseDocumentWindow(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CloseDocumentWindow(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Close open document frame for a specific node.\r\n    </summary> \r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DragOver(uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCanonicalName(uint itemId, out string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetCanonicalName(System.UInt32,System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual int ShowContextMenu(int menuId, Guid menuGroup, POINTS points)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.POINTS)\">\r\n    <summary>\r\n    Shows the specified context menu at a specified location.\r\n    </summary>\r\n    <param name=\"menuId\">The context menu ID.</param>\r\n    <param name=\"groupGuid\">The GUID of the menu group.</param>\r\n    <param name=\"points\">The location at which to show the menu.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.POINTS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.POINTS)\">\r\n    <summary>\r\n    Shows the specified context menu at a specified location.\r\n    </summary>\r\n    <param name=\"menuId\">The context menu ID.</param>\r\n    <param name=\"groupGuid\">The GUID of the menu group.</param>\r\n    <param name=\"points\">The location at which to show the menu.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1720:IdentifiersShouldNotContainTypeNames\", MessageId = \"pointer\")]\r\nprotected virtual int DisplayContextMenu(IList<HierarchyNode> selectedNodes, IntPtr pointerToVariant)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisplayContextMenu(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.IntPtr)\">\r\n    <summary>\r\n    Displays the context menu.\r\n    </summary>\r\n    <param name=\"selectedNodes\">list of selected nodes.</param>\r\n    <param name=\"pointerToVariant\">contains the location (x,y) at which to show the menu.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DisplayContextMenu(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisplayContextMenu(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.IntPtr)\">\r\n    <summary>\r\n    Displays the context menu.\r\n    </summary>\r\n    <param name=\"selectedNodes\">list of selected nodes.</param>\r\n    <param name=\"pointerToVariant\">contains the location (x,y) at which to show the menu.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetNestedHierarchy(uint itemId, ref Guid iidHierarchyNested, out IntPtr ppHierarchyNested, out uint pItemId)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\"), System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\")]\r\npublic virtual object GetProperty(int propId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Returns a property object based on a property id \r\n    </summary>\r\n    <param name=\"propId\">the property id of the property requested</param>\r\n    <returns>the property object requested</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetProperty(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Returns a property object based on a property id \r\n    </summary>\r\n    <param name=\"propId\">the property id of the property requested</param>\r\n    <returns>the property object requested</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Multi\")]\r\nprotected virtual QueryStatusResult DisableCommandOnNodesThatDoNotSupportMultiSelection(Guid cmdGroup, uint cmd, IList<HierarchyNode> selectedNodes, out bool handled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCommandOnNodesThatDoNotSupportMultiSelection(System.Guid,System.UInt32,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)\">\r\n    <summary>\r\n    Specifies which command does not support multiple selection and should be disabled if multi-selected.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"selectedNodes\">The list of selected nodes.</param>\r\n    <param name=\"handled\">Specifies whether the menu was handled.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCommandOnNodesThatDoNotSupportMultiSelection(System.Guid,System.UInt32,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCommandOnNodesThatDoNotSupportMultiSelection(System.Guid,System.UInt32,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)\">\r\n    <summary>\r\n    Specifies which command does not support multiple selection and should be disabled if multi-selected.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"selectedNodes\">The list of selected nodes.</param>\r\n    <param name=\"handled\">Specifies whether the menu was handled.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetGuidProperty(uint itemId, int propid, out Guid guid)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"p\")]\r\nprotected virtual QueryStatusResult QueryStatusSelectionOnNodes(IList<HierarchyNode> selectedNodes, Guid cmdGroup, uint cmd, IntPtr pCmdText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelectionOnNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Guid,System.UInt32,System.IntPtr)\">\r\n    <summary>\r\n    Queries the selected nodes for the command status. \r\n    A command is supported iff any nodes supports it.\r\n    A command is enabled iff all nodes enable it.\r\n    A command is invisible iff any node sets invisibility.\r\n    A command is latched only if all are latched.\r\n    </summary>\r\n    <param name=\"selectedNodes\">The list of selected nodes.</param>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group.</param>\r\n    <param name=\"cmd\">The command id to query for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>\r\n    <returns>Retuns the result of the query on the slected nodes.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelectionOnNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Guid,System.UInt32,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelectionOnNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Guid,System.UInt32,System.IntPtr)\">\r\n    <summary>\r\n    Queries the selected nodes for the command status. \r\n    A command is supported iff any nodes supports it.\r\n    A command is enabled iff all nodes enable it.\r\n    A command is invisible iff any node sets invisibility.\r\n    A command is latched only if all are latched.\r\n    </summary>\r\n    <param name=\"selectedNodes\">The list of selected nodes.</param>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group.</param>\r\n    <param name=\"cmd\">The command id to query for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>\r\n    <returns>Retuns the result of the query on the slected nodes.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetSite(out Microsoft.VisualStudio.OLE.Interop.IServiceProvider site)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Reloadable\")]\r\npublic virtual int IsItemReloadable(uint itemId, out int isReloadable)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable(System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Called to determine whether a project item is reloadable before calling ReloadItem. \r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of an item in the hierarchy. Valid values are VSITEMID_NIL, VSITEMID_ROOT and VSITEMID_SELECTION.</param>\r\n    <param name=\"isReloadable\">A flag indicating that the project item is reloadable (1 for reloadable, 0 for non-reloadable).</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable(System.UInt32,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable(System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Called to determine whether a project item is reloadable before calling ReloadItem. \r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of an item in the hierarchy. Valid values are VSITEMID_NIL, VSITEMID_ROOT and VSITEMID_SELECTION.</param>\r\n    <param name=\"isReloadable\">A flag indicating that the project item is reloadable (1 for reloadable, 0 for non-reloadable).</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetAutomationObject\">\r\n    <summary>\r\n    Returns an automation object representing this node\r\n    </summary>\r\n    <returns>The automation object</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetAutomationObject\">\r\n    <summary>\r\n    Returns an automation object representing this node\r\n    </summary>\r\n    <returns>The automation object</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2233:OperationsShouldNotOverflow\", MessageId = \"cookie-1\")]\r\npublic virtual int UnadviseHierarchyEvents(uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.UnadviseHierarchyEvents(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Unused3()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused3",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryClose(out int fCanClose)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryClose(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void OnInvalidateItems(HierarchyNode parent)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnInvalidateItems(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int SetProperty(uint itemId, int propid, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetProperty(System.UInt32,System.Int32,System.Object)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class HierarchyNode\r\n//, IVsBuildStatusCallback \r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.HierarchyNode\">\r\n    <summary>\r\n    An object that deals with user interaction via a GUI in the form a hierarchy: a parent node with zero or more child nodes, each of which\r\n    can itself be a hierarchy.  \r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.HierarchyNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.HierarchyNode\">\r\n    <summary>\r\n    An object that deals with user interaction via a GUI in the form a hierarchy: a parent node with zero or more child nodes, each of which\r\n    can itself be a hierarchy.  \r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Id": "N:Microsoft.VisualStudio.Project",
      "XmlDocumentation": ""
    },
    {
      "Classes": [],
      "Id": "N:MicrosoftIT.DocProject.Templates.Projects.DocProject",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override void AddFileFromTemplate(string source, string target)",
                "XmlDocumentation": ""
              },
              "Id": "M:MicrosoftIT.DocProject.DocProjectNode.AddFileFromTemplate(System.String,System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class DocProjectNode",
            "XmlDocumentation": ""
          },
          "Id": "T:MicrosoftIT.DocProject.DocProjectNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override void Initialize()",
                "XmlDocumentation": "<member name=\"M:MicrosoftIT.DocProject.DocProjectPackage.Initialize\">\r\n    <summary>\r\n    Initialization of the package; this method is called right after the package is sited, so this is the place\r\n    where you can put all the initialization code that rely on services provided by VisualStudio.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:MicrosoftIT.DocProject.DocProjectPackage.Initialize",
              "XmlDocumentation": "<member name=\"M:MicrosoftIT.DocProject.DocProjectPackage.Initialize\">\r\n    <summary>\r\n    Initialization of the package; this method is called right after the package is sited, so this is the place\r\n    where you can put all the initialization code that rely on services provided by VisualStudio.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public sealed class DocProjectPackage\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:MicrosoftIT.DocProject.DocProjectPackage\">\r\n     <summary>\r\n     This is the class that implements the package exposed by this assembly.\r\n    \r\n     The minimum requirement for a class to be considered a valid package for Visual Studio\r\n     is to implement the IVsPackage interface and register itself with the shell.\r\n     This package uses the helper classes defined inside the Managed Package Framework (MPF)\r\n     to do it: it derives from the Package class that provides the implementation of the \r\n     IVsPackage interface and uses the registration attributes defined in the framework to \r\n     register itself and its components with the shell.\r\n     </summary>\r\n</member>\r\n"
          },
          "Id": "T:MicrosoftIT.DocProject.DocProjectPackage",
          "XmlDocumentation": "<member name=\"T:MicrosoftIT.DocProject.DocProjectPackage\">\r\n     <summary>\r\n     This is the class that implements the package exposed by this assembly.\r\n    \r\n     The minimum requirement for a class to be considered a valid package for Visual Studio\r\n     is to implement the IVsPackage interface and register itself with the shell.\r\n     This package uses the helper classes defined inside the Managed Package Framework (MPF)\r\n     to do it: it derives from the Package class that provides the implementation of the \r\n     IVsPackage interface and uses the registration attributes defined in the framework to \r\n     register itself and its components with the shell.\r\n     </summary>\r\n</member>\r\n"
        }
      ],
      "Id": "N:MicrosoftIT.DocProject",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override EnvDTE.Window Open(string viewKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Open(System.String)\">\r\n    <summary>\r\n    Not implemented. If called throws invalid operation exception.\r\n    </summary>\r\n    <param name=\"viewKind\"> A Constants. vsViewKind indicating the type of view to use.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Open(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Open(System.String)\">\r\n    <summary>\r\n    Not implemented. If called throws invalid operation exception.\r\n    </summary>\r\n    <param name=\"viewKind\"> A Constants. vsViewKind indicating the type of view to use.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void Delete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Delete\">\r\n    <summary>\r\n    Not implemented. If called throws invalid operation exception.\r\n    </summary>\t\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Delete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Delete\">\r\n    <summary>\r\n    Not implemented. If called throws invalid operation exception.\r\n    </summary>\t\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OAReferenceItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceItem\">\r\n    <summary>\r\n    Represents the automation object equivalent to a ReferenceNode object\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAReferenceItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceItem\">\r\n    <summary>\r\n    Represents the automation object equivalent to a ReferenceNode object\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual object get_Extender(string ExtenderName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.get_Extender(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Remove()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Remove",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class OAReferenceBase<RefType>\r\n    where RefType : ReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1\">\r\n    <summary>\r\n    Represents the automation equivalent of ReferenceNode\r\n    </summary>\r\n    <typeparam name=\"RefType\"></typeparam>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1\">\r\n    <summary>\r\n    Represents the automation equivalent of ReferenceNode\r\n    </summary>\r\n    <typeparam name=\"RefType\"></typeparam>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual bool get_IsOpen(string viewKind)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_IsOpen(System.String)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_IsOpen(System.String)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_IsOpen(System.String)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Remove()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Remove\">\r\n    <summary>\r\n    Removes the project item from hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Remove",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Remove\">\r\n    <summary>\r\n    Removes the project item from hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Window Open(string ViewKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Open(System.String)\">\r\n    <summary>\r\n    Opens the project item in the specified view. Not implemented because this abstract class dont know what to open\r\n    </summary>\r\n    <param name=\"ViewKind\">Specifies the view kind in which to open the item</param>\r\n    <returns>Window object</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Open(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Open(System.String)\">\r\n    <summary>\r\n    Opens the project item in the specified view. Not implemented because this abstract class dont know what to open\r\n    </summary>\r\n    <param name=\"ViewKind\">Specifies the view kind in which to open the item</param>\r\n    <returns>Window object</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object get_Extender(string extenderName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_Extender(System.String)\">\r\n    <summary>\r\n    Gets the requested Extender if it is available for this object\r\n    </summary>\r\n    <param name=\"extenderName\">The name of the extender.</param>\r\n    <returns>The extender object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_Extender(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_Extender(System.String)\">\r\n    <summary>\r\n    Gets the requested Extender if it is available for this object\r\n    </summary>\r\n    <param name=\"extenderName\">The name of the extender.</param>\r\n    <returns>The extender object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void ExpandView()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExpandView\">\r\n    <summary>\r\n    Expands the view of Solution Explorer to show project items. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExpandView",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExpandView\">\r\n    <summary>\r\n    Expands the view of Solution Explorer to show project items. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Save(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Save(System.String)\">\r\n    <summary>\r\n    Saves the project item. \r\n    </summary>\r\n    <param name=\"fileName\">The name with which to save the project or project item.</param>\r\n    <remarks>Implemented by subclasses.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Save(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Save(System.String)\">\r\n    <summary>\r\n    Saves the project item. \r\n    </summary>\r\n    <param name=\"fileName\">The name with which to save the project or project item.</param>\r\n    <remarks>Implemented by subclasses.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string get_FileNames(short index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_FileNames(System.Int16)\">\r\n    <summary>\r\n    Gets the full path and names of the files associated with a project item.\r\n    </summary>\r\n    <param name=\"index\"> The index of the item</param>\r\n    <returns>The full path of the associated item</returns>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">Is thrown if index is not one</exception>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_FileNames(System.Int16)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_FileNames(System.Int16)\">\r\n    <summary>\r\n    Gets the full path and names of the files associated with a project item.\r\n    </summary>\r\n    <param name=\"index\"> The index of the item</param>\r\n    <returns>The full path of the associated item</returns>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">Is thrown if index is not one</exception>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Delete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Delete\">\r\n    <summary>\r\n    Removes the item from its project and its storage. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Delete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Delete\">\r\n    <summary>\r\n    Removes the item from its project and its storage. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool SaveAs(string newFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"newFileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten.</param>\r\n    <returns>true if save was successful</returns>\r\n    <remarks>This method is implemented on subclasses.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SaveAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"newFileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten.</param>\r\n    <returns>true if save was successful</returns>\r\n    <remarks>This method is implemented on subclasses.</remarks>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OAProjectItem<T>\r\n    where T : HierarchyNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void set_IndexedValue(object index1, object index2, object index3, object index4, object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)\">\r\n    <summary>\r\n    Sets the value of the property at the specified index.\r\n    </summary>\r\n    <param name=\"index1\">The index of the item to set.</param>\r\n    <param name=\"index2\">Reserved for future use.</param>\r\n    <param name=\"index3\">Reserved for future use.</param>\r\n    <param name=\"index4\">Reserved for future use.</param>\r\n    <param name=\"value\">The value to set.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)\">\r\n    <summary>\r\n    Sets the value of the property at the specified index.\r\n    </summary>\r\n    <param name=\"index1\">The index of the item to set.</param>\r\n    <param name=\"index2\">Reserved for future use.</param>\r\n    <param name=\"index3\">Reserved for future use.</param>\r\n    <param name=\"index4\">Reserved for future use.</param>\r\n    <param name=\"value\">The value to set.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public object get_IndexedValue(object index1, object index2, object index3, object index4)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)\">\r\n    <summary>\r\n    Returns one element of a list. \r\n    </summary>\r\n    <param name=\"index1\">The index of the item to display.</param>\r\n    <param name=\"index2\">The index of the item to display. Reserved for future use.</param>\r\n    <param name=\"index3\">The index of the item to display. Reserved for future use.</param>\r\n    <param name=\"index4\">The index of the item to display. Reserved for future use.</param>\r\n    <returns>The value of a property</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)\">\r\n    <summary>\r\n    Returns one element of a list. \r\n    </summary>\r\n    <param name=\"index1\">The index of the item to display.</param>\r\n    <param name=\"index2\">The index of the item to display. Reserved for future use.</param>\r\n    <param name=\"index3\">The index of the item to display. Reserved for future use.</param>\r\n    <param name=\"index4\">The index of the item to display. Reserved for future use.</param>\r\n    <returns>The value of a property</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void let_Value(object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.let_Value(System.Object)\">\r\n    <summary>\r\n    Setter function to set properties values. \r\n    </summary>\r\n    <param name=\"value\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperty.let_Value(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.let_Value(System.Object)\">\r\n    <summary>\r\n    Setter function to set properties values. \r\n    </summary>\r\n    <param name=\"value\"></param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OAProperty\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProperty",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class OAProjectReference\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProjectReference\">\r\n    <summary>\r\n    Represents a project reference of the solution\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProjectReference",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProjectReference\">\r\n    <summary>\r\n    Represents a project reference of the solution\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class OAFolderItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAFolderItem\">\r\n    <summary>\r\n    Represents an automation object for a folder in a project\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAFolderItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAFolderItem\">\r\n    <summary>\r\n    Represents an automation object for a folder in a project\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual void OnDesignTimeOutputDeleted(string outputMoniker)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OABuildManager.OnDesignTimeOutputDeleted(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void OnDesignTimeOutputDirty(string outputMoniker)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OABuildManager.OnDesignTimeOutputDirty(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string BuildDesignTimeOutput(string bstrOutputMoniker)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OABuildManager.BuildDesignTimeOutput(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OABuildManager",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OABuildManager",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual void Save(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.Save(System.String)\">\r\n    <summary>\r\n    Saves the project\r\n    </summary>\r\n    <param name=\"fileName\">The file name of the project</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>        \r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.Save(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.Save(System.String)\">\r\n    <summary>\r\n    Saves the project\r\n    </summary>\r\n    <param name=\"fileName\">The file name of the project</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>        \r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Delete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.Delete\">\r\n    <summary>\r\n    Removes the project from the current solution. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.Delete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.Delete\">\r\n    <summary>\r\n    Removes the project from the current solution. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void SaveAs(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project. \r\n    </summary>\r\n    <param name=\"fileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>        \r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.SaveAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project. \r\n    </summary>\r\n    <param name=\"fileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>        \r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object get_Extender(string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.get_Extender(System.String)\">\r\n    <summary>\r\n    Gets the requested Extender object if it is available for this object.\r\n    </summary>\r\n    <param name=\"name\">The name of the extender object.</param>\r\n    <returns>An Extender object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.get_Extender(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.get_Extender(System.String)\">\r\n    <summary>\r\n    Gets the requested Extender object if it is available for this object.\r\n    </summary>\r\n    <param name=\"name\">The name of the extender object.</param>\r\n    <returns>An Extender object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void NotifyPropertiesDelete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.NotifyPropertiesDelete\">\r\n    <summary>\r\n    Microsoft Internal Use Only. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.NotifyPropertiesDelete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.NotifyPropertiesDelete\">\r\n    <summary>\r\n    Microsoft Internal Use Only. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OAProject\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProject",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public Reference Item(object index)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.Item(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public Reference AddActiveX(string bstrTypeLibGuid, int lMajorVer, int lMinorVer, int lLocaleId, string bstrWrapperTool)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.AddActiveX(System.String,System.Int32,System.Int32,System.Int32,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public Reference AddProject(EnvDTE.Project project)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.AddProject(EnvDTE.Project)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public Reference Add(string bstrPath)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.Add(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public IEnumerator GetEnumerator()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.GetEnumerator",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public Reference Find(string bstrIdentity)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.Find(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAReferences\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferences\">\r\n    <summary>\r\n    Represents the automation object for the equivalent ReferenceContainerNode object\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAReferences",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferences\">\r\n    <summary>\r\n    Represents the automation object for the equivalent ReferenceContainerNode object\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class OAReferenceFolderItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem\">\r\n    <summary>\r\n    Contains OAReferenceItem objects \r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem\">\r\n    <summary>\r\n    Contains OAReferenceItem objects \r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class OAComReference\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAComReference",
          "XmlDocumentation": ""
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class OAAssemblyReference\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override EnvDTE.ProjectItem AddFromTemplate(string fileName, string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new project item from an existing item template file and adds it to the project. \r\n    </summary>\r\n    <param name=\"fileName\">The full path and file name of the template project file.</param>\r\n    <param name=\"name\">The file name to use for the new project item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromTemplate(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new project item from an existing item template file and adds it to the project. \r\n    </summary>\r\n    <param name=\"fileName\">The full path and file name of the template project file.</param>\r\n    <param name=\"name\">The file name to use for the new project item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\")]\r\nprotected virtual EnvDTE.ProjectItem EvaluateAddResult(VSADDRESULT result, string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.EvaluateAddResult(Microsoft.VisualStudio.Shell.Interop.VSADDRESULT,System.String)\">\r\n    <summary>\r\n    Evaluates the result of an add operation.\r\n    </summary>\r\n    <param name=\"result\">The <paramref name=\"VSADDRESULT\"/> returned by the Add methods</param>\r\n    <param name=\"path\">The full path of the item added.</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.EvaluateAddResult(Microsoft.VisualStudio.Shell.Interop.VSADDRESULT,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.EvaluateAddResult(Microsoft.VisualStudio.Shell.Interop.VSADDRESULT,System.String)\">\r\n    <summary>\r\n    Evaluates the result of an add operation.\r\n    </summary>\r\n    <param name=\"result\">The <paramref name=\"VSADDRESULT\"/> returned by the Add methods</param>\r\n    <param name=\"path\">The full path of the item added.</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.ProjectItem AddFromFile(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFile(System.String)\">\r\n    <summary>\r\n    Adds a project item from a file that is installed in a project directory structure. \r\n    </summary>\r\n    <param name=\"fileName\">The file name of the item to add as a project item. </param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFile(System.String)\">\r\n    <summary>\r\n    Adds a project item from a file that is installed in a project directory structure. \r\n    </summary>\r\n    <param name=\"fileName\">The file name of the item to add as a project item. </param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual EnvDTE.ProjectItem AddItem(string path, VSADDITEMOPERATION op)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddItem(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION)\">\r\n    <summary>\r\n    Adds an item to the project.\r\n    </summary>\r\n    <param name=\"path\">The full path of the item to add.</param>\r\n    <param name=\"op\">The <paramref name=\"VSADDITEMOPERATION\"/> to use when adding the item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddItem(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddItem(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION)\">\r\n    <summary>\r\n    Adds an item to the project.\r\n    </summary>\r\n    <param name=\"path\">The full path of the item to add.</param>\r\n    <param name=\"op\">The <paramref name=\"VSADDITEMOPERATION\"/> to use when adding the item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override ProjectItem AddFolder(string name, string kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFolder(System.String,System.String)\">\r\n    <summary>\r\n    Adds a folder to the collection of ProjectItems with the given name.\r\n    \r\n    The kind must be null, empty string, or the string value of vsProjectItemKindPhysicalFolder.\r\n    Virtual folders are not supported by this implementation.\r\n    </summary>\r\n    <param name=\"name\">The name of the new folder to add</param>\r\n    <param name=\"kind\">A string representing a Guid of the folder kind.</param>\r\n    <returns>A ProjectItem representing the newly added folder.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFolder(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFolder(System.String,System.String)\">\r\n    <summary>\r\n    Adds a folder to the collection of ProjectItems with the given name.\r\n    \r\n    The kind must be null, empty string, or the string value of vsProjectItemKindPhysicalFolder.\r\n    Virtual folders are not supported by this implementation.\r\n    </summary>\r\n    <param name=\"name\">The name of the new folder to add</param>\r\n    <param name=\"kind\">A string representing a Guid of the folder kind.</param>\r\n    <returns>A ProjectItem representing the newly added folder.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.ProjectItem AddFromFileCopy(string filePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFileCopy(System.String)\">\r\n    <summary>\r\n    Copies a source file and adds it to the project.\r\n    </summary>\r\n    <param name=\"filePath\">The path and file name of the project item to be added.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFileCopy(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFileCopy(System.String)\">\r\n    <summary>\r\n    Copies a source file and adds it to the project.\r\n    </summary>\r\n    <param name=\"filePath\">The path and file name of the project item to be added.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OAProjectItems\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProjectItems\">\r\n    <summary>\r\n    Contains ProjectItem objects\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProjectItems",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProjectItems\">\r\n    <summary>\r\n    Contains ProjectItem objects\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project AddSolutionFolder(string Name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.AddSolutionFolder(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project AddFromFile(string fileName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.AddFromFile(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project AddFromTemplate(string fileName, string destination, string projectName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.AddFromTemplate(System.String,System.String,System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OASolutionFolder<T>\r\n    where T : HierarchyNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFromFile(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFile(System.String)\">\r\n    <summary>\r\n    Adds a project item from a file that is installed in a project directory structure. \r\n    </summary>\r\n    <param name=\"fileName\">The file name of the item to add as a project item. </param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFile(System.String)\">\r\n    <summary>\r\n    Adds a project item from a file that is installed in a project directory structure. \r\n    </summary>\r\n    <param name=\"fileName\">The file name of the item to add as a project item. </param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual IEnumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetEnumerator\">\r\n    <summary>\r\n    Returns an enumeration for items in a collection. \r\n    </summary>\r\n    <returns>An IEnumerator for this object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetEnumerator",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetEnumerator\">\r\n    <summary>\r\n    Returns an enumeration for items in a collection. \r\n    </summary>\r\n    <returns>An IEnumerator for this object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\")]\r\npublic virtual EnvDTE.ProjectItem Item(object index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Item(System.Object)\">\r\n    <summary>\r\n    Get Project Item from index\r\n    </summary>\r\n    <param name=\"index\">Either index by number (1-based) or by name can be used to get the item</param>\r\n    <returns>Project Item. null is return if invalid index is specified</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Item(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Item(System.Object)\">\r\n    <summary>\r\n    Get Project Item from index\r\n    </summary>\r\n    <param name=\"index\">Either index by number (1-based) or by name can be used to get the item</param>\r\n    <returns>Project Item. null is return if invalid index is specified</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFolder(string name, string kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFolder(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new folder in Solution Explorer. \r\n    </summary>\r\n    <param name=\"name\">The name of the folder node in Solution Explorer.</param>\r\n    <param name=\"kind\">The type of folder to add. The available values are based on vsProjectItemsKindConstants and vsProjectItemKindConstants</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFolder(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFolder(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new folder in Solution Explorer. \r\n    </summary>\r\n    <param name=\"name\">The name of the folder node in Solution Explorer.</param>\r\n    <param name=\"kind\">The type of folder to add. The available values are based on vsProjectItemsKindConstants and vsProjectItemKindConstants</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFromFileCopy(string filePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFileCopy(System.String)\">\r\n    <summary>\r\n    Copies a source file and adds it to the project. \r\n    </summary>\r\n    <param name=\"filePath\">The path and file name of the project item to be added.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFileCopy(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFileCopy(System.String)\">\r\n    <summary>\r\n    Copies a source file and adds it to the project. \r\n    </summary>\r\n    <param name=\"filePath\">The path and file name of the project item to be added.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFromTemplate(string fileName, string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new project item from an existing item template file and adds it to the project. \r\n    </summary>\r\n    <param name=\"fileName\">The full path and file name of the template project file.</param>\r\n    <param name=\"name\">The file name to use for the new project item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromTemplate(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new project item from an existing item template file and adds it to the project. \r\n    </summary>\r\n    <param name=\"fileName\">The full path and file name of the template project file.</param>\r\n    <param name=\"name\">The file name to use for the new project item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFromDirectory(string directory)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromDirectory(System.String)\">\r\n    <summary>\r\n    Adds one or more ProjectItem objects from a directory to the ProjectItems collection. \r\n    </summary>\r\n    <param name=\"directory\">The directory from which to add the project item.</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromDirectory(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromDirectory(System.String)\">\r\n    <summary>\r\n    Adds one or more ProjectItem objects from a directory to the ProjectItems collection. \r\n    </summary>\r\n    <param name=\"directory\">The directory from which to add the project item.</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected IList<EnvDTE.ProjectItem> GetListOfProjectItems()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetListOfProjectItems\">\r\n    <summary>\r\n    Retrives a list of items associated with the current node.\r\n    </summary>\r\n    <returns>A List of project items</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetListOfProjectItems",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetListOfProjectItems\">\r\n    <summary>\r\n    Retrives a list of items associated with the current node.\r\n    </summary>\r\n    <returns>A List of project items</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OANavigableProjectItems\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems\">\r\n    <summary>\r\n    This can navigate a collection object only (partial implementation of ProjectItems interface)\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems\">\r\n    <summary>\r\n    This can navigate a collection object only (partial implementation of ProjectItems interface)\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override bool SaveAs(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"fileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>\r\n    <returns>true if the rename was successful. False if Save as failes</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.SaveAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"fileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>\r\n    <returns>true if the rename was successful. False if Save as failes</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void Save(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Save(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"fileName\">The name with which to save the project or project item.</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Save(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Save(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"fileName\">The name with which to save the project or project item.</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override bool get_IsOpen(string viewKind)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.get_IsOpen(System.String)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.get_IsOpen(System.String)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.get_IsOpen(System.String)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.Window Open(string viewKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Open(System.String)\">\r\n    <summary>\r\n    Opens the file item in the specified view.\r\n    </summary>\r\n    <param name=\"ViewKind\">Specifies the view kind in which to open the item (file)</param>\r\n    <returns>Window object</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Open(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Open(System.String)\">\r\n    <summary>\r\n    Opens the file item in the specified view.\r\n    </summary>\r\n    <param name=\"ViewKind\">Specifies the view kind in which to open the item (file)</param>\r\n    <returns>Window object</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OAFileItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAFileItem\">\r\n    <summary>\r\n    Represents an automation object for a file in a project\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAFileItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAFileItem\">\r\n    <summary>\r\n    Represents an automation object for a file in a project\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class OAVSProjectEvents\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents\">\r\n    <summary>\r\n    Provides access to language-specific project events\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents\">\r\n    <summary>\r\n    Provides access to language-specific project events\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual void GenerateKeyPairFiles(string strPublicPrivateFile, string strPublicOnlyFile)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.GenerateKeyPairFiles(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ProjectItem CreateWebReferencesFolder()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.CreateWebReferencesFolder",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void CopyProject(string bstrDestFolder, string bstrDestUNCPath, prjCopyProjectOption copyProjectOption, string bstrUsername, string bstrPassword)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.CopyProject(System.String,System.String,VSLangProj.prjCopyProjectOption,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Refresh()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.Refresh",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string GetUniqueFilename(object pDispatch, string bstrRoot, string bstrDesiredExt)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.GetUniqueFilename(System.Object,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ProjectItem AddWebReference(string bstrUrl)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.AddWebReference(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Exec(prjExecCommand command, int bSuppressUI, object varIn, out object pVarOut)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.Exec(VSLangProj.prjExecCommand,System.Int32,System.Object,System.Object@)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAVSProject\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProject\">\r\n    <summary>\r\n    Represents an automation friendly version of a language-specific project.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAVSProject",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProject\">\r\n    <summary>\r\n    Represents an automation friendly version of a language-specific project.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public object get_IndexedValue(object index1, object index2, object index3, object index4)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANullProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void set_IndexedValue(object index1, object index2, object index3, object index4, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANullProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void let_Value(object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANullProperty.let_Value(System.Object)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OANullProperty\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OANullProperty\">\r\n    <summary>\r\n    This object defines a so called null object that is returned as instead of null. This is because callers in VSCore usually crash if a null propery is returned for them.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OANullProperty",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OANullProperty\">\r\n    <summary>\r\n    This object defines a so called null object that is returned as instead of null. This is because callers in VSCore usually crash if a null propery is returned for them.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual void RunCustomTool()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.RunCustomTool",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAVSProjectItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem\">\r\n    <summary>\r\n    Represents a language-specific project item\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem\">\r\n    <summary>\r\n    Represents a language-specific project item\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public IEnumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.GetEnumerator\">\r\n    <summary>\r\n    Gets an enumeration for items in a collection. \r\n    </summary>\r\n    <returns>An enumerator. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.GetEnumerator",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.GetEnumerator\">\r\n    <summary>\r\n    Gets an enumeration for items in a collection. \r\n    </summary>\r\n    <returns>An enumerator. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void AddProperty(PropertyInfo propertyInfo)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddProperty(System.Reflection.PropertyInfo)\">\r\n    <summary>\r\n    Creates a new OAProperty object and adds it to the current list of properties\r\n    </summary>\r\n    <param name=\"propertyInfo\">The property to be associated with an OAProperty object</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddProperty(System.Reflection.PropertyInfo)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddProperty(System.Reflection.PropertyInfo)\">\r\n    <summary>\r\n    Creates a new OAProperty object and adds it to the current list of properties\r\n    </summary>\r\n    <param name=\"propertyInfo\">The property to be associated with an OAProperty object</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected void AddPropertiesFromType(Type targetType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddPropertiesFromType(System.Type)\">\r\n    <summary>\r\n    Add properties to the collection of properties filtering only those properties which are com-visible and AutomationBrowsable\r\n    </summary>\r\n    <param name=\"targetType\">The type of NodeProperties the we should filter on</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddPropertiesFromType(System.Type)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddPropertiesFromType(System.Type)\">\r\n    <summary>\r\n    Add properties to the collection of properties filtering only those properties which are com-visible and AutomationBrowsable\r\n    </summary>\r\n    <param name=\"targetType\">The type of NodeProperties the we should filter on</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\")]\r\npublic virtual EnvDTE.Property Item(object index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.Item(System.Object)\">\r\n    <summary>\r\n    Returns an indexed member of a Properties collection. \r\n    </summary>\r\n    <param name=\"index\">The index at which to return a mamber.</param>\r\n    <returns>A Property object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.Item(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.Item(System.Object)\">\r\n    <summary>\r\n    Returns an indexed member of a Properties collection. \r\n    </summary>\r\n    <param name=\"index\">The index at which to return a mamber.</param>\r\n    <returns>A Property object.</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OAProperties\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProperties\">\r\n    <summary>\r\n    Contains all of the properties of a given object that are contained in a generic collection of properties.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProperties",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProperties\">\r\n    <summary>\r\n    Contains all of the properties of a given object that are contained in a generic collection of properties.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [],
          "Syntax": {
            "Content": "public class OANestedProjectItem\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem",
          "XmlDocumentation": ""
        }
      ],
      "Id": "N:Microsoft.VisualStudio.Project.Automation",
      "XmlDocumentation": ""
    }
  ],
  "Id": "DocProject",
  "MscorlibVersion": {
    "Major": 4
  }
}