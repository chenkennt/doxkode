{
  "Namespaces": [
    {
      "Classes": [
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "nestedProject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.nestedProject",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override EnvDTE.Project SubProject",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.SubProject\">\r\n    <summary>\r\n    Returns the nested project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.SubProject",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.SubProject\">\r\n    <summary>\r\n    Returns the nested project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.ProjectItems ProjectItems",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.ProjectItems\">\r\n    <summary>\r\n    Returns the collection of project items defined in the nested project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.ProjectItems",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.ProjectItems\">\r\n    <summary>\r\n    Returns the collection of project items defined in the nested project\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OANestedProjectItem(OAProject project, NestedProjectNode node): base (project, node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.NestedProjectNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OANestedProjectItem\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OANestedProjectItem",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override bool SaveAs(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"fileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>\r\n    <returns>true if the rename was successful. False if Save as failes</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.SaveAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"fileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>\r\n    <returns>true if the rename was successful. False if Save as failes</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void Save(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Save(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"fileName\">The name with which to save the project or project item.</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Save(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Save(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"fileName\">The name with which to save the project or project item.</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override bool get_IsOpen(string viewKind)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.get_IsOpen(System.String)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.get_IsOpen(System.String)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.get_IsOpen(System.String)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.Window Open(string viewKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Open(System.String)\">\r\n    <summary>\r\n    Opens the file item in the specified view.\r\n    </summary>\r\n    <param name=\"ViewKind\">Specifies the view kind in which to open the item (file)</param>\r\n    <returns>Window object</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Open(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.Open(System.String)\">\r\n    <summary>\r\n    Opens the file item in the specified view.\r\n    </summary>\r\n    <param name=\"ViewKind\">Specifies the view kind in which to open the item (file)</param>\r\n    <returns>Window object</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void DoSave(bool isCalledFromSaveAs, string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.DoSave(System.Boolean,System.String)\">\r\n    <summary>\r\n    Saves or Save As the  file\r\n    </summary>\r\n    <param name=\"isCalledFromSaveAs\">Flag determining which Save method called , the SaveAs or the Save.</param>\r\n    <param name=\"fileName\">The name of the project file.</param>        \r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.DoSave(System.Boolean,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAFileItem.DoSave(System.Boolean,System.String)\">\r\n    <summary>\r\n    Saves or Save As the  file\r\n    </summary>\r\n    <param name=\"isCalledFromSaveAs\">Flag determining which Save method called , the SaveAs or the Save.</param>\r\n    <param name=\"fileName\">The name of the project file.</param>        \r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override ProjectItems ProjectItems",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAFileItem.ProjectItems\">\r\n    <summary>\r\n    Gets the ProjectItems for the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAFileItem.ProjectItems",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAFileItem.ProjectItems\">\r\n    <summary>\r\n    Gets the ProjectItems for the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.Document Document",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAFileItem.Document\">\r\n    <summary>\r\n    Gets the Document associated with the item, if one exists.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAFileItem.Document",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAFileItem.Document\">\r\n    <summary>\r\n    Gets the Document associated with the item, if one exists.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override bool IsDirty",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAFileItem.IsDirty\">\r\n    <summary>\r\n    Returns the dirty state of the document.\r\n    </summary>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the project is closed or it the service provider attached to the project is invalid.</exception>\r\n    <exception cref=\"!:ComException\">Is thrown if the dirty state cannot be retrived.</exception>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAFileItem.IsDirty",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAFileItem.IsDirty\">\r\n    <summary>\r\n    Returns the dirty state of the document.\r\n    </summary>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the project is closed or it the service provider attached to the project is invalid.</exception>\r\n    <exception cref=\"!:ComException\">Is thrown if the dirty state cannot be retrived.</exception>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAFileItem(OAProject project, FileNode node): base (project, node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFileItem.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.FileNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAFileItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAFileItem\">\r\n    <summary>\r\n    Represents an automation object for a file in a project\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAFileItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAFileItem\">\r\n    <summary>\r\n    Represents an automation object for a file in a project\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void let_Value(object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.let_Value(System.Object)\">\r\n    <summary>\r\n    Setter function to set properties values. \r\n    </summary>\r\n    <param name=\"value\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperty.let_Value(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.let_Value(System.Object)\">\r\n    <summary>\r\n    Setter function to set properties values. \r\n    </summary>\r\n    <param name=\"value\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void set_IndexedValue(object index1, object index2, object index3, object index4, object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)\">\r\n    <summary>\r\n    Sets the value of the property at the specified index.\r\n    </summary>\r\n    <param name=\"index1\">The index of the item to set.</param>\r\n    <param name=\"index2\">Reserved for future use.</param>\r\n    <param name=\"index3\">Reserved for future use.</param>\r\n    <param name=\"index4\">Reserved for future use.</param>\r\n    <param name=\"value\">The value to set.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)\">\r\n    <summary>\r\n    Sets the value of the property at the specified index.\r\n    </summary>\r\n    <param name=\"index1\">The index of the item to set.</param>\r\n    <param name=\"index2\">Reserved for future use.</param>\r\n    <param name=\"index3\">Reserved for future use.</param>\r\n    <param name=\"index4\">Reserved for future use.</param>\r\n    <param name=\"value\">The value to set.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public object get_IndexedValue(object index1, object index2, object index3, object index4)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)\">\r\n    <summary>\r\n    Returns one element of a list. \r\n    </summary>\r\n    <param name=\"index1\">The index of the item to display.</param>\r\n    <param name=\"index2\">The index of the item to display. Reserved for future use.</param>\r\n    <param name=\"index3\">The index of the item to display. Reserved for future use.</param>\r\n    <param name=\"index4\">The index of the item to display. Reserved for future use.</param>\r\n    <returns>The value of a property</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)\">\r\n    <summary>\r\n    Returns one element of a list. \r\n    </summary>\r\n    <param name=\"index1\">The index of the item to display.</param>\r\n    <param name=\"index2\">The index of the item to display. Reserved for future use.</param>\r\n    <param name=\"index3\">The index of the item to display. Reserved for future use.</param>\r\n    <param name=\"index4\">The index of the item to display. Reserved for future use.</param>\r\n    <returns>The value of a property</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "parent",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAProperty.parent",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "pi",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAProperty.pi",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public object Object",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Object\">\r\n    <summary>\r\n    Sets or gets the object supporting the Property object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperty.Object",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Object\">\r\n    <summary>\r\n    Sets or gets the object supporting the Property object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public object Application",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Application\">\r\n    <summary>\r\n    Microsoft Internal Use Only.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperty.Application",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Application\">\r\n    <summary>\r\n    Microsoft Internal Use Only.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public object Value",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Value\">\r\n    <summary>\r\n    Gets or sets the value of the property returned by the Property object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperty.Value",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Value\">\r\n    <summary>\r\n    Gets or sets the value of the property returned by the Property object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public EnvDTE.Properties Collection",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Collection\">\r\n    <summary>\r\n    Gets the Collection containing the Property object supporting this property.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperty.Collection",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Collection\">\r\n    <summary>\r\n    Gets the Collection containing the Property object supporting this property.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public EnvDTE.Properties Parent",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Parent\">\r\n    <summary>\r\n    Microsoft Internal Use Only.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperty.Parent",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Parent\">\r\n    <summary>\r\n    Microsoft Internal Use Only.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public EnvDTE.DTE DTE",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperty.DTE",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Name\">\r\n    <summary>\r\n    Gets the name of the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperty.Name",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.Name\">\r\n    <summary>\r\n    Gets the name of the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public short NumIndices",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.NumIndices\">\r\n    <summary>\r\n    Gets the number of indices required to access the value.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperty.NumIndices",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperty.NumIndices\">\r\n    <summary>\r\n    Gets the number of indices required to access the value.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAProperty(OAProperties parent, PropertyInfo pi)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperty.#ctor(Microsoft.VisualStudio.Project.Automation.OAProperties,System.Reflection.PropertyInfo)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAProperty\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProperty",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual void NotifyPropertiesDelete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.NotifyPropertiesDelete\">\r\n    <summary>\r\n    Microsoft Internal Use Only. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.NotifyPropertiesDelete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.NotifyPropertiesDelete\">\r\n    <summary>\r\n    Microsoft Internal Use Only. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object get_Extender(string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.get_Extender(System.String)\">\r\n    <summary>\r\n    Gets the requested Extender object if it is available for this object.\r\n    </summary>\r\n    <param name=\"name\">The name of the extender object.</param>\r\n    <returns>An Extender object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.get_Extender(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.get_Extender(System.String)\">\r\n    <summary>\r\n    Gets the requested Extender object if it is available for this object.\r\n    </summary>\r\n    <param name=\"name\">The name of the extender object.</param>\r\n    <returns>An Extender object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void SaveAs(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project. \r\n    </summary>\r\n    <param name=\"fileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>        \r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.SaveAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project. \r\n    </summary>\r\n    <param name=\"fileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>        \r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Delete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.Delete\">\r\n    <summary>\r\n    Removes the project from the current solution. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.Delete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.Delete\">\r\n    <summary>\r\n    Removes the project from the current solution. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Save(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.Save(System.String)\">\r\n    <summary>\r\n    Saves the project\r\n    </summary>\r\n    <param name=\"fileName\">The file name of the project</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>        \r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.Save(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.Save(System.String)\">\r\n    <summary>\r\n    Saves the project\r\n    </summary>\r\n    <param name=\"fileName\">The file name of the project</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">Is thrown if the save operation failes.</exception>\r\n    <exception cref=\"T:System.ArgumentNullException\">Is thrown if fileName is null.</exception>        \r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void DoSave(bool isCalledFromSaveAs, string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.DoSave(System.Boolean,System.String)\">\r\n    <summary>\r\n    Saves or Save Asthe project.\r\n    </summary>\r\n    <param name=\"isCalledFromSaveAs\">Flag determining which Save method called , the SaveAs or the Save.</param>\r\n    <param name=\"fileName\">The name of the project file.</param>        \r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.DoSave(System.Boolean,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProject.DoSave(System.Boolean,System.String)\">\r\n    <summary>\r\n    Saves or Save Asthe project.\r\n    </summary>\r\n    <param name=\"isCalledFromSaveAs\">Flag determining which Save method called , the SaveAs or the Save.</param>\r\n    <param name=\"fileName\">The name of the project file.</param>        \r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAProject.project",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "configurationManager",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAProject.configurationManager",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public ProjectNode Project",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.Project",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Projects Collection",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Collection\">\r\n    <summary>\r\n    Gets the Projects collection containing the Project object supporting this property.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.Collection",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Collection\">\r\n    <summary>\r\n    Gets the Projects collection containing the Project object supporting this property.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object Object",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Object\">\r\n    <summary>\r\n    Gets an interface or object that can be accessed by name at run time.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.Object",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Object\">\r\n    <summary>\r\n    Gets an interface or object that can be accessed by name at run time.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string FileName",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.FileName\">\r\n    <summary>\r\n    Microsoft Internal Use Only.  Gets the file name of the project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.FileName",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.FileName\">\r\n    <summary>\r\n    Microsoft Internal Use Only.  Gets the file name of the project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Kind\">\r\n    <summary>\r\n    Gets a GUID string indicating the kind or type of the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.Kind",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Kind\">\r\n    <summary>\r\n    Gets a GUID string indicating the kind or type of the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItems ProjectItems",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ProjectItems\">\r\n    <summary>\r\n    Gets a ProjectItems collection for the Project object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.ProjectItems",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ProjectItems\">\r\n    <summary>\r\n    Gets a ProjectItems collection for the Project object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Name\">\r\n    <summary>\r\n    Gets or sets the name of the object. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.Name",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Name\">\r\n    <summary>\r\n    Gets or sets the name of the object. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.CodeModel CodeModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.CodeModel\">\r\n    <summary>\r\n    Gets the CodeModel object for the project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.CodeModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.CodeModel\">\r\n    <summary>\r\n    Gets the CodeModel object for the project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string FullName",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.FullName\">\r\n    <summary>\r\n    Gets the full path and name of the Project object's file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.FullName",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.FullName\">\r\n    <summary>\r\n    Gets the full path and name of the Project object's file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ConfigurationManager ConfigurationManager",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ConfigurationManager\">\r\n    <summary>\r\n    Gets the ConfigurationManager object for this Project .\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.ConfigurationManager",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ConfigurationManager\">\r\n    <summary>\r\n    Gets the ConfigurationManager object for this Project .\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Globals Globals",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Globals\">\r\n    <summary>\r\n    Gets the Globals object containing add-in values that may be saved in the solution (.sln) file, the project file, or in the user's profile data.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.Globals",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Globals\">\r\n    <summary>\r\n    Gets the Globals object containing add-in values that may be saved in the solution (.sln) file, the project file, or in the user's profile data.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string ExtenderCATID",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ExtenderCATID\">\r\n    <summary>\r\n    Gets the Extender category ID (CATID) for the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.ExtenderCATID",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ExtenderCATID\">\r\n    <summary>\r\n    Gets the Extender category ID (CATID) for the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem ParentProjectItem",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ParentProjectItem\">\r\n    <summary>\r\n    Gets a ProjectItem object for the nested project in the host project. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.ParentProjectItem",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ParentProjectItem\">\r\n    <summary>\r\n    Gets a ProjectItem object for the nested project in the host project. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool Saved",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Saved\">\r\n    <summary>\r\n    Gets or sets a value indicatingwhether the object has not been modified since last being saved or opened.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.Saved",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Saved\">\r\n    <summary>\r\n    Gets or sets a value indicatingwhether the object has not been modified since last being saved or opened.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.DTE DTE",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.DTE",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Properties Properties",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Properties\">\r\n    <summary>\r\n    Gets a collection of all properties that pertain to the Project object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.Properties",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.Properties\">\r\n    <summary>\r\n    Gets a collection of all properties that pertain to the Project object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool IsDirty",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.IsDirty\">\r\n    <summary>\r\n    Microsoft Internal Use Only. Specfies if the project is dirty.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.IsDirty",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.IsDirty\">\r\n    <summary>\r\n    Microsoft Internal Use Only. Specfies if the project is dirty.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string UniqueName",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.UniqueName\">\r\n    <summary>\r\n    Returns the name of project as a relative path from the directory containing the solution file to the project file\r\n    </summary>\r\n    <value>Unique name if project is in a valid state. Otherwise null</value>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.UniqueName",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.UniqueName\">\r\n    <summary>\r\n    Returns the name of project as a relative path from the directory containing the solution file to the project file\r\n    </summary>\r\n    <value>Unique name if project is in a valid state. Otherwise null</value>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object ExtenderNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ExtenderNames\">\r\n    <summary>\r\n    Gets a list of available Extenders for the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProject.ExtenderNames",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProject.ExtenderNames\">\r\n    <summary>\r\n    Gets a list of available Extenders for the object.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAProject(ProjectNode project)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProject.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAProject\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProject",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual bool get_IsOpen(string viewKind)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_IsOpen(System.String)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_IsOpen(System.String)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_IsOpen(System.String)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object get_Extender(string extenderName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_Extender(System.String)\">\r\n    <summary>\r\n    Gets the requested Extender if it is available for this object\r\n    </summary>\r\n    <param name=\"extenderName\">The name of the extender.</param>\r\n    <returns>The extender object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_Extender(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_Extender(System.String)\">\r\n    <summary>\r\n    Gets the requested Extender if it is available for this object\r\n    </summary>\r\n    <param name=\"extenderName\">The name of the extender.</param>\r\n    <returns>The extender object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string get_FileNames(short index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_FileNames(System.Int16)\">\r\n    <summary>\r\n    Gets the full path and names of the files associated with a project item.\r\n    </summary>\r\n    <param name=\"index\"> The index of the item</param>\r\n    <returns>The full path of the associated item</returns>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">Is thrown if index is not one</exception>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_FileNames(System.Int16)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.get_FileNames(System.Int16)\">\r\n    <summary>\r\n    Gets the full path and names of the files associated with a project item.\r\n    </summary>\r\n    <param name=\"index\"> The index of the item</param>\r\n    <returns>The full path of the associated item</returns>\r\n    <exception cref=\"T:System.ArgumentOutOfRangeException\">Is thrown if index is not one</exception>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Delete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Delete\">\r\n    <summary>\r\n    Removes the item from its project and its storage. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Delete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Delete\">\r\n    <summary>\r\n    Removes the item from its project and its storage. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void ExpandView()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExpandView\">\r\n    <summary>\r\n    Expands the view of Solution Explorer to show project items. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExpandView",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExpandView\">\r\n    <summary>\r\n    Expands the view of Solution Explorer to show project items. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool SaveAs(string newFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"newFileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten.</param>\r\n    <returns>true if save was successful</returns>\r\n    <remarks>This method is implemented on subclasses.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SaveAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project item.\r\n    </summary>\r\n    <param name=\"newFileName\">The file name with which to save the solution, project, or project item. If the file exists, it is overwritten.</param>\r\n    <returns>true if save was successful</returns>\r\n    <remarks>This method is implemented on subclasses.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Remove()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Remove\">\r\n    <summary>\r\n    Removes the project item from hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Remove",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Remove\">\r\n    <summary>\r\n    Removes the project item from hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Window Open(string ViewKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Open(System.String)\">\r\n    <summary>\r\n    Opens the project item in the specified view. Not implemented because this abstract class dont know what to open\r\n    </summary>\r\n    <param name=\"ViewKind\">Specifies the view kind in which to open the item</param>\r\n    <returns>Window object</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Open(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Open(System.String)\">\r\n    <summary>\r\n    Opens the project item in the specified view. Not implemented because this abstract class dont know what to open\r\n    </summary>\r\n    <param name=\"ViewKind\">Specifies the view kind in which to open the item</param>\r\n    <returns>Window object</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Save(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Save(System.String)\">\r\n    <summary>\r\n    Saves the project item. \r\n    </summary>\r\n    <param name=\"fileName\">The name with which to save the project or project item.</param>\r\n    <remarks>Implemented by subclasses.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Save(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Save(System.String)\">\r\n    <summary>\r\n    Saves the project item. \r\n    </summary>\r\n    <param name=\"fileName\">The name with which to save the project or project item.</param>\r\n    <remarks>Implemented by subclasses.</remarks>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "node",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.node",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.project",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ConfigurationManager ConfigurationManager",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ConfigurationManager\">\r\n    <summary>\r\n    Gets the ConfigurationManager object for this ProjectItem. \r\n    </summary>\r\n    <remarks>We do not support config management based per item.</remarks>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ConfigurationManager",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ConfigurationManager\">\r\n    <summary>\r\n    Gets the ConfigurationManager object for this ProjectItem. \r\n    </summary>\r\n    <remarks>We do not support config management based per item.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object ExtenderNames",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExtenderNames\">\r\n    <summary>\r\n    Gets a list of available Extenders for the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExtenderNames",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExtenderNames\">\r\n    <summary>\r\n    Gets a list of available Extenders for the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string ExtenderCATID",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExtenderCATID\">\r\n    <summary>\r\n    Gets the Extender category ID (CATID) for the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExtenderCATID",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ExtenderCATID\">\r\n    <summary>\r\n    Gets the Extender category ID (CATID) for the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected OAProject Project",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Project\">\r\n    <summary>\r\n    Returns the automation project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Project",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Project\">\r\n    <summary>\r\n    Returns the automation project\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project SubProject",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SubProject\">\r\n    <summary>\r\n    If the project item is the root of a subproject, then the SubProject property returns the Project object for the subproject.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SubProject",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.SubProject\">\r\n    <summary>\r\n    If the project item is the root of a subproject, then the SubProject property returns the Project object for the subproject.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.FileCodeModel FileCodeModel",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.FileCodeModel\">\r\n    <summary>\r\n    Gets the FileCodeModel object for the project item.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.FileCodeModel",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.FileCodeModel\">\r\n    <summary>\r\n    Gets the FileCodeModel object for the project item.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool IsDirty",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.IsDirty\">\r\n    <summary>\r\n    Microsoft Internal Use Only. Checks if the document associated to this item is dirty.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.IsDirty",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.IsDirty\">\r\n    <summary>\r\n    Microsoft Internal Use Only. Checks if the document associated to this item is dirty.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItems ProjectItems",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ProjectItems\">\r\n    <summary>\r\n    Gets a ProjectItems for the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ProjectItems",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ProjectItems\">\r\n    <summary>\r\n    Gets a ProjectItems for the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project ContainingProject",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ContainingProject\">\r\n    <summary>\r\n    Gets the project hosting the ProjectItem.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ContainingProject",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.ContainingProject\">\r\n    <summary>\r\n    Gets the project hosting the ProjectItem.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual short FileCount",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.FileCount\">\r\n    <summary>\r\n    Gets the number of files associated with a ProjectItem.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.FileCount",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.FileCount\">\r\n    <summary>\r\n    Gets the number of files associated with a ProjectItem.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.DTE DTE",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.DTE",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Kind\">\r\n    <summary>\r\n    Gets a GUID string indicating the kind or type of the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Kind",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Kind\">\r\n    <summary>\r\n    Gets a GUID string indicating the kind or type of the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object Object",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Object\">\r\n    <summary>\r\n    Gets an object that can be accessed by name at run time.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Object",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Object\">\r\n    <summary>\r\n    Gets an object that can be accessed by name at run time.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Document Document",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Document\">\r\n    <summary>\r\n    Gets the Document associated with the item, if one exists.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Document",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Document\">\r\n    <summary>\r\n    Gets the Document associated with the item, if one exists.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool Saved",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Saved\">\r\n    <summary>\r\n    Gets or sets a value indicating whether or not the object has been modified since last being saved or opened.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Saved",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Saved\">\r\n    <summary>\r\n    Gets or sets a value indicating whether or not the object has been modified since last being saved or opened.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Name\">\r\n    <summary>\r\n    Gets or sets the name of the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Name",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Name\">\r\n    <summary>\r\n    Gets or sets the name of the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected T Node",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Node",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItems Collection",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Collection\">\r\n    <summary>\r\n    Gets the ProjectItems collection containing the ProjectItem object supporting this property.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Collection",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Collection\">\r\n    <summary>\r\n    Gets the ProjectItems collection containing the ProjectItem object supporting this property.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Properties Properties",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Properties\">\r\n    <summary>\r\n    Gets a collection of all properties that pertain to the object. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Properties",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.Properties\">\r\n    <summary>\r\n    Gets a collection of all properties that pertain to the object. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAProjectItem(OAProject project, T node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,`0)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAProjectItem<T>\r\n    where T : HierarchyNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProjectItem`1",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void ExitAutomation()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.AutomationScope.ExitAutomation\">\r\n    <summary>\r\n    Ends the scope of the automation function. This function is also called by the\r\n    Dispose method.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.AutomationScope.ExitAutomation",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.AutomationScope.ExitAutomation\">\r\n    <summary>\r\n    Ends the scope of the automation function. This function is also called by the\r\n    Dispose method.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void Dispose(bool disposing)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.AutomationScope.Dispose(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.AutomationScope.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.AutomationScope.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.AutomationScope.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.AutomationScope.Mutex",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "inAutomation",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.AutomationScope.inAutomation",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.AutomationScope.isDisposed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "extensibility",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.AutomationScope.extensibility",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public IVsExtensibility3 Extensibility",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.AutomationScope.Extensibility\">\r\n    <summary>\r\n    Gets the IVsExtensibility3 interface used in the automation function.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.AutomationScope.Extensibility",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.AutomationScope.Extensibility\">\r\n    <summary>\r\n    Gets the IVsExtensibility3 interface used in the automation function.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1810:InitializeReferenceTypeStaticFieldsInline\")]\r\nstatic AutomationScope()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.AutomationScope.#cctor\">\r\n    <summary>\r\n    Initializes the <see cref=\"T:Microsoft.VisualStudio.Project.Automation.AutomationScope\"/> class.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.AutomationScope.#cctor",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.AutomationScope.#cctor\">\r\n    <summary>\r\n    Initializes the <see cref=\"T:Microsoft.VisualStudio.Project.Automation.AutomationScope\"/> class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public AutomationScope(IServiceProvider provider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.AutomationScope.#ctor(System.IServiceProvider)\">\r\n    <summary>\r\n    Defines the beginning of the scope of an automation function. This constuctor\r\n    calls EnterAutomationFunction to signal the Shell that the current function is\r\n    changing the status of the automation objects.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.AutomationScope.#ctor(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.AutomationScope.#ctor(System.IServiceProvider)\">\r\n    <summary>\r\n    Defines the beginning of the scope of an automation function. This constuctor\r\n    calls EnterAutomationFunction to signal the Shell that the current function is\r\n    changing the status of the automation objects.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "internal class AutomationScope\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.AutomationScope\">\r\n    <summary>\r\n    Helper class that handle the scope of an automation function.\r\n    It should be used inside a \"using\" directive to define the scope of the\r\n    automation function and make sure that the ExitAutomation method is called.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.AutomationScope",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.AutomationScope\">\r\n    <summary>\r\n    Helper class that handle the scope of an automation function.\r\n    It should be used inside a \"using\" directive to define the scope of the\r\n    automation function and make sure that the ExitAutomation method is called.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\")]\r\nprotected virtual EnvDTE.ProjectItem EvaluateAddResult(VSADDRESULT result, string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.EvaluateAddResult(Microsoft.VisualStudio.Shell.Interop.VSADDRESULT,System.String)\">\r\n    <summary>\r\n    Evaluates the result of an add operation.\r\n    </summary>\r\n    <param name=\"result\">The <paramref name=\"VSADDRESULT\"/> returned by the Add methods</param>\r\n    <param name=\"path\">The full path of the item added.</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.EvaluateAddResult(Microsoft.VisualStudio.Shell.Interop.VSADDRESULT,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.EvaluateAddResult(Microsoft.VisualStudio.Shell.Interop.VSADDRESULT,System.String)\">\r\n    <summary>\r\n    Evaluates the result of an add operation.\r\n    </summary>\r\n    <param name=\"result\">The <paramref name=\"VSADDRESULT\"/> returned by the Add methods</param>\r\n    <param name=\"path\">The full path of the item added.</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override ProjectItem AddFolder(string name, string kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFolder(System.String,System.String)\">\r\n    <summary>\r\n    Adds a folder to the collection of ProjectItems with the given name.\r\n    \r\n    The kind must be null, empty string, or the string value of vsProjectItemKindPhysicalFolder.\r\n    Virtual folders are not supported by this implementation.\r\n    </summary>\r\n    <param name=\"name\">The name of the new folder to add</param>\r\n    <param name=\"kind\">A string representing a Guid of the folder kind.</param>\r\n    <returns>A ProjectItem representing the newly added folder.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFolder(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFolder(System.String,System.String)\">\r\n    <summary>\r\n    Adds a folder to the collection of ProjectItems with the given name.\r\n    \r\n    The kind must be null, empty string, or the string value of vsProjectItemKindPhysicalFolder.\r\n    Virtual folders are not supported by this implementation.\r\n    </summary>\r\n    <param name=\"name\">The name of the new folder to add</param>\r\n    <param name=\"kind\">A string representing a Guid of the folder kind.</param>\r\n    <returns>A ProjectItem representing the newly added folder.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static string GetTemplateNoZip(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.GetTemplateNoZip(System.String)\">\r\n    <summary>\r\n    Removes .zip extensions from the components of a path.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.GetTemplateNoZip(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.GetTemplateNoZip(System.String)\">\r\n    <summary>\r\n    Removes .zip extensions from the components of a path.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.ProjectItem AddFromFile(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFile(System.String)\">\r\n    <summary>\r\n    Adds a project item from a file that is installed in a project directory structure. \r\n    </summary>\r\n    <param name=\"fileName\">The file name of the item to add as a project item. </param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFile(System.String)\">\r\n    <summary>\r\n    Adds a project item from a file that is installed in a project directory structure. \r\n    </summary>\r\n    <param name=\"fileName\">The file name of the item to add as a project item. </param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.ProjectItem AddFromFileCopy(string filePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFileCopy(System.String)\">\r\n    <summary>\r\n    Copies a source file and adds it to the project.\r\n    </summary>\r\n    <param name=\"filePath\">The path and file name of the project item to be added.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFileCopy(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromFileCopy(System.String)\">\r\n    <summary>\r\n    Copies a source file and adds it to the project.\r\n    </summary>\r\n    <param name=\"filePath\">The path and file name of the project item to be added.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual EnvDTE.ProjectItem AddItem(string path, VSADDITEMOPERATION op)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddItem(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION)\">\r\n    <summary>\r\n    Adds an item to the project.\r\n    </summary>\r\n    <param name=\"path\">The full path of the item to add.</param>\r\n    <param name=\"op\">The <paramref name=\"VSADDITEMOPERATION\"/> to use when adding the item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddItem(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddItem(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION)\">\r\n    <summary>\r\n    Adds an item to the project.\r\n    </summary>\r\n    <param name=\"path\">The full path of the item to add.</param>\r\n    <param name=\"op\">The <paramref name=\"VSADDITEMOPERATION\"/> to use when adding the item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.ProjectItem AddFromTemplate(string fileName, string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new project item from an existing item template file and adds it to the project. \r\n    </summary>\r\n    <param name=\"fileName\">The full path and file name of the template project file.</param>\r\n    <param name=\"name\">The file name to use for the new project item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromTemplate(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.AddFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new project item from an existing item template file and adds it to the project. \r\n    </summary>\r\n    <param name=\"fileName\">The full path and file name of the template project file.</param>\r\n    <param name=\"name\">The file name to use for the new project item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAProjectItems(OAProject project, HierarchyNode nodeWithItems): base (project, nodeWithItems)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectItems.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAProjectItems\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProjectItems\">\r\n    <summary>\r\n    Contains ProjectItem objects\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProjectItems",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProjectItems\">\r\n    <summary>\r\n    Contains ProjectItem objects\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "vsProject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents.vsProject",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual ImportsEvents ImportsEvents",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents.ImportsEvents",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual BuildManagerEvents BuildManagerEvents",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents.BuildManagerEvents",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ReferencesEvents ReferencesEvents",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents.ReferencesEvents",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAVSProjectEvents(OAVSProject vsProject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents.#ctor(Microsoft.VisualStudio.Project.Automation.OAVSProject)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAVSProjectEvents\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents\">\r\n    <summary>\r\n    Provides access to language-specific project events\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProjectEvents\">\r\n    <summary>\r\n    Provides access to language-specific project events\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual void AddProperty(PropertyInfo propertyInfo)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddProperty(System.Reflection.PropertyInfo)\">\r\n    <summary>\r\n    Creates a new OAProperty object and adds it to the current list of properties\r\n    </summary>\r\n    <param name=\"propertyInfo\">The property to be associated with an OAProperty object</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddProperty(System.Reflection.PropertyInfo)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddProperty(System.Reflection.PropertyInfo)\">\r\n    <summary>\r\n    Creates a new OAProperty object and adds it to the current list of properties\r\n    </summary>\r\n    <param name=\"propertyInfo\">The property to be associated with an OAProperty object</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static bool IsComVisible(Type targetType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.IsComVisible(System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\")]\r\npublic virtual EnvDTE.Property Item(object index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.Item(System.Object)\">\r\n    <summary>\r\n    Returns an indexed member of a Properties collection. \r\n    </summary>\r\n    <param name=\"index\">The index at which to return a mamber.</param>\r\n    <returns>A Property object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.Item(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.Item(System.Object)\">\r\n    <summary>\r\n    Returns an indexed member of a Properties collection. \r\n    </summary>\r\n    <param name=\"index\">The index at which to return a mamber.</param>\r\n    <returns>A Property object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IEnumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.GetEnumerator\">\r\n    <summary>\r\n    Gets an enumeration for items in a collection. \r\n    </summary>\r\n    <returns>An enumerator. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.GetEnumerator",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.GetEnumerator\">\r\n    <summary>\r\n    Gets an enumeration for items in a collection. \r\n    </summary>\r\n    <returns>An enumerator. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private bool IsInMap(PropertyInfo propertyInfo)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.IsInMap(System.Reflection.PropertyInfo)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private static bool IsAutomationVisible(PropertyInfo propertyInfo)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.IsAutomationVisible(System.Reflection.PropertyInfo)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected void AddPropertiesFromType(Type targetType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddPropertiesFromType(System.Type)\">\r\n    <summary>\r\n    Add properties to the collection of properties filtering only those properties which are com-visible and AutomationBrowsable\r\n    </summary>\r\n    <param name=\"targetType\">The type of NodeProperties the we should filter on</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddPropertiesFromType(System.Type)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAProperties.AddPropertiesFromType(System.Type)\">\r\n    <summary>\r\n    Add properties to the collection of properties filtering only those properties which are com-visible and AutomationBrowsable\r\n    </summary>\r\n    <param name=\"targetType\">The type of NodeProperties the we should filter on</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static bool IsComVisible(PropertyInfo propertyInfo)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.IsComVisible(System.Reflection.PropertyInfo)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "properties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAProperties.properties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "target",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAProperties.target",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Count\">\r\n    <summary>\r\n    Gets a value indicating the number of objects in the collection.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperties.Count",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Count\">\r\n    <summary>\r\n    Gets a value indicating the number of objects in the collection.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public Dictionary<string, EnvDTE.Property> Properties",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Properties\">\r\n    <summary>\r\n    Defines a dictionary of the properties contained.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperties.Properties",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Properties\">\r\n    <summary>\r\n    Defines a dictionary of the properties contained.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object Application",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Application\">\r\n    <summary>\r\n    Microsoft Internal Use Only.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperties.Application",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Application\">\r\n    <summary>\r\n    Microsoft Internal Use Only.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.DTE DTE",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperties.DTE",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public NodeProperties Target",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Target\">\r\n    <summary>\r\n    Defines the NodeProperties object that contains the defines the properties.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperties.Target",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Target\">\r\n    <summary>\r\n    Defines the NodeProperties object that contains the defines the properties.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object Parent",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Parent\">\r\n    <summary>\r\n    Gets the immediate parent object of a Properties collection.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperties.Parent",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Parent\">\r\n    <summary>\r\n    Gets the immediate parent object of a Properties collection.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode Node",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Node\">\r\n    <summary>\r\n    The hierarchy node for the object which properties this item represent\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProperties.Node",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAProperties.Node\">\r\n    <summary>\r\n    The hierarchy node for the object which properties this item represent\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2214:DoNotCallOverridableMethodsInConstructors\")]\r\npublic OAProperties(NodeProperties target)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProperties.#ctor(Microsoft.VisualStudio.Project.NodeProperties)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAProperties\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProperties\">\r\n    <summary>\r\n    Contains all of the properties of a given object that are contained in a generic collection of properties.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProperties",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProperties\">\r\n    <summary>\r\n    Contains all of the properties of a given object that are contained in a generic collection of properties.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "Syntax": {
                "Content": "public override string Culture",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectReference.Culture",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Identity",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectReference.Identity",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override prjReferenceType Type",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectReference.Type",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Path",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectReference.Path",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Version",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectReference.Version",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.Project SourceProject",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectReference.SourceProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Name",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAProjectReference.Name",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAProjectReference(ProjectReferenceNode projectReference): base (projectReference)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAProjectReference.#ctor(Microsoft.VisualStudio.Project.ProjectReferenceNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAProjectReference\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProjectReference\">\r\n    <summary>\r\n    Represents a project reference of the solution\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAProjectReference",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAProjectReference\">\r\n    <summary>\r\n    Represents a project reference of the solution\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "Syntax": {
                "Content": "public override int MajorVersion",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAComReference.MajorVersion",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Identity",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAComReference.Identity",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Name",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAComReference.Name",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Culture",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAComReference.Culture",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Version",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAComReference.Version",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override VSLangProj.prjReferenceType Type",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAComReference.Type",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int MinorVersion",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAComReference.MinorVersion",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAComReference(ComReferenceNode comReference): base (comReference)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAComReference.#ctor(Microsoft.VisualStudio.Project.ComReferenceNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAComReference\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAComReference",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual string BuildDesignTimeOutput(string bstrOutputMoniker)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OABuildManager.BuildDesignTimeOutput(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void IEventSource<_dispBuildManagerEvents>.OnSinkAdded(_dispBuildManagerEvents sink)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OABuildManager.Microsoft#VisualStudio#Project#IEventSource{VSLangProj#_dispBuildManagerEvents}#OnSinkAdded(VSLangProj._dispBuildManagerEvents)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void IEventSource<_dispBuildManagerEvents>.OnSinkRemoved(_dispBuildManagerEvents sink)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OABuildManager.Microsoft#VisualStudio#Project#IEventSource{VSLangProj#_dispBuildManagerEvents}#OnSinkRemoved(VSLangProj._dispBuildManagerEvents)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void OnDesignTimeOutputDirty(string outputMoniker)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OABuildManager.OnDesignTimeOutputDirty(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void OnDesignTimeOutputDeleted(string outputMoniker)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OABuildManager.OnDesignTimeOutputDeleted(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "projectManager",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OABuildManager.projectManager",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual object Parent",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OABuildManager.Parent",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project ContainingProject",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OABuildManager.ContainingProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual object DesignTimeOutputMonikers",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OABuildManager.DesignTimeOutputMonikers",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.DTE DTE",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OABuildManager.DTE",
              "XmlDocumentation": ""
            }
          ],
          "Events": [
            {
              "Syntax": {
                "Content": "DesignTimeOutputDeleted",
                "XmlDocumentation": ""
              },
              "Id": "E:Microsoft.VisualStudio.Project.Automation.OABuildManager.DesignTimeOutputDeleted",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DesignTimeOutputDirty",
                "XmlDocumentation": ""
              },
              "Id": "E:Microsoft.VisualStudio.Project.Automation.OABuildManager.DesignTimeOutputDirty",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OABuildManager(ProjectNode project)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OABuildManager.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OABuildManager",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OABuildManager",
          "XmlDocumentation": ""
        },
        {
          "Properties": [
            {
              "Syntax": {
                "Content": "public override ProjectItems ProjectItems",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAFolderItem.ProjectItems",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override ProjectItems Collection",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAFolderItem.Collection",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAFolderItem(OAProject project, FolderNode node): base (project, node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAFolderItem.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.FolderNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAFolderItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAFolderItem\">\r\n    <summary>\r\n    Represents an automation object for a folder in a project\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAFolderItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAFolderItem\">\r\n    <summary>\r\n    Represents an automation object for a folder in a project\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private void OnReferenceAdded(object sender, HierarchyNodeEventArgs args)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.OnReferenceAdded(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private Reference FindByName(string stringIndex)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.FindByName(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void IEventSource<_dispReferencesEvents>.OnSinkAdded(_dispReferencesEvents sink)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.Microsoft#VisualStudio#Project#IEventSource{VSLangProj#_dispReferencesEvents}#OnSinkAdded(VSLangProj._dispReferencesEvents)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\", Justification = \"Support for this has not yet been added\")]\r\nprivate void OnReferenceChanged(object sender, HierarchyNodeEventArgs args)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.OnReferenceChanged(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private Reference AddFromSelectorData(VSCOMPONENTSELECTORDATA selector, string wrapperTool = null)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.AddFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public IEnumerator GetEnumerator()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.GetEnumerator",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public Reference Add(string bstrPath)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.Add(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void OnReferenceRemoved(object sender, HierarchyNodeEventArgs args)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.OnReferenceRemoved(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public Reference AddProject(EnvDTE.Project project)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.AddProject(EnvDTE.Project)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public Reference AddActiveX(string bstrTypeLibGuid, int lMajorVer, int lMinorVer, int lLocaleId, string bstrWrapperTool)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.AddActiveX(System.String,System.Int32,System.Int32,System.Int32,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public Reference Item(object index)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.Item(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void IEventSource<_dispReferencesEvents>.OnSinkRemoved(_dispReferencesEvents sink)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.Microsoft#VisualStudio#Project#IEventSource{VSLangProj#_dispReferencesEvents}#OnSinkRemoved(VSLangProj._dispReferencesEvents)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public Reference Find(string bstrIdentity)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.Find(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "container",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAReferences.container",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public object Parent",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferences.Parent",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public EnvDTE.Project ContainingProject",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferences.ContainingProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public EnvDTE.DTE DTE",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferences.DTE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Count",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferences.Count",
              "XmlDocumentation": ""
            }
          ],
          "Events": [
            {
              "Syntax": {
                "Content": "ReferenceRemoved",
                "XmlDocumentation": ""
              },
              "Id": "E:Microsoft.VisualStudio.Project.Automation.OAReferences.ReferenceRemoved",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReferenceChanged",
                "XmlDocumentation": ""
              },
              "Id": "E:Microsoft.VisualStudio.Project.Automation.OAReferences.ReferenceChanged",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReferenceAdded",
                "XmlDocumentation": ""
              },
              "Id": "E:Microsoft.VisualStudio.Project.Automation.OAReferences.ReferenceAdded",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAReferences(ReferenceContainerNode containerNode)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferences.#ctor(Microsoft.VisualStudio.Project.ReferenceContainerNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAReferences\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferences\">\r\n    <summary>\r\n    Represents the automation object for the equivalent ReferenceContainerNode object\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAReferences",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferences\">\r\n    <summary>\r\n    Represents the automation object for the equivalent ReferenceContainerNode object\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "Syntax": {
                "Content": "public override int MinorVersion",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.MinorVersion",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override prjReferenceType Type",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.Type",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int RevisionNumber",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.RevisionNumber",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Identity",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.Identity",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int BuildNumber",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.BuildNumber",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Version",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.Version",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Culture",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.Culture",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string PublicKeyToken",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.PublicKeyToken",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int MajorVersion",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.MajorVersion",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool StrongName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.StrongName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Name",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.Name",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAAssemblyReference(AssemblyReferenceNode assemblyReference): base (assemblyReference)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference.#ctor(Microsoft.VisualStudio.Project.AssemblyReferenceNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAAssemblyReference\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAAssemblyReference",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual object get_Extender(string ExtenderName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.get_Extender(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Remove()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Remove",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "referenceNode",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.referenceNode",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual string ExtenderCATID",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.ExtenderCATID",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual bool CopyLocal",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.CopyLocal",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project SourceProject",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.SourceProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected RefType BaseReferenceNode",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.BaseReferenceNode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual prjReferenceType Type",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Type",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string Name",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Name",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int MajorVersion",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.MajorVersion",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.DTE DTE",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.DTE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual bool StrongName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.StrongName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual References Collection",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Collection",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string Identity",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Identity",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int RevisionNumber",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.RevisionNumber",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string PublicKeyToken",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.PublicKeyToken",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string Culture",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Culture",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string Path",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Path",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int BuildNumber",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.BuildNumber",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int MinorVersion",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.MinorVersion",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string Description",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Description",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual object ExtenderNames",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.ExtenderNames",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project ContainingProject",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.ContainingProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string Version",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.Version",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected OAReferenceBase(RefType referenceNode)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1.#ctor(`0)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class OAReferenceBase<RefType>\r\n    where RefType : ReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1\">\r\n    <summary>\r\n    Represents the automation equivalent of ReferenceNode\r\n    </summary>\r\n    <typeparam name=\"RefType\"></typeparam>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceBase`1\">\r\n    <summary>\r\n    Represents the automation equivalent of ReferenceNode\r\n    </summary>\r\n    <typeparam name=\"RefType\"></typeparam>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFolder(string name, string kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFolder(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new folder in Solution Explorer. \r\n    </summary>\r\n    <param name=\"name\">The name of the folder node in Solution Explorer.</param>\r\n    <param name=\"kind\">The type of folder to add. The available values are based on vsProjectItemsKindConstants and vsProjectItemKindConstants</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFolder(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFolder(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new folder in Solution Explorer. \r\n    </summary>\r\n    <param name=\"name\">The name of the folder node in Solution Explorer.</param>\r\n    <param name=\"kind\">The type of folder to add. The available values are based on vsProjectItemsKindConstants and vsProjectItemKindConstants</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFromFileCopy(string filePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFileCopy(System.String)\">\r\n    <summary>\r\n    Copies a source file and adds it to the project. \r\n    </summary>\r\n    <param name=\"filePath\">The path and file name of the project item to be added.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFileCopy(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFileCopy(System.String)\">\r\n    <summary>\r\n    Copies a source file and adds it to the project. \r\n    </summary>\r\n    <param name=\"filePath\">The path and file name of the project item to be added.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual IEnumerator GetEnumerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetEnumerator\">\r\n    <summary>\r\n    Returns an enumeration for items in a collection. \r\n    </summary>\r\n    <returns>An IEnumerator for this object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetEnumerator",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetEnumerator\">\r\n    <summary>\r\n    Returns an enumeration for items in a collection. \r\n    </summary>\r\n    <returns>An IEnumerator for this object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected IList<EnvDTE.ProjectItem> GetListOfProjectItems()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetListOfProjectItems\">\r\n    <summary>\r\n    Retrives a list of items associated with the current node.\r\n    </summary>\r\n    <returns>A List of project items</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetListOfProjectItems",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.GetListOfProjectItems\">\r\n    <summary>\r\n    Retrives a list of items associated with the current node.\r\n    </summary>\r\n    <returns>A List of project items</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFromDirectory(string directory)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromDirectory(System.String)\">\r\n    <summary>\r\n    Adds one or more ProjectItem objects from a directory to the ProjectItems collection. \r\n    </summary>\r\n    <param name=\"directory\">The directory from which to add the project item.</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromDirectory(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromDirectory(System.String)\">\r\n    <summary>\r\n    Adds one or more ProjectItem objects from a directory to the ProjectItems collection. \r\n    </summary>\r\n    <param name=\"directory\">The directory from which to add the project item.</param>\r\n    <returns>A ProjectItem object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFromTemplate(string fileName, string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new project item from an existing item template file and adds it to the project. \r\n    </summary>\r\n    <param name=\"fileName\">The full path and file name of the template project file.</param>\r\n    <param name=\"name\">The file name to use for the new project item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromTemplate(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Creates a new project item from an existing item template file and adds it to the project. \r\n    </summary>\r\n    <param name=\"fileName\">The full path and file name of the template project file.</param>\r\n    <param name=\"name\">The file name to use for the new project item.</param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\")]\r\npublic virtual EnvDTE.ProjectItem Item(object index)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Item(System.Object)\">\r\n    <summary>\r\n    Get Project Item from index\r\n    </summary>\r\n    <param name=\"index\">Either index by number (1-based) or by name can be used to get the item</param>\r\n    <returns>Project Item. null is return if invalid index is specified</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Item(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Item(System.Object)\">\r\n    <summary>\r\n    Get Project Item from index\r\n    </summary>\r\n    <param name=\"index\">Either index by number (1-based) or by name can be used to get the item</param>\r\n    <returns>Project Item. null is return if invalid index is specified</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.ProjectItem AddFromFile(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFile(System.String)\">\r\n    <summary>\r\n    Adds a project item from a file that is installed in a project directory structure. \r\n    </summary>\r\n    <param name=\"fileName\">The file name of the item to add as a project item. </param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.AddFromFile(System.String)\">\r\n    <summary>\r\n    Adds a project item from a file that is installed in a project directory structure. \r\n    </summary>\r\n    <param name=\"fileName\">The file name of the item to add as a project item. </param>\r\n    <returns>A ProjectItem object. </returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "nodeWithItems",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.nodeWithItems",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "items",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.items",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.project",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal OAProject Project",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Project\">\r\n    <summary>\r\n    Defines a relationship to the associated project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Project",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Project\">\r\n    <summary>\r\n    Defines a relationship to the associated project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.DTE DTE",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.DTE",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.DTE\">\r\n    <summary>\r\n    Gets the top-level extensibility object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project ContainingProject",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.ContainingProject\">\r\n    <summary>\r\n    Gets the project hosting the project item or items.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.ContainingProject",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.ContainingProject\">\r\n    <summary>\r\n    Gets the project hosting the project item or items.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string Kind",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Kind\">\r\n    <summary>\r\n    Gets an enumeration indicating the type of object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Kind",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Kind\">\r\n    <summary>\r\n    Gets an enumeration indicating the type of object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Count",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Count\">\r\n    <summary>\r\n    Gets a value indicating the number of objects in the collection.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Count",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Count\">\r\n    <summary>\r\n    Gets a value indicating the number of objects in the collection.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object Parent",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Parent\">\r\n    <summary>\r\n    Gets the immediate parent object of a ProjectItems collection.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Parent",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Parent\">\r\n    <summary>\r\n    Gets the immediate parent object of a ProjectItems collection.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal IList<EnvDTE.ProjectItem> Items",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Items\">\r\n    <summary>\r\n    Defines an internal list of project items\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Items",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.Items\">\r\n    <summary>\r\n    Defines an internal list of project items\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal HierarchyNode NodeWithItems",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.NodeWithItems\">\r\n    <summary>\r\n    Defines the node that contains the items\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.NodeWithItems",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.NodeWithItems\">\r\n    <summary>\r\n    Defines the node that contains the items\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OANavigableProjectItems(OAProject project, HierarchyNode nodeWithItems)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Constructor.\r\n    </summary>\r\n    <param name=\"project\">The associated project.</param>\r\n    <param name=\"nodeWithItems\">The node that defines the items.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Constructor.\r\n    </summary>\r\n    <param name=\"project\">The associated project.</param>\r\n    <param name=\"nodeWithItems\">The node that defines the items.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public OANavigableProjectItems(OAProject project, IList<EnvDTE.ProjectItem> items, HierarchyNode nodeWithItems)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,System.Collections.Generic.IList{EnvDTE.ProjectItem},Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Constructor.\r\n    </summary>\r\n    <param name=\"project\">The associated project.</param>\r\n    <param name=\"items\">A list of items that will make up the items defined by this object.</param>\r\n    <param name=\"nodeWithItems\">The node that defines the items.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,System.Collections.Generic.IList{EnvDTE.ProjectItem},Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,System.Collections.Generic.IList{EnvDTE.ProjectItem},Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Constructor.\r\n    </summary>\r\n    <param name=\"project\">The associated project.</param>\r\n    <param name=\"items\">A list of items that will make up the items defined by this object.</param>\r\n    <param name=\"nodeWithItems\">The node that defines the items.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OANavigableProjectItems\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems\">\r\n    <summary>\r\n    This can navigate a collection object only (partial implementation of ProjectItems interface)\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OANavigableProjectItems\">\r\n    <summary>\r\n    This can navigate a collection object only (partial implementation of ProjectItems interface)\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private List<EnvDTE.ProjectItem> GetListOfProjectItems()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem.GetListOfProjectItems",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override EnvDTE.ProjectItems ProjectItems",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem.ProjectItems\">\r\n    <summary>\r\n    Returns the project items collection of all the references defined for this project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem.ProjectItems",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem.ProjectItems\">\r\n    <summary>\r\n    Returns the project items collection of all the references defined for this project.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAReferenceFolderItem(OAProject project, ReferenceContainerNode node): base (project, node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.ReferenceContainerNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAReferenceFolderItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem\">\r\n    <summary>\r\n    Contains OAReferenceItem objects \r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceFolderItem\">\r\n    <summary>\r\n    Contains OAReferenceItem objects \r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project AddFromTemplate(string fileName, string destination, string projectName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.AddFromTemplate(System.String,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project AddFromFile(string fileName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.AddFromFile(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project AddSolutionFolder(string Name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.AddSolutionFolder(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "hidden",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.hidden",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "node",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.node",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual bool Hidden",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.Hidden",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.DTE DTE",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.DTE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project Parent",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.Parent",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OASolutionFolder(T associatedNode)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1.#ctor(`0)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OASolutionFolder<T>\r\n    where T : HierarchyNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OASolutionFolder`1",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override EnvDTE.Window Open(string viewKind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Open(System.String)\">\r\n    <summary>\r\n    Not implemented. If called throws invalid operation exception.\r\n    </summary>\r\n    <param name=\"viewKind\"> A Constants. vsViewKind indicating the type of view to use.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Open(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Open(System.String)\">\r\n    <summary>\r\n    Not implemented. If called throws invalid operation exception.\r\n    </summary>\r\n    <param name=\"viewKind\"> A Constants. vsViewKind indicating the type of view to use.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void Delete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Delete\">\r\n    <summary>\r\n    Not implemented. If called throws invalid operation exception.\r\n    </summary>\t\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Delete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Delete\">\r\n    <summary>\r\n    Not implemented. If called throws invalid operation exception.\r\n    </summary>\t\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Name\">\r\n    <summary>\r\n    Gets or sets the name of the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Name",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Name\">\r\n    <summary>\r\n    Gets or sets the name of the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override EnvDTE.ProjectItems Collection",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Collection\">\r\n    <summary>\r\n    Gets the ProjectItems collection containing the ProjectItem object supporting this property.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Collection",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.Collection\">\r\n    <summary>\r\n    Gets the ProjectItems collection containing the ProjectItem object supporting this property.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAReferenceItem(OAProject project, ReferenceNode node): base (project, node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAReferenceItem.#ctor(Microsoft.VisualStudio.Project.Automation.OAProject,Microsoft.VisualStudio.Project.ReferenceNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAReferenceItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceItem\">\r\n    <summary>\r\n    Represents the automation object equivalent to a ReferenceNode object\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAReferenceItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAReferenceItem\">\r\n    <summary>\r\n    Represents the automation object equivalent to a ReferenceNode object\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual void RunCustomTool()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.RunCustomTool",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "fileNode",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.fileNode",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project ContainingProject",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.ContainingProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ProjectItem ProjectItem",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.ProjectItem",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual DTE DTE",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.DTE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public FileNode FileNode",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.FileNode\">\r\n    <summary>\r\n    File Node property\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.FileNode",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.FileNode\">\r\n    <summary>\r\n    File Node property\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAVSProjectItem(FileNode fileNode)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem.#ctor(Microsoft.VisualStudio.Project.FileNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAVSProjectItem\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem\">\r\n    <summary>\r\n    Represents a language-specific project item\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProjectItem\">\r\n    <summary>\r\n    Represents a language-specific project item\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void set_IndexedValue(object index1, object index2, object index3, object index4, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANullProperty.set_IndexedValue(System.Object,System.Object,System.Object,System.Object,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void let_Value(object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANullProperty.let_Value(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object get_IndexedValue(object index1, object index2, object index3, object index4)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANullProperty.get_IndexedValue(System.Object,System.Object,System.Object,System.Object)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "parent",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OANullProperty.parent",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public EnvDTE.DTE DTE",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANullProperty.DTE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string Name",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANullProperty.Name",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object Object",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANullProperty.Object",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object Application",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANullProperty.Application",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public EnvDTE.Properties Parent",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANullProperty.Parent",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public short NumIndices",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANullProperty.NumIndices",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object Value",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANullProperty.Value",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public EnvDTE.Properties Collection",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OANullProperty.Collection",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OANullProperty(OAProperties parent)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OANullProperty.#ctor(Microsoft.VisualStudio.Project.Automation.OAProperties)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OANullProperty\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OANullProperty\">\r\n    <summary>\r\n    This object defines a so called null object that is returned as instead of null. This is because callers in VSCore usually crash if a null propery is returned for them.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OANullProperty",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OANullProperty\">\r\n    <summary>\r\n    This object defines a so called null object that is returned as instead of null. This is because callers in VSCore usually crash if a null propery is returned for them.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual void CopyProject(string bstrDestFolder, string bstrDestUNCPath, prjCopyProjectOption copyProjectOption, string bstrUsername, string bstrPassword)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.CopyProject(System.String,System.String,VSLangProj.prjCopyProjectOption,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Exec(prjExecCommand command, int bSuppressUI, object varIn, out object pVarOut)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.Exec(VSLangProj.prjExecCommand,System.Int32,System.Object,System.Object@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ProjectItem CreateWebReferencesFolder()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.CreateWebReferencesFolder",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string GetUniqueFilename(object pDispatch, string bstrRoot, string bstrDesiredExt)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.GetUniqueFilename(System.Object,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void GenerateKeyPairFiles(string strPublicPrivateFile, string strPublicOnlyFile)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.GenerateKeyPairFiles(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Refresh()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.Refresh",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ProjectItem AddWebReference(string bstrUrl)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.AddWebReference(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "events",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAVSProject.events",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Automation.OAVSProject.project",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual Imports Imports",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProject.Imports",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual VSProjectEvents Events",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProject.Events",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual DTE DTE",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProject.DTE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EnvDTE.Project Project",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProject.Project",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string TemplatePath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProject.TemplatePath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual BuildManager BuildManager",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProject.BuildManager",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual References References",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProject.References",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual bool WorkOffline",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProject.WorkOffline",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ProjectItem WebReferencesFolder",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.Automation.OAVSProject.WebReferencesFolder",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OAVSProject(ProjectNode project)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Automation.OAVSProject.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OAVSProject\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProject\">\r\n    <summary>\r\n    Represents an automation friendly version of a language-specific project.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.Automation.OAVSProject",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.Automation.OAVSProject\">\r\n    <summary>\r\n    Represents an automation friendly version of a language-specific project.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Id": "N:Microsoft.VisualStudio.Project.Automation",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override void AddFileFromTemplate(string source, string target)",
                "XmlDocumentation": ""
              },
              "Id": "M:MicrosoftIT.DocProject.DocProjectNode.AddFileFromTemplate(System.String,System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "imageList",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.DocProjectNode.imageList",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "imageIndex",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.DocProjectNode.imageIndex",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "package",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.DocProjectNode.package",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override int ImageIndex",
                "XmlDocumentation": ""
              },
              "Id": "P:MicrosoftIT.DocProject.DocProjectNode.ImageIndex",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override Guid ProjectGuid",
                "XmlDocumentation": ""
              },
              "Id": "P:MicrosoftIT.DocProject.DocProjectNode.ProjectGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string ProjectType",
                "XmlDocumentation": ""
              },
              "Id": "P:MicrosoftIT.DocProject.DocProjectNode.ProjectType",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "static DocProjectNode()",
                "XmlDocumentation": ""
              },
              "Id": "M:MicrosoftIT.DocProject.DocProjectNode.#cctor",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public DocProjectNode(DocProjectPackage package)",
                "XmlDocumentation": ""
              },
              "Id": "M:MicrosoftIT.DocProject.DocProjectNode.#ctor(MicrosoftIT.DocProject.DocProjectPackage)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class DocProjectNode",
            "XmlDocumentation": ""
          },
          "Id": "T:MicrosoftIT.DocProject.DocProjectNode",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "resourceMan",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.Resources.resourceMan",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "resourceCulture",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.Resources.resourceCulture",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal static global::System.Resources.ResourceManager ResourceManager",
                "XmlDocumentation": "<member name=\"P:MicrosoftIT.DocProject.Resources.ResourceManager\">\r\n    <summary>\r\n      Returns the cached ResourceManager instance used by this class.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MicrosoftIT.DocProject.Resources.ResourceManager",
              "XmlDocumentation": "<member name=\"P:MicrosoftIT.DocProject.Resources.ResourceManager\">\r\n    <summary>\r\n      Returns the cached ResourceManager instance used by this class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static global::System.Globalization.CultureInfo Culture",
                "XmlDocumentation": "<member name=\"P:MicrosoftIT.DocProject.Resources.Culture\">\r\n    <summary>\r\n      Overrides the current thread's CurrentUICulture property for all\r\n      resource lookups using this strongly typed resource class.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:MicrosoftIT.DocProject.Resources.Culture",
              "XmlDocumentation": "<member name=\"P:MicrosoftIT.DocProject.Resources.Culture\">\r\n    <summary>\r\n      Overrides the current thread's CurrentUICulture property for all\r\n      resource lookups using this strongly typed resource class.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\r\ninternal Resources()",
                "XmlDocumentation": ""
              },
              "Id": "M:MicrosoftIT.DocProject.Resources.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class Resources",
            "XmlDocumentation": "<member name=\"T:MicrosoftIT.DocProject.Resources\">\r\n    <summary>\r\n      A strongly-typed resource class, for looking up localized strings, etc.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:MicrosoftIT.DocProject.Resources",
          "XmlDocumentation": "<member name=\"T:MicrosoftIT.DocProject.Resources\">\r\n    <summary>\r\n      A strongly-typed resource class, for looking up localized strings, etc.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "guidDocProjectFactory",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.GuidList.guidDocProjectFactory",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidDocProjectCmdSetString",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.GuidList.guidDocProjectCmdSetString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidDocProjectPkgString",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.GuidList.guidDocProjectPkgString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidDocProjectCmdSet",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.GuidList.guidDocProjectCmdSet",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidDocProjectFactoryString",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.GuidList.guidDocProjectFactoryString",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "static class GuidList\r\n\r\n\r\n\r\n;",
            "XmlDocumentation": ""
          },
          "Id": "T:MicrosoftIT.DocProject.GuidList",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override void Initialize()",
                "XmlDocumentation": "<member name=\"M:MicrosoftIT.DocProject.DocProjectPackage.Initialize\">\r\n    <summary>\r\n    Initialization of the package; this method is called right after the package is sited, so this is the place\r\n    where you can put all the initialization code that rely on services provided by VisualStudio.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:MicrosoftIT.DocProject.DocProjectPackage.Initialize",
              "XmlDocumentation": "<member name=\"M:MicrosoftIT.DocProject.DocProjectPackage.Initialize\">\r\n    <summary>\r\n    Initialization of the package; this method is called right after the package is sited, so this is the place\r\n    where you can put all the initialization code that rely on services provided by VisualStudio.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override string ProductUserContext",
                "XmlDocumentation": ""
              },
              "Id": "P:MicrosoftIT.DocProject.DocProjectPackage.ProductUserContext",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public DocProjectPackage()",
                "XmlDocumentation": "<member name=\"M:MicrosoftIT.DocProject.DocProjectPackage.#ctor\">\r\n    <summary>\r\n    Default constructor of the package.\r\n    Inside this method you can place any initialization code that does not require \r\n    any Visual Studio service because at this point the package object is created but \r\n    not sited yet inside Visual Studio environment. The place to do all the other \r\n    initialization is the Initialize method.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:MicrosoftIT.DocProject.DocProjectPackage.#ctor",
              "XmlDocumentation": "<member name=\"M:MicrosoftIT.DocProject.DocProjectPackage.#ctor\">\r\n    <summary>\r\n    Default constructor of the package.\r\n    Inside this method you can place any initialization code that does not require \r\n    any Visual Studio service because at this point the package object is created but \r\n    not sited yet inside Visual Studio environment. The place to do all the other \r\n    initialization is the Initialize method.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public sealed class DocProjectPackage\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:MicrosoftIT.DocProject.DocProjectPackage\">\r\n     <summary>\r\n     This is the class that implements the package exposed by this assembly.\r\n    \r\n     The minimum requirement for a class to be considered a valid package for Visual Studio\r\n     is to implement the IVsPackage interface and register itself with the shell.\r\n     This package uses the helper classes defined inside the Managed Package Framework (MPF)\r\n     to do it: it derives from the Package class that provides the implementation of the \r\n     IVsPackage interface and uses the registration attributes defined in the framework to \r\n     register itself and its components with the shell.\r\n     </summary>\r\n</member>\r\n"
          },
          "Id": "T:MicrosoftIT.DocProject.DocProjectPackage",
          "XmlDocumentation": "<member name=\"T:MicrosoftIT.DocProject.DocProjectPackage\">\r\n     <summary>\r\n     This is the class that implements the package exposed by this assembly.\r\n    \r\n     The minimum requirement for a class to be considered a valid package for Visual Studio\r\n     is to implement the IVsPackage interface and register itself with the shell.\r\n     This package uses the helper classes defined inside the Managed Package Framework (MPF)\r\n     to do it: it derives from the Package class that provides the implementation of the \r\n     IVsPackage interface and uses the registration attributes defined in the framework to \r\n     register itself and its components with the shell.\r\n     </summary>\r\n</member>\r\n"
        }
      ],
      "Id": "N:MicrosoftIT.DocProject",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.Kernel32, EntryPoint = \"GlobalUnlock\", SetLastError = true, CharSet = CharSet.Unicode, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\r\n        internal static extern bool GlobalUnLock(IntPtr h);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.GlobalUnLock(System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.Ole32, ExactSpelling = true, CharSet = CharSet.Unicode)]\r\n        internal static extern int OleGetClipboard(out Microsoft.VisualStudio.OLE.Interop.IDataObject dataObject);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.OleGetClipboard(Microsoft.VisualStudio.OLE.Interop.IDataObject@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.Kernel32, EntryPoint = \"GlobalLock\", SetLastError = true, CharSet = CharSet.Unicode, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\r\n        internal static extern IntPtr GlobalLock(IntPtr h);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.GlobalLock(System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\"), DllImport(ExternDll.Shell32, EntryPoint = \"SHGetSpecialFolderLocation\")]\r\n        internal static extern int SHGetSpecialFolderLocation(IntPtr hwnd, int csidl, [Out, MarshalAs(UnmanagedType.LPArray)]\r\n        IntPtr[] ppidl);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.SHGetSpecialFolderLocation(System.IntPtr,System.Int32,System.IntPtr[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.Ole32, ExactSpelling = true, CharSet = CharSet.Unicode)]\r\n        internal static extern int OleFlushClipboard();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.OleFlushClipboard",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.User32, ExactSpelling = true, CharSet = CharSet.Unicode)]\r\n        internal static extern int OpenClipboard(IntPtr newOwner);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.OpenClipboard(System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.User32, EntryPoint = \"RegisterClipboardFormatW\", SetLastError = true, CharSet = CharSet.Unicode, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\r\n        internal static extern ushort RegisterClipboardFormat(string format);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.RegisterClipboardFormat(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.Comctl32, CharSet = CharSet.Auto)]\r\n        internal static extern bool ImageList_Draw(HandleRef himl, int i, HandleRef hdcDst, int x, int y, int fStyle);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.ImageList_Draw(System.Runtime.InteropServices.HandleRef,System.Int32,System.Runtime.InteropServices.HandleRef,System.Int32,System.Int32,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.Shell32, EntryPoint = \"DragQueryFileW\", SetLastError = true, CharSet = CharSet.Unicode, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\r\n        internal static extern uint DragQueryFile(IntPtr hDrop, uint iFile, char[] lpszFile, uint cch);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.DragQueryFile(System.IntPtr,System.UInt32,System.Char[],System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.Kernel32, EntryPoint = \"GlobalSize\", SetLastError = true, CharSet = CharSet.Unicode, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\r\n        internal static extern int GlobalSize(IntPtr h);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.GlobalSize(System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.User32, ExactSpelling = true, CharSet = CharSet.Unicode)]\r\n        internal static extern int CloseClipboard();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.CloseClipboard",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.Ole32, ExactSpelling = true, CharSet = CharSet.Unicode)]\r\n        internal static extern int OleSetClipboard(Microsoft.VisualStudio.OLE.Interop.IDataObject dataObject);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.OleSetClipboard(Microsoft.VisualStudio.OLE.Interop.IDataObject)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\"), DllImport(ExternDll.Shell32, EntryPoint = \"SHGetPathFromIDList\", CharSet = System.Runtime.InteropServices.CharSet.Auto)]\r\n        internal static extern bool SHGetPathFromIDList(IntPtr pidl, IntPtr pszPath);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.SHGetPathFromIDList(System.IntPtr,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.User32, ExactSpelling = true, CharSet = CharSet.Unicode)]\r\n        internal static extern int EmptyClipboard();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.EmptyClipboard",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(ExternDll.Comctl32, CharSet = CharSet.Auto)]\r\n        internal static extern int ImageList_GetImageCount(HandleRef himl);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UnsafeNativeMethods.ImageList_GetImageCount(System.Runtime.InteropServices.HandleRef)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal static class UnsafeNativeMethods",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.UnsafeNativeMethods",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void Advise(object pUnkSink, out uint pdwCookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPoint`1.Advise(System.Object,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void GetConnectionInterface(out Guid pIID)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPoint`1.GetConnectionInterface(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void GetConnectionPointContainer(out IConnectionPointContainer ppCPC)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPoint`1.GetConnectionPointContainer(Microsoft.VisualStudio.OLE.Interop.IConnectionPointContainer@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Unadvise(uint dwCookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPoint`1.Unadvise(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void EnumConnections(out IEnumConnections ppEnum)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPoint`1.EnumConnections(Microsoft.VisualStudio.OLE.Interop.IEnumConnections@)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "source",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConnectionPoint`1.source",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "container",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConnectionPoint`1.container",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "nextCookie",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConnectionPoint`1.nextCookie",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "sinks",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConnectionPoint`1.sinks",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal ConnectionPoint(ConnectionPointContainer container, IEventSource<SinkType> source)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPoint`1.#ctor(Microsoft.VisualStudio.Project.ConnectionPointContainer,Microsoft.VisualStudio.Project.IEventSource{`0})",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class ConnectionPoint<SinkType>\r\n    where SinkType : class\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ConnectionPoint`1",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OutputTypeConverter(): base (typeof (OutputType))",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputTypeConverter.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OutputTypeConverter",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.OutputTypeConverter",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual string GetOptionHelp()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectOptions.GetOptionHelp",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public int FileAlignment",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.FileAlignment",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool SuppressLogo",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.SuppressLogo",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string RootNamespace",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.RootNamespace",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool PdbOnly",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.PdbOnly",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string XmlDocFileName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.XmlDocFileName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public ModuleKindFlags ModuleKind",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.ModuleKind",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string Win32Icon",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.Win32Icon",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public long BaseAddress",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.BaseAddress",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool AllowUnsafeCode",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.AllowUnsafeCode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object CodePage",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectOptions.CodePage\">\r\n    <devdoc>must be an int if not null</devdoc>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.CodePage",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectOptions.CodePage\">\r\n    <devdoc>must be an int if not null</devdoc>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int[] SuppressedWarnings",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.SuppressedWarnings",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public StringCollection ReferencedModules",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.ReferencedModules",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool NoStandardLibrary",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.NoStandardLibrary",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool EncodeOutputInUtf8",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.EncodeOutputInUtf8",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool EmitManifest",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.EmitManifest",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string RecursiveWildcard",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.RecursiveWildcard",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public FrameworkName TargetFrameworkMoniker",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.TargetFrameworkMoniker",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object UserLocaleId",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectOptions.UserLocaleId\">\r\n    <devdoc>must be an int if not null.</devdoc>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.UserLocaleId",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectOptions.UserLocaleId\">\r\n    <devdoc>must be an int if not null.</devdoc>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool CheckedArithmetic",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.CheckedArithmetic",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool DisplayCommandLineHelp",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.DisplayCommandLineHelp",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string Config",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.Config",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public StringCollection AdditionalSearchPaths",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.AdditionalSearchPaths",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool Optimize",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.Optimize",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool HeuristicReferenceResolution",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.HeuristicReferenceResolution",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string BugReportFileName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.BugReportFileName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool IncrementalCompile",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.IncrementalCompile",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool FullyQualifyPaths",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.FullyQualifyPaths",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool CompileAndExecute",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.CompileAndExecute",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public StringCollection DefinedPreprocessorSymbols",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectOptions.DefinedPreprocessorSymbols",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ProjectOptions()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectOptions.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ProjectOptions",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectOptions",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual string FileName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.DependentFileNodeProperties.FileName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual BuildAction BuildAction",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.DependentFileNodeProperties.BuildAction",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string FullPath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.DependentFileNodeProperties.FullPath",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public DependentFileNodeProperties(HierarchyNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNodeProperties.#ctor(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class DependentFileNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.DependentFileNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override int GetCfgProvider(out IVsCfgProvider p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"The service provider is used by the PropertiesEditorLauncher\")]\r\npublic override object GetEditor(Type editorBaseType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetEditor(System.Type)\">\r\n    <summary>\r\n    ICustomTypeDescriptor.GetEditor\r\n    To enable the \"Property Pages\" button on the properties browser\r\n    the browse object (project properties) need to be unmanaged\r\n    or it needs to provide an editor of type ComponentEditor.\r\n    </summary>\r\n    <param name=\"editorBaseType\">Type of the editor</param>\r\n    <returns>Editor</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetEditor(System.Type)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetEditor(System.Type)\">\r\n    <summary>\r\n    ICustomTypeDescriptor.GetEditor\r\n    To enable the \"Property Pages\" button on the properties browser\r\n    the browse object (project properties) need to be unmanaged\r\n    or it needs to provide an editor of type ComponentEditor.\r\n    </summary>\r\n    <param name=\"editorBaseType\">Type of the editor</param>\r\n    <returns>Editor</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string FullPath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNodeProperties.FullPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string ProjectFolder",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNodeProperties.ProjectFolder",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string FileName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNodeProperties.FileName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string ProjectFile",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNodeProperties.ProjectFile",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ProjectNodeProperties(ProjectNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNodeProperties.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ProjectNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "replaced",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SRDescriptionAttribute.replaced",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override string Description",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SRDescriptionAttribute.Description",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public SRDescriptionAttribute(string description): base (description)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SRDescriptionAttribute.#ctor(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal sealed class SRDescriptionAttribute",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SRDescriptionAttribute",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private void RaiseBeforeProjectFileClosed(bool removed)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.RaiseBeforeProjectFileClosed(System.Boolean)\">\r\n    <summary>\r\n    Raises the before  project file closed event.\r\n    </summary>\r\n    <param name=\"added\">true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.RaiseBeforeProjectFileClosed(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.RaiseBeforeProjectFileClosed(System.Boolean)\">\r\n    <summary>\r\n    Raises the before  project file closed event.\r\n    </summary>\r\n    <param name=\"added\">true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnAfterOpenProject(IVsHierarchy hierarchy, int added)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void RaiseAfterProjectFileOpened(bool added)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.RaiseAfterProjectFileOpened(System.Boolean)\">\r\n    <summary>\r\n    Raises after project file opened event.\r\n    </summary>\r\n    <param name=\"added\">True if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.RaiseAfterProjectFileOpened(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.RaiseAfterProjectFileOpened(System.Boolean)\">\r\n    <summary>\r\n    Raises after project file opened event.\r\n    </summary>\r\n    <param name=\"added\">True if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnBeforeCloseProject(IVsHierarchy hierarchy, int removed)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            }
          ],
          "Events": [
            {
              "Syntax": {
                "Content": "AfterProjectFileOpened",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"E:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.AfterProjectFileOpened\" -->\r\n"
              },
              "Id": "E:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.AfterProjectFileOpened",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"E:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.AfterProjectFileOpened\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "BeforeProjectFileClosed",
                "XmlDocumentation": "<member name=\"E:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.BeforeProjectFileClosed\">\r\n    <summary>\r\n    Event raised before the project file closed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "E:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.BeforeProjectFileClosed",
              "XmlDocumentation": "<member name=\"E:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.BeforeProjectFileClosed\">\r\n    <summary>\r\n    Event raised before the project file closed.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal SolutionListenerForProjectEvents(IServiceProvider serviceProvider): base (serviceProvider)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents.#ctor(System.IServiceProvider)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class SolutionListenerForProjectEvents",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents\">\r\n    <summary>\r\n    This class triggers the project events for \"our\" hierrachies.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SolutionListenerForProjectEvents\">\r\n    <summary>\r\n    This class triggers the project events for \"our\" hierrachies.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "internal void ObserveItem(string fileName, uint id)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.ObserveItem(System.String,System.UInt32)\">\r\n    <summary>\r\n    Observe when the given file is updated on disk.\r\n    </summary>\r\n    <param name=\"fileName\">File to observe.</param>\r\n    <param name=\"id\">The item id of the item to observe.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileChangeManager.ObserveItem(System.String,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.ObserveItem(System.String,System.UInt32)\">\r\n    <summary>\r\n    Observe when the given file is updated on disk.\r\n    </summary>\r\n    <param name=\"fileName\">File to observe.</param>\r\n    <param name=\"id\">The item id of the item to observe.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "int IVsFileChangeEvents.FilesChanged(uint numberOfFilesChanged, string[] filesChanged, uint[] flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#FilesChanged(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Called when one of the file have changed on disk.\r\n    </summary>\r\n    <param name=\"numberOfFilesChanged\">Number of files changed.</param>\r\n    <param name=\"filesChanged\">Array of file names.</param>\r\n    <param name=\"flags\">Array of flags indicating the type of changes. See _VSFILECHANGEFLAGS.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#FilesChanged(System.UInt32,System.String[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#FilesChanged(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Called when one of the file have changed on disk.\r\n    </summary>\r\n    <param name=\"numberOfFilesChanged\">Number of files changed.</param>\r\n    <param name=\"filesChanged\">Array of file names.</param>\r\n    <param name=\"flags\">Array of flags indicating the type of changes. See _VSFILECHANGEFLAGS.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.Dispose\">\r\n    <summary>\r\n    Disposes resources.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileChangeManager.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.Dispose\">\r\n    <summary>\r\n    Disposes resources.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void StopObservingItem(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.StopObservingItem(System.String)\">\r\n    <summary>\r\n    Stop observing when the file is updated on disk.\r\n    </summary>\r\n    <param name=\"fileName\">File to stop observing.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileChangeManager.StopObservingItem(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.StopObservingItem(System.String)\">\r\n    <summary>\r\n    Stop observing when the file is updated on disk.\r\n    </summary>\r\n    <param name=\"fileName\">File to stop observing.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void ObserveItem(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.ObserveItem(System.String)\">\r\n    <summary>\r\n    Observe when the given file is updated on disk. In this case we do not care about the item id that represents the file in the hierarchy.\r\n    </summary>\r\n    <param name=\"fileName\">File to observe.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileChangeManager.ObserveItem(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.ObserveItem(System.String)\">\r\n    <summary>\r\n    Observe when the given file is updated on disk. In this case we do not care about the item id that represents the file in the hierarchy.\r\n    </summary>\r\n    <param name=\"fileName\">File to observe.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "int IVsFileChangeEvents.DirectoryChanged(string directory)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#DirectoryChanged(System.String)\">\r\n    <summary>\r\n    Notifies clients of changes made to a directory. \r\n    </summary>\r\n    <param name=\"directory\">Name of the directory that had a change.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#DirectoryChanged(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.Microsoft#VisualStudio#Shell#Interop#IVsFileChangeEvents#DirectoryChanged(System.String)\">\r\n    <summary>\r\n    Notifies clients of changes made to a directory. \r\n    </summary>\r\n    <param name=\"directory\">Name of the directory that had a change.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void IgnoreItemChanges(string fileName, bool ignore)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.IgnoreItemChanges(System.String,System.Boolean)\">\r\n    <summary>\r\n    Ignore item file changes for the specified item.\r\n    </summary>\r\n    <param name=\"fileName\">File to ignore observing.</param>\r\n    <param name=\"ignore\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileChangeManager.IgnoreItemChanges(System.String,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.IgnoreItemChanges(System.String,System.Boolean)\">\r\n    <summary>\r\n    Ignore item file changes for the specified item.\r\n    </summary>\r\n    <param name=\"fileName\">File to ignore observing.</param>\r\n    <param name=\"ignore\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "fileChangeService",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangeManager.fileChangeService\">\r\n    <summary>\r\n    Reference to the FileChange service.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.FileChangeManager.fileChangeService",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangeManager.fileChangeService\">\r\n    <summary>\r\n    Reference to the FileChange service.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "observedItems",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangeManager.observedItems\">\r\n    <summary>\r\n    Maps between the observed item identified by its filename (in canonicalized form) and the cookie used for subscribing \r\n    to the events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.FileChangeManager.observedItems",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangeManager.observedItems\">\r\n    <summary>\r\n    Maps between the observed item identified by its filename (in canonicalized form) and the cookie used for subscribing \r\n    to the events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "disposed",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangeManager.disposed\">\r\n    <summary>\r\n    Has Disposed already been called?\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.FileChangeManager.disposed",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangeManager.disposed\">\r\n    <summary>\r\n    Has Disposed already been called?\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Events": [
            {
              "Syntax": {
                "Content": "FileChangedOnDisk",
                "XmlDocumentation": "<member name=\"E:Microsoft.VisualStudio.Project.FileChangeManager.FileChangedOnDisk\">\r\n    <summary>\r\n    Event that is raised when one of the observed file names have changed on disk.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "E:Microsoft.VisualStudio.Project.FileChangeManager.FileChangedOnDisk",
              "XmlDocumentation": "<member name=\"E:Microsoft.VisualStudio.Project.FileChangeManager.FileChangedOnDisk\">\r\n    <summary>\r\n    Event that is raised when one of the observed file names have changed on disk.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal FileChangeManager(IServiceProvider serviceProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.#ctor(System.IServiceProvider)\">\r\n    <summary>\r\n    Overloaded ctor.\r\n    </summary>\r\n    <param name=\"nodeParam\">An instance of a project item.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileChangeManager.#ctor(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangeManager.#ctor(System.IServiceProvider)\">\r\n    <summary>\r\n    Overloaded ctor.\r\n    </summary>\r\n    <param name=\"nodeParam\">An instance of a project item.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "internal class FileChangeManager\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.FileChangeManager\">\r\n    <summary>\r\n    This object is in charge of reloading nodes that have file monikers that can be listened to changes\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.FileChangeManager",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.FileChangeManager\">\r\n    <summary>\r\n    This object is in charge of reloading nodes that have file monikers that can be listened to changes\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override void Dispose(bool disposing)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectPackage.Dispose(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override void Initialize()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectPackage.Initialize",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "solutionListeners",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectPackage.solutionListeners\">\r\n    <summary>\r\n    This is the place to register all the solution listeners.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectPackage.solutionListeners",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectPackage.solutionListeners\">\r\n    <summary>\r\n    This is the place to register all the solution listeners.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected internal IList<SolutionListener> SolutionListeners",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectPackage.SolutionListeners\">\r\n    <summary>\r\n    Add your listener to this list. They should be added in the overridden Initialize befaore calling the base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectPackage.SolutionListeners",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectPackage.SolutionListeners\">\r\n    <summary>\r\n    Add your listener to this list. They should be added in the overridden Initialize befaore calling the base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public abstract string ProductUserContext",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectPackage.ProductUserContext",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class ProjectPackage\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectPackage\">\r\n    <summary>\r\n    Defines abstract package.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectPackage",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectPackage\">\r\n    <summary>\r\n    Defines abstract package.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int OnAfterMergeSolution(object pUnkReserved)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterMergeSolution(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA1806:DoNotIgnoreMethodResults\", MessageId = \"Microsoft.VisualStudio.Shell.Interop.IVsSolution.UnadviseSolutionEvents(System.UInt32)\")]\r\nprotected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeCloseSolution(object pUnkReserved)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeCloseSolution(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRenameProject(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeCloseProject(IVsHierarchy hierarchy, int removed)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryUnloadProject(IVsHierarchy pRealHierarchy, ref int cancel)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryCloseSolution(object pUnkReserved, ref int cancel)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryCloseSolution(System.Object,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryCloseProject(IVsHierarchy hierarchy, int removing, ref int cancel)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeUnloadProject(IVsHierarchy realHierarchy, IVsHierarchy rtubHierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterChangeProjectParent(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryChangeProjectParent(IVsHierarchy hierarchy, IVsHierarchy newParentHier, ref int cancel)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)\">\r\n    <summary>\r\n    Fired before a project is moved from one parent to another in the solution explorer\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.OnQueryChangeProjectParent(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32@)\">\r\n    <summary>\r\n    Fired before a project is moved from one parent to another in the solution explorer\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeOpeningChildren(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterAsynchOpenProject(IVsHierarchy hierarchy, int added)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterAsynchOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterCloseSolution(object reserved)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterCloseSolution(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterOpenSolution(object pUnkReserved, int fNewSolution)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterOpenSolution(System.Object,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterLoadProject(IVsHierarchy stubHierarchy, IVsHierarchy realHierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterOpenProject(IVsHierarchy hierarchy, int added)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterClosingChildren(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Init()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.Init",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterOpeningChildren(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnAfterOpeningChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeClosingChildren(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.OnBeforeClosingChildren(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "eventsCookie",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SolutionListener.eventsCookie",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "serviceProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SolutionListener.serviceProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "solution",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SolutionListener.solution",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SolutionListener.isDisposed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SolutionListener.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SolutionListener.Mutex",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SolutionListener.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected IServiceProvider ServiceProvider",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SolutionListener.ServiceProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected IVsSolution Solution",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SolutionListener.Solution",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public IVsSolutionEvents InteropSafeIVsSolutionEvents",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SolutionListener.InteropSafeIVsSolutionEvents",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected uint EventsCookie",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SolutionListener.EventsCookie",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected SolutionListener(IServiceProvider serviceProviderParameter)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListener.#ctor(System.IServiceProvider)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class SolutionListener\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SolutionListener",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public int get_MustUpdateBefore(out int mustUpdateBefore)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_MustUpdateBefore(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_ReferredProject(out object unknownProject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_ReferredProject(System.Object@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_HelpFile(out string helpFile)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_HelpFile(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_Description(out string description)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_Description(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic int get_HelpContext(out uint helpContext)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_HelpContext(System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_CanonicalName(out string canonicalName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_CanonicalName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_Type(out System.Guid guidType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.get_Type(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private IVsHierarchy GetReferencedHierarchy()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.GetReferencedHierarchy",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "referencedProjectGuid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.BuildDependency.referencedProjectGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectMgr",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.BuildDependency.projectMgr",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic BuildDependency(ProjectNode projectMgr, Guid projectReference)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildDependency.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.Guid)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class BuildDependency\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildDependency",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private void UpdateDependencyListWithSubProjects(IBuildDependencyOnProjectContainer projectNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.UpdateDependencyListWithSubProjects(Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer)\">\r\n    <summary>\r\n    Update dependency list\r\n    </summary>\r\n    <param name=\"projectNode\">Project node to be updated. If null then all ProjectContainer nodes are updated</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.UpdateDependencyListWithSubProjects(Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.UpdateDependencyListWithSubProjects(Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer)\">\r\n    <summary>\r\n    Update dependency list\r\n    </summary>\r\n    <param name=\"projectNode\">Project node to be updated. If null then all ProjectContainer nodes are updated</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private List<IBuildDependencyOnProjectContainer> GetListOfProjectContainerNodes()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.GetListOfProjectContainerNodes\">\r\n    <summary>\r\n    Enum all projects in the solution and collect all that derives from ProjectContainerNode\r\n    </summary>\r\n    <returns>List of ProjectContainerNode nodes</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.GetListOfProjectContainerNodes",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.GetListOfProjectContainerNodes\">\r\n    <summary>\r\n    Enum all projects in the solution and collect all that derives from ProjectContainerNode\r\n    </summary>\r\n    <returns>List of ProjectContainerNode nodes</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnAfterOpenProject(IVsHierarchy hierarchy, int added)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)\">\r\n    <summary>\r\n    Update build dependency list if solution is fully loaded\r\n    </summary>\r\n    <param name=\"hierarchy\"></param>\r\n    <param name=\"added\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)\">\r\n    <summary>\r\n    Update build dependency list if solution is fully loaded\r\n    </summary>\r\n    <param name=\"hierarchy\"></param>\r\n    <param name=\"added\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static void AddBuildDependenyToNestedProject(IBuildDependencyUpdate projectContainer, IVsHierarchy nestedProject)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.AddBuildDependenyToNestedProject(Microsoft.VisualStudio.Project.IBuildDependencyUpdate,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Add build dependency to ProjectContainerNode if IVsBuildDependency is supported by the nested project\r\n    </summary>\r\n    <param name=\"projectContainer\">Project Container where we should add the build dependency</param>\r\n    <param name=\"nestedProject\">Nested project to set a build dependency against</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.AddBuildDependenyToNestedProject(Microsoft.VisualStudio.Project.IBuildDependencyUpdate,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.AddBuildDependenyToNestedProject(Microsoft.VisualStudio.Project.IBuildDependencyUpdate,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Add build dependency to ProjectContainerNode if IVsBuildDependency is supported by the nested project\r\n    </summary>\r\n    <param name=\"projectContainer\">Project Container where we should add the build dependency</param>\r\n    <param name=\"nestedProject\">Nested project to set a build dependency against</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnAfterOpenSolution(object pUnkReserved, int fNewSolution)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.OnAfterOpenSolution(System.Object,System.Int32)\">\r\n    <summary>\r\n    Called at load time when solution has finished opening.\r\n    </summary>\r\n    <param name=\"pUnkReserved\">reserved</param>\r\n    <param name=\"fNewSolution\">true if this is a new solution</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.OnAfterOpenSolution(System.Object,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.OnAfterOpenSolution(System.Object,System.Int32)\">\r\n    <summary>\r\n    Called at load time when solution has finished opening.\r\n    </summary>\r\n    <param name=\"pUnkReserved\">reserved</param>\r\n    <param name=\"fNewSolution\">true if this is a new solution</param>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public SolutionListenerForBuildDependencyUpdate(IServiceProvider serviceProvider): base (serviceProvider)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate.#ctor(System.IServiceProvider)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "class SolutionListenerForBuildDependencyUpdate\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate\">\r\n    <summary>\r\n    The purpose of this class is to set a build dependency from a modeling project to all its sub projects\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SolutionListenerForBuildDependencyUpdate\">\r\n    <summary>\r\n    The purpose of this class is to set a build dependency from a modeling project to all its sub projects\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override void CreateProject(string fileName, string location, string name, uint flags, ref Guid projectGuid, out IntPtr project, out int canceled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)\">\r\n    <summary>\r\n    Rather than directly creating the project, ask VS to initate the process of\r\n    creating an aggregated project in case we are flavored. We will be called\r\n    on the IVsAggregatableProjectFactory to do the real project creation.\r\n    </summary>\r\n    <param name=\"fileName\">Project file</param>\r\n    <param name=\"location\">Path of the project</param>\r\n    <param name=\"name\">Project Name</param>\r\n    <param name=\"flags\">Creation flags</param>\r\n    <param name=\"projectGuid\">Guid of the project</param>\r\n    <param name=\"project\">Project that end up being created by this method</param>\r\n    <param name=\"canceled\">Was the project creation canceled</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)\">\r\n    <summary>\r\n    Rather than directly creating the project, ask VS to initate the process of\r\n    creating an aggregated project in case we are flavored. We will be called\r\n    on the IVsAggregatableProjectFactory to do the real project creation.\r\n    </summary>\r\n    <param name=\"fileName\">Project file</param>\r\n    <param name=\"location\">Path of the project</param>\r\n    <param name=\"name\">Project Name</param>\r\n    <param name=\"flags\">Creation flags</param>\r\n    <param name=\"projectGuid\">Guid of the project</param>\r\n    <param name=\"project\">Project that end up being created by this method</param>\r\n    <param name=\"canceled\">Was the project creation canceled</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool CanCreateProjectAsynchronously(ref Guid rguidProjectID, string filename, uint flags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.CanCreateProjectAsynchronously(System.Guid@,System.String,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override string ProjectTypeGuids(string file)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.ProjectTypeGuids(System.String)\">\r\n    <summary>\r\n    Retrives the list of project guids from the project file.\r\n    If you don't want your project to be flavorable, override\r\n    to only return your project factory Guid:\r\n         return this.GetType().GUID.ToString(\"B\");\r\n    </summary>\r\n    <param name=\"file\">Project file to look into to find the Guid list</param>\r\n    <returns>List of semi-colon separated GUIDs</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.ProjectTypeGuids(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.ProjectTypeGuids(System.String)\">\r\n    <summary>\r\n    Retrives the list of project guids from the project file.\r\n    If you don't want your project to be flavorable, override\r\n    to only return your project factory Guid:\r\n         return this.GetType().GUID.ToString(\"B\");\r\n    </summary>\r\n    <param name=\"file\">Project file to look into to find the Guid list</param>\r\n    <returns>List of semi-colon separated GUIDs</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void OnBeforeCreateProjectAsync(ref Guid rguidProjectID, string filename, string location, string pszName, uint flags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.OnBeforeCreateProjectAsync(System.Guid@,System.String,System.String,System.String,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"The global property handles is instantiated here and used in the project node that will Dispose it\")]\r\nprotected override object PreCreateForOuter(IntPtr outerProjectIUnknown)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.PreCreateForOuter(System.IntPtr)\">\r\n    <summary>\r\n    Instantiate the project class, but do not proceed with the\r\n    initialization just yet.\r\n    Delegate to CreateProject implemented by the derived class.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.PreCreateForOuter(System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectFactory.PreCreateForOuter(System.IntPtr)\">\r\n    <summary>\r\n    Instantiate the project class, but do not proceed with the\r\n    initialization just yet.\r\n    Delegate to CreateProject implemented by the derived class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private IProjectEvents GetProjectEventsProvider()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.GetProjectEventsProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected abstract ProjectNode CreateProject();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual IVsTask CreateProjectAsync(ref Guid rguidProjectID, string filename, string location, string pszName, uint flags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.CreateProjectAsync(System.Guid@,System.String,System.String,System.String,System.UInt32)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "package",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFactory.package",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "buildProject",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectFactory.buildProject\">\r\n    <summary>\r\n    The msbuild project for the project file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFactory.buildProject",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectFactory.buildProject\">\r\n    <summary>\r\n    The msbuild project for the project file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "buildEngine",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectFactory.buildEngine\">\r\n    <summary>\r\n    The msbuild engine that we are going to use.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFactory.buildEngine",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectFactory.buildEngine\">\r\n    <summary>\r\n    The msbuild engine that we are going to use.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "site",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFactory.site",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "taskSchedulerService",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFactory.taskSchedulerService",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected MSBuild.ProjectCollection BuildEngine",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectFactory.BuildEngine\">\r\n    <summary>\r\n    The msbuild engine that we are going to use.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectFactory.BuildEngine",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectFactory.BuildEngine\">\r\n    <summary>\r\n    The msbuild engine that we are going to use.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected MSBuild.Project BuildProject",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectFactory.BuildProject\">\r\n    <summary>\r\n    The msbuild project for the temporary project file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectFactory.BuildProject",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectFactory.BuildProject\">\r\n    <summary>\r\n    The msbuild project for the temporary project file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected System.IServiceProvider Site",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectFactory.Site",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected Microsoft.VisualStudio.Shell.Package Package",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectFactory.Package",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected ProjectFactory(Microsoft.VisualStudio.Shell.Package package)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectFactory.#ctor(Microsoft.VisualStudio.Shell.Package)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class ProjectFactory\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectFactory\">\r\n    <summary>\r\n    Creates projects within the solution\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectFactory",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectFactory\">\r\n    <summary>\r\n    Creates projects within the solution\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[DllImport(\"user32.dll\", EntryPoint = \"IsDialogMessageA\", SetLastError = true, CharSet = CharSet.Ansi, ExactSpelling = true, CallingConvention = CallingConvention.StdCall)]\r\n        public static extern bool IsDialogMessageA(IntPtr hDlg, ref MSG msg);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NativeMethods.IsDialogMessageA(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.MSG@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[DllImport(\"user32.dll\", ExactSpelling = true, CharSet = CharSet.Auto)]\r\n        public static extern bool DestroyIcon(IntPtr handle);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NativeMethods.DestroyIcon(System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public static bool IsSamePath(string file1, string file2)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NativeMethods.IsSamePath(System.String,System.String)\">\r\n    <devdoc>\r\n    Please use this \"approved\" method to compare file names.\r\n    </devdoc>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NativeMethods.IsSamePath(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NativeMethods.IsSamePath(System.String,System.String)\">\r\n    <devdoc>\r\n    Please use this \"approved\" method to compare file names.\r\n    </devdoc>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\r\npublic static string GetAbsolutePath(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NativeMethods.GetAbsolutePath(System.String)\">\r\n    <devdoc>\r\n    This method takes a file URL and converts it to an absolute path.  The trick here is that\r\n    if there is a '#' in the path, everything after this is treated as a fragment.  So\r\n    we need to append the fragment to the end of the path.\r\n    </devdoc>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NativeMethods.GetAbsolutePath(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NativeMethods.GetAbsolutePath(System.String)\">\r\n    <devdoc>\r\n    This method takes a file URL and converts it to an absolute path.  The trick here is that\r\n    if there is a '#' in the path, everything after this is treated as a fragment.  So\r\n    we need to append the fragment to the end of the path.\r\n    </devdoc>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[DllImport(\"User32\", ExactSpelling = true, CharSet = CharSet.Auto)]\r\n        public static extern IntPtr SetParent(IntPtr hWnd, IntPtr hWndParent);",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NativeMethods.SetParent(System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Changes the parent window of the specified child window.\r\n    </summary>\r\n    <param name=\"hWnd\">Handle to the child window.</param>\r\n    <param name=\"hWndParent\">Handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>\r\n    <returns>A handle to the previous parent window indicates success. NULL indicates failure.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NativeMethods.SetParent(System.IntPtr,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NativeMethods.SetParent(System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Changes the parent window of the specified child window.\r\n    </summary>\r\n    <param name=\"hWnd\">Handle to the child window.</param>\r\n    <param name=\"hWndParent\">Handle to the new parent window. If this parameter is NULL, the desktop window becomes the new parent window.</param>\r\n    <returns>A handle to the previous parent window indicates success. NULL indicates failure.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[DllImport(\"kernel32.dll\")]\r\n        public static extern bool GetBinaryType(\r\n        [MarshalAs(UnmanagedType.LPWStr)]\r\n        string lpApplicationName, out uint lpBinaryType);",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NativeMethods.GetBinaryType(System.String,System.UInt32@)\">\r\n    <summary>\r\n    Indicates whether the file type is binary or not\r\n    </summary>\r\n    <param name=\"lpApplicationName\">Full path to the file to check</param>\r\n    <param name=\"lpBinaryType\">If file isbianry the bitness of the app is indicated by lpBinaryType value.</param>\r\n    <returns>True if the file is binary false otherwise</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NativeMethods.GetBinaryType(System.String,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NativeMethods.GetBinaryType(System.String,System.UInt32@)\">\r\n    <summary>\r\n    Indicates whether the file type is binary or not\r\n    </summary>\r\n    <param name=\"lpApplicationName\">Full path to the file to check</param>\r\n    <param name=\"lpBinaryType\">If file isbianry the bitness of the app is indicated by lpBinaryType value.</param>\r\n    <returns>True if the file is binary false otherwise</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "ILD_MASK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.ILD_MASK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_AFXFIRST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_AFXFIRST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "GMEM_ZEROINIT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.GMEM_ZEROINIT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CTLCOLORMSGBOX",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CTLCOLORMSGBOX",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDIREFRESHMENU",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDIREFRESHMENU",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WA_INACTIVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WA_INACTIVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SWP_NOMOVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.SWP_NOMOVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MOUSEACTIVATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MOUSEACTIVATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_HANDHELDFIRST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_HANDHELDFIRST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_FONTCHANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_FONTCHANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SWP_NOZORDER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.SWP_NOZORDER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDITILE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDITILE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_USEICONID",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_USEICONID",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CTLCOLORBTN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CTLCOLORBTN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SETTEXT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SETTEXT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_CLIPCHILDREN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_CLIPCHILDREN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DROPFILES",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DROPFILES",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IID_IUnknown",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IID_IUnknown",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_KEYDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_KEYDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_COMPOSITIONFULL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_COMPOSITIONFULL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLECLOSE_NOSAVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLECLOSE_NOSAVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SETHOTKEY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SETHOTKEY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PASTE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PASTE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCCREATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCCREATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MOUSEFIRST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MOUSEFIRST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCLBUTTONDBLCLK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCLBUTTONDBLCLK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_LBUTTONDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_LBUTTONDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLECLOSE_PROMPTSAVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLECLOSE_PROMPTSAVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_ENDCOMPOSITION",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_ENDCOMPOSITION",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ICONERASEBKGND",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ICONERASEBKGND",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_WININICHANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_WININICHANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SYSKEYUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SYSKEYUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSN_SETACTIVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSN_SETACTIVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_PREMATURE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_PREMATURE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SYSCHAR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SYSCHAR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ASKCBFORMATNAME",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ASKCBFORMATNAME",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CTLCOLOR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CTLCOLOR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_XBUTTONDBLCLK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_XBUTTONDBLCLK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ACTIVATEAPP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ACTIVATEAPP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_RENDERALLFORMATS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_RENDERALLFORMATS",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_TOPMOST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_TOPMOST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PAINT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PAINT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DRAWCLIPBOARD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DRAWCLIPBOARD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_PROPTITLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_PROPTITLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_KEYLAST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_KEYLAST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_RTLREADING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_RTLREADING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSBTN_MAX",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSBTN_MAX",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_INPUTLANGCHANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_INPUTLANGCHANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDOK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDOK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_ENABLESIZING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_ENABLESIZING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_EXITSIZEMOVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_EXITSIZEMOVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_STATICEDGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_STATICEDGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_XBUTTONUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_XBUTTONUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCMOUSEMOVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCMOUSEMOVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DWL_MSGRESULT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.DWL_MSGRESULT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MOUSELEAVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MOUSELEAVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_UNEXPECTED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_UNEXPECTED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PALETTEISCHANGING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PALETTEISCHANGING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ENTERSIZEMOVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ENTERSIZEMOVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_LBUTTONDBLCLK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_LBUTTONDBLCLK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SETFOCUS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SETFOCUS",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "MK_SHIFT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.MK_SHIFT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_HEADER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_HEADER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_WINDOWPOSCHANGED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_WINDOWPOSCHANGED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSN_KILLACTIVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSN_KILLACTIVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WA_ACTIVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WA_ACTIVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SIZE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SIZE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CLEAR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CLEAR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_RENDERFORMAT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_RENDERFORMAT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_ENABLETEMPLATEHANDLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_ENABLETEMPLATEHANDLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_AFXLAST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_AFXLAST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MBUTTONDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MBUTTONDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_COMPACTING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_COMPACTING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CTLCOLORLISTBOX",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CTLCOLORLISTBOX",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_KILLFOCUS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_KILLFOCUS",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_WIZARDCONTEXTHELP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_WIZARDCONTEXTHELP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_INVALIDARG",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_INVALIDARG",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_RBUTTONDBLCLK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_RBUTTONDBLCLK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_USERCHANGED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_USERCHANGED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "S_FALSE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.S_FALSE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SETICON",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SETICON",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "TRANSPARENT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.TRANSPARENT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSNRET_INVALID",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSNRET_INVALID",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WA_CLICKACTIVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WA_CLICKACTIVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ENTERMENULOOP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ENTERMENULOOP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MBUTTONDBLCLK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MBUTTONDBLCLK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDIDESTROY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDIDESTROY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_KEYDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_KEYDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_NOLONGNAMES",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_NOLONGNAMES",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "S_OK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.S_OK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_CAPTION",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_CAPTION",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_COMPOSITION",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_COMPOSITION",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PARENTNOTIFY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PARENTNOTIFY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "GMEM_MOVEABLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.GMEM_MOVEABLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_QUERYUISTATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_QUERYUISTATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_HOTKEY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_HOTKEY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "GWL_STYLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.GWL_STYLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_REFLECT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_REFLECT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_FILEMUSTEXIST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_FILEMUSTEXIST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_LEFTSCROLLBAR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_LEFTSCROLLBAR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_COMMAND",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_COMMAND",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_GETICON",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_GETICON",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDIACTIVATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDIACTIVATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_GETMINMAXINFO",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_GETMINMAXINFO",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDCLOSE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDCLOSE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DESTROYCLIPBOARD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DESTROYCLIPBOARD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MOUSEWHEEL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MOUSEWHEEL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "HTMENU",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.HTMENU",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDICASCADE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDICASCADE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCCALCSIZE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCCALCSIZE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ILD_TRANSPARENT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.ILD_TRANSPARENT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSBTN_BACK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSBTN_BACK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_HSCROLL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_HSCROLL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SYSKEYDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SYSKEYDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DWLP_MSGRESULT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.DWLP_MSGRESULT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ILD_NORMAL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.ILD_NORMAL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_NOVALIDATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_NOVALIDATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDYES",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDYES",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ENDSESSION",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ENDSESSION",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_CLIPSIBLINGS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_CLIPSIBLINGS",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSNRET_NOERROR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSNRET_NOERROR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_MINIMIZEBOX",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_MINIMIZEBOX",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_STYLECHANGED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_STYLECHANGED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ENTERIDLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ENTERIDLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_USETITLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_USETITLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ILD_ROP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.ILD_ROP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCMBUTTONDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCMBUTTONDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "MAX_PATH",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.MAX_PATH",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDRETRY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDRETRY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_VSCROLL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_VSCROLL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_XBUTTONDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_XBUTTONDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_QUIT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_QUIT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_NOPARENTNOTIFY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_NOPARENTNOTIFY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCXBUTTONDBLCLK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCXBUTTONDBLCLK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SYSCOMMAND",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SYSCOMMAND",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDIGNORE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDIGNORE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDIICONARRANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDIICONARRANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ENABLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ENABLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_TIMECHANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_TIMECHANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_DEFAULT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_DEFAULT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_NOTIMPL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_NOTIMPL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_RIGHT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_RIGHT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_ALLOWMULTISELECT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_ALLOWMULTISELECT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_POWER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_POWER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_READONLY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_READONLY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SWP_NOACTIVATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.SWP_NOACTIVATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_OVERWRITEPROMPT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_OVERWRITEPROMPT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SETREDRAW",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SETREDRAW",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_GETFONT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_GETFONT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSBTN_NEXT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSBTN_NEXT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_NOTESTFILECREATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_NOTESTFILECREATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLEIVERB_UIACTIVATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLEIVERB_UIACTIVATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_VKEYTOITEM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_VKEYTOITEM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSBTN_CANCEL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSBTN_CANCEL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_USEHEADERSUBTITLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_USEHEADERSUBTITLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ACTIVATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ACTIVATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_HIDEREADONLY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_HIDEREADONLY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCXBUTTONUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCXBUTTONUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_EXPLORER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_EXPLORER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_STARTCOMPOSITION",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_STARTCOMPOSITION",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_QUEUESYNC",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_QUEUESYNC",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_CREATEPROMPT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_CREATEPROMPT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DEVMODECHANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DEVMODECHANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CHARTOITEM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CHARTOITEM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_UPDATEUISTATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_UPDATEUISTATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MOUSELAST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MOUSELAST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_USEHEADERTITLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_USEHEADERTITLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_OVERLAPPED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_OVERLAPPED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PENWINFIRST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PENWINFIRST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DRAWITEM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DRAWITEM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_ENABLEHOOK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_ENABLEHOOK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLEIVERB_INPLACEACTIVATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLEIVERB_INPLACEACTIVATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_GETTEXT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_GETTEXT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_WINDOWPOSCHANGING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_WINDOWPOSCHANGING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_VSCROLL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_VSCROLL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_GETTEXTLENGTH",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_GETTEXTLENGTH",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_USECALLBACK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_USECALLBACK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CLSCTX_INPROC_SERVER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.CLSCTX_INPROC_SERVER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSNRET_INVALID_NOCHANGEPAGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSNRET_INVALID_NOCHANGEPAGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCLBUTTONUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCLBUTTONUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_KEYLAST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_KEYLAST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WSF_VISIBLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WSF_VISIBLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_HANDHELDLAST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_HANDHELDLAST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCRBUTTONDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCRBUTTONDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_WIZARD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_WIZARD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_ABORT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_ABORT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ROSTATUS_ReadOnly",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.ROSTATUS_ReadOnly",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_COMPAREITEM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_COMPAREITEM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCACTIVATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCACTIVATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_DISABLED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_DISABLED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_EXTENSIONDIFFERENT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_EXTENSIONDIFFERENT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MENUSELECT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MENUSELECT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_DONTADDTORECENT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_DONTADDTORECENT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_APPWINDOW",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_APPWINDOW",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MENUCHAR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MENUCHAR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_USEHBMWATERMARK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_USEHBMWATERMARK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_SHAREAWARE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_SHAREAWARE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLECLOSE_SAVEIFDIRTY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLECLOSE_SAVEIFDIRTY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_SYSMENU",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_SYSMENU",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NEXTDLGCTL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NEXTDLGCTL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "TVM_GETEDITCONTROL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.TVM_GETEDITCONTROL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_USEHBMHEADER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_USEHBMHEADER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_KEYUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_KEYUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "MK_CONTROL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.MK_CONTROL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_SELECT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_SELECT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OPAQUE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OPAQUE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_KEYFIRST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_KEYFIRST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_CONTROLPARENT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_CONTROLPARENT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDINEXT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDINEXT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SYSDEADCHAR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SYSDEADCHAR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_HSCROLLCLIPBOARD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_HSCROLLCLIPBOARD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLEIVERB_SHOW",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLEIVERB_SHOW",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_HSCROLL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_HSCROLL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_CLIENTEDGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_CLIENTEDGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_SHOWHELP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_SHOWHELP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ROSTATUS_Unknown",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.ROSTATUS_Unknown",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_ENABLETEMPLATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_ENABLETEMPLATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDISETMENU",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDISETMENU",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_RTLREADING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_RTLREADING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_POWERBROADCAST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_POWERBROADCAST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_INITDIALOG",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_INITDIALOG",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CHILDACTIVATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CHILDACTIVATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_INITMENU",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_INITMENU",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_CONTROL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_CONTROL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SHOWWINDOW",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SHOWWINDOW",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDIGETACTIVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDIGETACTIVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CANCELJOURNAL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CANCELJOURNAL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_NOINTERFACE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_NOINTERFACE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_HIDEHEADER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_HIDEHEADER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ROSTATUS_NotReadOnly",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.ROSTATUS_NotReadOnly",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "GWL_EXSTYLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.GWL_EXSTYLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_QUERYNEWPALETTE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_QUERYNEWPALETTE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "LVM_SETEXTENDEDLISTVIEWSTYLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.LVM_SETEXTENDEDLISTVIEWSTYLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_TABSTOP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_TABSTOP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DELETEITEM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DELETEITEM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CF_HDROP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.CF_HDROP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NEXTMENU",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NEXTMENU",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_LBUTTONUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_LBUTTONUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_GETDLGCODE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_GETDLGCODE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_POINTER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_POINTER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PRINT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PRINT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_INITMENUPOPUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_INITMENUPOPUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WPF_SETMINPOSITION",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WPF_SETMINPOSITION",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_DLGMODALFRAME",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_DLGMODALFRAME",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDTRYAGAIN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDTRYAGAIN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_PENDING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_PENDING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_WIZARD_LITE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_WIZARD_LITE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_NOREADONLYRETURN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_NOREADONLYRETURN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CLOSE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CLOSE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_CONTEXTHELP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_CONTEXTHELP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SWP_NOSIZE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.SWP_NOSIZE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSBTN_APPLYNOW",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSBTN_APPLYNOW",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CANCELMODE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CANCELMODE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SIZECLIPBOARD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SIZECLIPBOARD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CUT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CUT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_NOCHANGEDIR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_NOCHANGEDIR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_USESHELLITEM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_USESHELLITEM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IEI_DoNotLoadDocData",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IEI_DoNotLoadDocData",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_RBUTTONDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_RBUTTONDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_USEPSTARTPAGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_USEPSTARTPAGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MEASUREITEM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MEASUREITEM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_LONGNAMES",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_LONGNAMES",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SIZING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SIZING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_CHILD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_CHILD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DEVICECHANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DEVICECHANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLECMDERR_E_UNKNOWNGROUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLECMDERR_E_UNKNOWNGROUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WH_MOUSE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WH_MOUSE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_MAXIMIZE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_MAXIMIZE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCXBUTTONDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCXBUTTONDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_WIZARDHASFINISH",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_WIZARDHASFINISH",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "TVM_SETINSERTMARK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.TVM_SETINSERTMARK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_INPUTLANGCHANGEREQUEST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_INPUTLANGCHANGEREQUEST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CTLCOLORSCROLLBAR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CTLCOLORSCROLLBAR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NOTIFYFORMAT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NOTIFYFORMAT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MBUTTONUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MBUTTONUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_LAYERED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_LAYERED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_CHAR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_CHAR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_STRETCHWATERMARK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_STRETCHWATERMARK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCMBUTTONUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCMBUTTONUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_NOTIFY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_NOTIFY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SETTINGCHANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SETTINGCHANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLEIVERB_OPEN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLEIVERB_OPEN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_WATERMARK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_WATERMARK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_USEHICON",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_USEHICON",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLEIVERB_PRIMARY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLEIVERB_PRIMARY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MOUSEMOVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MOUSEMOVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CTLCOLOREDIT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CTLCOLOREDIT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_MODELESS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_MODELESS",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_EXITMENULOOP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_EXITMENULOOP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_PATHMUSTEXIST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_PATHMUSTEXIST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSBTN_OK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSBTN_OK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_COMMNOTIFY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_COMMNOTIFY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CONTEXTMENU",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CONTEXTMENU",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_NONETWORKBUTTON",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_NONETWORKBUTTON",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WH_GETMESSAGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WH_GETMESSAGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MOVING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MOVING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CB_SETDROPPEDWIDTH",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.CB_SETDROPPEDWIDTH",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SETFONT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SETFONT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDCANCEL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDCANCEL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDHELP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDHELP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSN_RESET",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSN_RESET",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_QUERYOPEN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_QUERYOPEN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CTLCOLORSTATIC",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CTLCOLORSTATIC",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCLBUTTONDOWN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCLBUTTONDOWN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCRBUTTONDBLCLK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCRBUTTONDBLCLK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "LVS_EX_LABELTIP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.LVS_EX_LABELTIP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_USECALLBACK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_USECALLBACK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSBTN_FINISH",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSBTN_FINISH",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_MINIMIZE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_MINIMIZE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_FAIL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_FAIL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_USEPAGELANG",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_USEPAGELANG",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCDESTROY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCDESTROY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_VISIBLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_VISIBLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_QUERYDRAGICON",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_QUERYDRAGICON",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CTLCOLORDLG",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CTLCOLORDLG",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PRINTCLIENT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PRINTCLIENT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FILE_ATTRIBUTE_READONLY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.FILE_ATTRIBUTE_READONLY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_POPUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_POPUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_QUERYENDSESSION",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_QUERYENDSESSION",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCRBUTTONUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCRBUTTONUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDABORT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDABORT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_SETCONTEXT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_SETCONTEXT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PAINTCLIPBOARD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PAINTCLIPBOARD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CHOOSEFONT_GETLOGFONT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CHOOSEFONT_GETLOGFONT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_RBUTTONUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_RBUTTONUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_NODEREFERENCELINKS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_NODEREFERENCELINKS",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CHANGECBCHAIN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CHANGECBCHAIN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DESTROY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DESTROY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NOTIFY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NOTIFY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_NOAPPLYNOW",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_NOAPPLYNOW",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_OUTOFMEMORY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_OUTOFMEMORY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_APP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_APP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_ERASEBKGND",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_ERASEBKGND",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_BORDER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_BORDER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FW_BOLD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.FW_BOLD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_HELP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_HELP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_TOOLWINDOW",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_TOOLWINDOW",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CHAR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CHAR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLECMDERR_E_NOTSUPPORTED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLECMDERR_E_NOTSUPPORTED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_USEHICON",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_USEHICON",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DISPLAYCHANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DISPLAYCHANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_USER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_USER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_USEHPLWATERMARK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_USEHPLWATERMARK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SPOOLERSTATUS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SPOOLERSTATUS",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_DLGINDIRECT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_DLGINDIRECT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSN_APPLY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSN_APPLY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PALETTECHANGED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PALETTECHANGED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_ENABLEINCLUDENOTIFY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_ENABLEINCLUDENOTIFY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDNO",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDNO",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_ACCESSDENIED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_ACCESSDENIED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WH_JOURNALPLAYBACK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WH_JOURNALPLAYBACK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_TIMER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_TIMER",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_TCARD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_TCARD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLEIVERB_PROPERTIES",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLEIVERB_PROPERTIES",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLEIVERB_HIDE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLEIVERB_HIDE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_HASHELP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_HASHELP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCPAINT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCPAINT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_MAXIMIZEBOX",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_MAXIMIZEBOX",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_RTLREADING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_RTLREADING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_DLGFRAME",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_DLGFRAME",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDIRESTORE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDIRESTORE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_COPY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_COPY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_DEFAULT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_DEFAULT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_DEADCHAR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_DEADCHAR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_LEFT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_LEFT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCMBUTTONDBLCLK",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCMBUTTONDBLCLK",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OFN_FORCESHOWHIDDEN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OFN_FORCESHOWHIDDEN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_VSCROLLCLIPBOARD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_VSCROLLCLIPBOARD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_STYLECHANGING",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_STYLECHANGING",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MOVE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MOVE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_GETHOTKEY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_GETHOTKEY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PAINTICON",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PAINTICON",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SWP_FRAMECHANGED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.SWP_FRAMECHANGED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDICREATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDICREATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SW_SHOWNORMAL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.SW_SHOWNORMAL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_USEICONID",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_USEICONID",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSBTN_HELP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSBTN_HELP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_THICKFRAME",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_THICKFRAME",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_UNDO",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_UNDO",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDCONTINUE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.IDCONTINUE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NCHITTEST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NCHITTEST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SYSCOLORCHANGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SYSCOLORCHANGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_PROPSHEETPAGE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_PROPSHEETPAGE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CHANGEUISTATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CHANGEUISTATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_NULL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_NULL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_NOCONTEXTHELP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_NOCONTEXTHELP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WS_EX_MDICHILD",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WS_EX_MDICHILD",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_GETOBJECT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_GETOBJECT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "UNDO_E_CLIENTABORT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.UNDO_E_CLIENTABORT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_SETCURSOR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_SETCURSOR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WHEEL_DELTA",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WHEEL_DELTA",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "E_HANDLE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.E_HANDLE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_IME_KEYUP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_IME_KEYUP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_PENWINLAST",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_PENWINLAST",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "GMEM_DDESHARE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.GMEM_DDESHARE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CAPTURECHANGED",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CAPTURECHANGED",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OLEIVERB_DISCARDUNDOSTATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.OLEIVERB_DISCARDUNDOSTATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_COPYDATA",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_COPYDATA",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_CREATE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_CREATE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MDIMAXIMIZE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MDIMAXIMIZE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSH_HASHELP",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSH_HASHELP",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PSP_USEREFPARENT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.PSP_USEREFPARENT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WM_MOUSEHOVER",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NativeMethods.WM_MOUSEHOVER",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal static class NativeMethods",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.NativeMethods",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public bool CopyToLocal",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceNodeProperties.CopyToLocal",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Name",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceNodeProperties.Name",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string FullPath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceNodeProperties.FullPath",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ReferenceNodeProperties(HierarchyNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNodeProperties.#ctor(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ReferenceNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReferenceNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public FrameworkNameConverter()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FrameworkNameConverter.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class FrameworkNameConverter",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FrameworkNameConverter",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private bool IsThisProjectReferenceInCycle()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.IsThisProjectReferenceInCycle",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Defines whether this node is valid node for painting the refererence icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Defines whether this node is valid node for painting the refererence icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void BindReferenceData()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.BindReferenceData",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private bool IsReferenceInCycle(Guid projectGuid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.IsReferenceInCycle(System.Guid)\">\r\n    <summary>\r\n    Checks whether a reference added to a given project would introduce a circular dependency.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.IsReferenceInCycle(System.Guid)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.IsReferenceInCycle(System.Guid)\">\r\n    <summary>\r\n    Checks whether a reference added to a given project would introduce a circular dependency.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void Remove(bool removeFromStorage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Overridden method. The method updates the build dependency list before removing the node from the hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.Remove(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Overridden method. The method updates the build dependency list before removing the node from the hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void ShowCircularReferenceErrorMessage()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.ShowCircularReferenceErrorMessage",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override void AddReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.AddReference\">\r\n    <summary>\r\n    The node is added to the hierarchy and then updates the build dependency list.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.AddReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.AddReference\">\r\n    <summary>\r\n    The node is added to the hierarchy and then updates the build dependency list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanAddReference(out CannotAddReferenceErrorMessage errorHandler)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)\">\r\n    <summary>\r\n    Checks if a project reference can be added to the hierarchy. It calls base to see if the reference is not already there, then checks for circular references.\r\n    </summary>\r\n    <param name=\"errorHandler\">The error handler delegate to return</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)\">\r\n    <summary>\r\n    Checks if a project reference can be added to the hierarchy. It calls base to see if the reference is not already there, then checks for circular references.\r\n    </summary>\r\n    <param name=\"errorHandler\">The error handler delegate to return</param>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "projectReference",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectReferenceNode.projectReference",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isNodeValid",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectReferenceNode.isNodeValid\">\r\n    <summary>\r\n    Possibility for solution listener to update the state on the dangling reference.\r\n    It will be set in OnBeforeUnloadProject then the nopde is invalidated then it is reset to false.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectReferenceNode.isNodeValid",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectReferenceNode.isNodeValid\">\r\n    <summary>\r\n    Possibility for solution listener to update the state on the dangling reference.\r\n    It will be set in OnBeforeUnloadProject then the nopde is invalidated then it is reset to false.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "referencedProjectFullPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProjectFullPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "canRemoveReference",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectReferenceNode.canRemoveReference\">\r\n    <summary>\r\n    This state is controlled by the solution events.\r\n    The state is set to false by OnBeforeUnloadProject.\r\n    The state is set to true by OnBeforeCloseProject event.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectReferenceNode.canRemoveReference",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectReferenceNode.canRemoveReference\">\r\n    <summary>\r\n    This state is controlled by the solution events.\r\n    The state is set to false by OnBeforeUnloadProject.\r\n    The state is set to true by OnBeforeCloseProject event.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "referencedProjectGuid",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProjectGuid\">\r\n    <summary>\r\n    The name of the assembly this refernce represents\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProjectGuid",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProjectGuid\">\r\n    <summary>\r\n    The name of the assembly this refernce represents\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "referencedProject",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProject\">\r\n    <summary>\r\n    This is a reference to the automation object for the referenced project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProject",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProject\">\r\n    <summary>\r\n    This is a reference to the automation object for the referenced project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "buildDependency",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectReferenceNode.buildDependency",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "referencedProjectName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProjectName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "referencedProjectRelativePath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectReferenceNode.referencedProjectRelativePath",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal bool CanRemoveReference",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanRemoveReference\">\r\n    <summary>\r\n    Controls the state whether this reference can be removed or not. Think of the project unload scenario where the project reference should not be deleted.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanRemoveReference",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectReferenceNode.CanRemoveReference\">\r\n    <summary>\r\n    Controls the state whether this reference can be removed or not. Think of the project unload scenario where the project reference should not be deleted.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal Guid ReferencedProjectGuid",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal string ReferencedProjectName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal protected bool IsNodeValid",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectReferenceNode.IsNodeValid\">\r\n    <summary>\r\n    Possiblity to shortcut and set the dangling project reference icon.\r\n    It is ussually manipulated by solution listsneres who handle reference updates.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferenceNode.IsNodeValid",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectReferenceNode.IsNodeValid\">\r\n    <summary>\r\n    Possiblity to shortcut and set the dangling project reference icon.\r\n    It is ussually manipulated by solution listsneres who handle reference updates.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal EnvDTE.Project ReferencedProjectObject",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectObject\">\r\n    <summary>\r\n    Gets the automation object for the referenced project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectObject",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectObject\">\r\n    <summary>\r\n    Gets the automation object for the referenced project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal string ReferencedProjectOutputPath",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectOutputPath\">\r\n    <summary>\r\n    Gets the full path to the assembly generated by this project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectOutputPath",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectReferenceNode.ReferencedProjectOutputPath\">\r\n    <summary>\r\n    Gets the full path to the assembly generated by this project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string Caption",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferenceNode.Caption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Url",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferenceNode.Url",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal override object Object",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferenceNode.Object",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ProjectReferenceNode(ProjectNode root, string referencedProjectName, string projectPath, string projectReference): base (root)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,System.String,System.String)\">\r\n    <summary>\r\n    constructor for the ProjectReferenceNode\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,System.String,System.String)\">\r\n    <summary>\r\n    constructor for the ProjectReferenceNode\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2234:PassSystemUriObjectsInsteadOfStrings\")]\r\npublic ProjectReferenceNode(ProjectNode root, ProjectElement element): base (root, element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the ReferenceNode. It is called when the project is reloaded, when the project element representing the refernce exists. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the ReferenceNode. It is called when the project is reloaded, when the project element representing the refernce exists. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ProjectReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectReferenceNode",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "IDM_VS_CTXT_ITEMNODE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.IDM_VS_CTXT_ITEMNODE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidStandardCommandSet2K",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.guidStandardCommandSet2K",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDM_VS_CTXT_PROJNODE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.IDM_VS_CTXT_PROJNODE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDM_VS_CTXT_NOCOMMANDS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.IDM_VS_CTXT_NOCOMMANDS",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDM_VS_CTXT_XPROJ_PROJITEM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.IDM_VS_CTXT_XPROJ_PROJITEM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDM_VS_CTXT_FOLDERNODE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.IDM_VS_CTXT_FOLDERNODE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDM_VS_CTXT_REFERENCE",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.IDM_VS_CTXT_REFERENCE",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidVsUIHierarchyWindowCmds",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.guidVsUIHierarchyWindowCmds",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidSHLMainMenu",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.guidSHLMainMenu",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidStandardCommandSet97",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.guidStandardCommandSet97",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "VSCmdOptQueryParameterList",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.VSCmdOptQueryParameterList",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDM_VS_CTXT_CODEWIN",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.IDM_VS_CTXT_CODEWIN",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDM_VS_CTXT_XPROJ_MULTIITEM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.IDM_VS_CTXT_XPROJ_MULTIITEM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IDM_VS_CTXT_REFERENCEROOT",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.IDM_VS_CTXT_REFERENCEROOT",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidVsVbaPkg",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.guidVsVbaPkg",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "guidVSUISet",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.VsMenus.guidVSUISet",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class VsMenus",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.VsMenus\">\r\n    <summary>\r\n    Defines menu commands guids and menu command id's\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.VsMenus",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.VsMenus\">\r\n    <summary>\r\n    Defines menu commands guids and menu command id's\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public static IVsUIHierarchyWindow GetUIHierarchyWindow(IServiceProvider serviceProvider, Guid persistenceSlot)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIHierarchyUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)\">\r\n    <summary>\r\n    Get reference to IVsUIHierarchyWindow interface from guid persistence slot.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <param name=\"persistenceSlot\">Unique identifier for a tool window created using IVsUIShell::CreateToolWindow. \r\n    The caller of this method can use predefined identifiers that map to tool windows if those tool windows \r\n    are known to the caller. </param>\r\n    <returns>A reference to an IVsUIHierarchyWindow interface.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIHierarchyUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIHierarchyUtilities.GetUIHierarchyWindow(System.IServiceProvider,System.Guid)\">\r\n    <summary>\r\n    Get reference to IVsUIHierarchyWindow interface from guid persistence slot.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <param name=\"persistenceSlot\">Unique identifier for a tool window created using IVsUIShell::CreateToolWindow. \r\n    The caller of this method can use predefined identifiers that map to tool windows if those tool windows \r\n    are known to the caller. </param>\r\n    <returns>A reference to an IVsUIHierarchyWindow interface.</returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public static class UIHierarchyUtilities",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UIHierarchyUtilities\">\r\n     <summary>\r\n    This class provides some useful static shell based methods. \r\n     </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.UIHierarchyUtilities",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UIHierarchyUtilities\">\r\n     <summary>\r\n    This class provides some useful static shell based methods. \r\n     </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "AnyCPU",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileValues.AnyCPU",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal static class ProjectFileValues",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectFileValues",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "Component",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileAttributeValue.Component",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Form",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileAttributeValue.Form",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Code",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileAttributeValue.Code",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Designer",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileAttributeValue.Designer",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "UserControl",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileAttributeValue.UserControl",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public static class ProjectFileAttributeValue",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectFileAttributeValue",
          "XmlDocumentation": ""
        },
        {
          "Properties": [
            {
              "Syntax": {
                "Content": "public override string FullPath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectReferencesProperties.FullPath",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ProjectReferencesProperties(ProjectReferenceNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectReferencesProperties.#ctor(Microsoft.VisualStudio.Project.ProjectReferenceNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ProjectReferencesProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectReferencesProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "int IEnumFORMATETC.Skip(uint celt)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumFORMATETC.Microsoft#VisualStudio#OLE#Interop#IEnumFORMATETC#Skip(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IEnumFORMATETC.Reset()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumFORMATETC.Microsoft#VisualStudio#OLE#Interop#IEnumFORMATETC#Reset",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IEnumFORMATETC.Next(uint celt, FORMATETC[] d, uint[] fetched)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumFORMATETC.Microsoft#VisualStudio#OLE#Interop#IEnumFORMATETC#Next(System.UInt32,Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void IEnumFORMATETC.Clone(out IEnumFORMATETC clone)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumFORMATETC.Microsoft#VisualStudio#OLE#Interop#IEnumFORMATETC#Clone(Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC@)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "e",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.EnumFORMATETC.e",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "cache",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.EnumFORMATETC.cache",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "dir",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.EnumFORMATETC.dir",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public EnumFORMATETC(DATADIR dir, IEnumerable cache)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumFORMATETC.#ctor(Microsoft.VisualStudio.OLE.Interop.DATADIR,System.Collections.IEnumerable)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class EnumFORMATETC",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.EnumFORMATETC",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual void DeleteFolder(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.DeleteFolder(System.String)\">\r\n    <summary>\r\n    Override if your node is not a file system folder so that\r\n    it does nothing or it deletes it from your storage location.\r\n    </summary>\r\n    <param name=\"path\">Path to the folder to delete</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.DeleteFolder(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.DeleteFolder(System.String)\">\r\n    <summary>\r\n    Override if your node is not a file system folder so that\r\n    it does nothing or it deletes it from your storage location.\r\n    </summary>\r\n    <param name=\"path\">Path to the folder to delete</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.GetMkDocument",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int SetEditLabel(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Rename Folder\r\n    </summary>\r\n    <param name=\"label\">new Name of Folder</param>\r\n    <returns>VSConstants.S_OK, if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Rename Folder\r\n    </summary>\r\n    <param name=\"label\">new Name of Folder</param>\r\n    <returns>VSConstants.S_OK, if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.GetAutomationObject\">\r\n    <summary>\r\n    Get the automation object for the FolderNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OAFolderNode type if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.GetAutomationObject\">\r\n    <summary>\r\n    Get the automation object for the FolderNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OAFolderNode type if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal override void GetSccFiles(System.Collections.Generic.IList<string> files, System.Collections.Generic.IList<tagVsSccFilesFlags> flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    Enumerate the files associated with this node.\r\n    A folder node is not a file and as such no file to enumerate.\r\n    </summary>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    Enumerate the files associated with this node.\r\n    A folder node is not a file and as such no file to enumerate.\r\n    </summary>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override void UpdateSccStateIcons()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.UpdateSccStateIcons\">\r\n    <summary>\r\n    Recursevily walks the folder nodes and redraws the state icons\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.UpdateSccStateIcons",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.UpdateSccStateIcons\">\r\n    <summary>\r\n    Recursevily walks the folder nodes and redraws the state icons\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1804:RemoveUnusedLocals\", MessageId = \"e\")]\r\npublic virtual void CreateDirectory()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory\">\r\n    <summary>\r\n    creates the physical directory for a folder node\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory\">\r\n    <summary>\r\n    creates the physical directory for a folder node\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void RenameFolder(string newName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.RenameFolder(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void RenameDirectory(string newPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.RenameDirectory(System.String)\">\r\n    <summary>\r\n    Rename the physical directory for a folder node\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.RenameDirectory(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.RenameDirectory(System.String)\">\r\n    <summary>\r\n    Rename the physical directory for a folder node\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal override void DeleteFromStorage(string path)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.DeleteFromStorage(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Scc\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"scc\")]\r\nprotected internal override void GetSccSpecialFiles(string sccFile, IList<string> files, IList<tagVsSccFilesFlags> flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    This method should be overridden to provide the list of special files and associated flags for source control.\r\n    </summary>\r\n    <param name=\"sccFile\">One of the file associated to the node.</param>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    This method should be overridden to provide the list of special files and associated flags for source control.\r\n    </summary>\r\n    <param name=\"sccFile\">One of the file associated to the node.</param>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private int ShowFileOrFolderAlreadExistsErrorMessage(string newPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.ShowFileOrFolderAlreadExistsErrorMessage(System.String)\">\r\n    <summary>\r\n    Show error message if not in automation mode, otherwise throw exception\r\n    </summary>\r\n    <param name=\"newPath\">path of file or folder already existing on disk</param>\r\n    <returns>S_OK</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.ShowFileOrFolderAlreadExistsErrorMessage(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.ShowFileOrFolderAlreadExistsErrorMessage(System.String)\">\r\n    <summary>\r\n    Show error message if not in automation mode, otherwise throw exception\r\n    </summary>\r\n    <param name=\"newPath\">path of file or folder already existing on disk</param>\r\n    <returns>S_OK</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1804:RemoveUnusedLocals\", MessageId = \"e\")]\r\npublic virtual void CreateDirectory(string newName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory(System.String)\">\r\n    <summary>\r\n    Creates a folder nodes physical directory\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n    <param name=\"newName\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.CreateDirectory(System.String)\">\r\n    <summary>\r\n    Creates a folder nodes physical directory\r\n    Override if your node does not use file system folder\r\n    </summary>\r\n    <param name=\"newName\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override int SortPriority",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FolderNode.SortPriority",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Caption",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FolderNode.Caption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int MenuCommandId",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FolderNode.MenuCommandId",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Url",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FolderNode.Url",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override Guid ItemTypeGuid",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FolderNode.ItemTypeGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override VsStateIcon StateIconIndex",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FolderNode.StateIconIndex\">\r\n    <summary>\r\n    This relates to the SCC glyph\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.FolderNode.StateIconIndex",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FolderNode.StateIconIndex\">\r\n    <summary>\r\n    This relates to the SCC glyph\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public FolderNode(ProjectNode root, string relativePath, ProjectElement element): base (root, element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the FolderNode\r\n    </summary>\r\n    <param name=\"root\">Root node of the hierarchy</param>\r\n    <param name=\"relativePath\">relative path from root i.e.: \"NewFolder1\\\\NewFolder2\\\\NewFolder3</param>\r\n    <param name=\"element\">Associated project element</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FolderNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the FolderNode\r\n    </summary>\r\n    <param name=\"root\">Root node of the hierarchy</param>\r\n    <param name=\"relativePath\">relative path from root i.e.: \"NewFolder1\\\\NewFolder2\\\\NewFolder3</param>\r\n    <param name=\"element\">Associated project element</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class FolderNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FolderNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private bool HasItemBeenDeleted()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.HasItemBeenDeleted\">\r\n    <summary>\r\n    Has the item been deleted\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.HasItemBeenDeleted",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.HasItemBeenDeleted\">\r\n    <summary>\r\n    Has the item been deleted\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetMetadata(string attributeName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadata(System.String)\">\r\n    <summary>\r\n    Get the value of an attribute on a project element\r\n    </summary>\r\n    <param name=\"attributeName\">Name of the attribute to get the value for</param>\r\n    <returns>Value of the attribute</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadata(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadata(System.String)\">\r\n    <summary>\r\n    Get the value of an attribute on a project element\r\n    </summary>\r\n    <param name=\"attributeName\">Name of the attribute to get the value for</param>\r\n    <returns>Value of the attribute</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void SetMetadata(string attributeName, string attributeValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.SetMetadata(System.String,System.String)\">\r\n    <summary>\r\n    Set an attribute on the project element\r\n    </summary>\r\n    <param name=\"attributeName\">Name of the attribute to set</param>\r\n    <param name=\"attributeValue\">Value to give to the attribute.  Use <c>null</c> to delete the metadata definition.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.SetMetadata(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.SetMetadata(System.String,System.String)\">\r\n    <summary>\r\n    Set an attribute on the project element\r\n    </summary>\r\n    <param name=\"attributeName\">Name of the attribute to set</param>\r\n    <param name=\"attributeValue\">Value to give to the attribute.  Use <c>null</c> to delete the metadata definition.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int GetHashCode()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetHashCode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool Equals(object obj)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.Equals(System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void RemoveFromProjectFile()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.RemoveFromProjectFile\">\r\n    <summary>\r\n    Calling this method remove this item from the project file.\r\n    Once the item is delete, you should not longer be using it.\r\n    Note that the item should be removed from the hierarchy prior to this call.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.RemoveFromProjectFile",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.RemoveFromProjectFile\">\r\n    <summary>\r\n    Calling this method remove this item from the project file.\r\n    Once the item is delete, you should not longer be using it.\r\n    Note that the item should be removed from the hierarchy prior to this call.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void RefreshProperties()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.RefreshProperties\">\r\n    <summary>\r\n    Reevaluate all properties for the current item\r\n    This should be call if you believe the property for this item\r\n    may have changed since it was created/refreshed, or global properties\r\n    this items depends on have changed.\r\n    Be aware that there is a perf cost in calling this function.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.RefreshProperties",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.RefreshProperties\">\r\n    <summary>\r\n    Reevaluate all properties for the current item\r\n    This should be call if you believe the property for this item\r\n    may have changed since it was created/refreshed, or global properties\r\n    this items depends on have changed.\r\n    Be aware that there is a perf cost in calling this function.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetMetadataAndThrow(string attributeName, Exception exception)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadataAndThrow(System.String,System.Exception)\">\r\n    <summary>\r\n    Gets the attribute and throws the handed exception if the exception if the attribute is empty or null.\r\n    </summary>\r\n    <param name=\"attributeName\">The name of the attribute to get.</param>\r\n    <param name=\"exception\">The exception to be thrown if not found or empty.</param>\r\n    <returns>The attribute if found</returns>\r\n    <remarks>The method will throw an Exception and neglect the passed in exception if the attribute is deleted</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadataAndThrow(System.String,System.Exception)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetMetadataAndThrow(System.String,System.Exception)\">\r\n    <summary>\r\n    Gets the attribute and throws the handed exception if the exception if the attribute is empty or null.\r\n    </summary>\r\n    <param name=\"attributeName\">The name of the attribute to get.</param>\r\n    <param name=\"exception\">The exception to be thrown if not found or empty.</param>\r\n    <returns>The attribute if found</returns>\r\n    <remarks>The method will throw an Exception and neglect the passed in exception if the attribute is deleted</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Rename(string newPath)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.Rename(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string GetEvaluatedMetadata(string attributeName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetEvaluatedMetadata(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string GetFullPathForElement()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetFullPathForElement\">\r\n    <summary>\r\n    Return an absolute path for the passed in element.\r\n    If the element is already an absolute path, it is returned.\r\n    Otherwise, it is unrelativized using the project directory\r\n    as the base.\r\n    Note that any \"..\" in the paths will be resolved.\r\n    \r\n    For non-file system based project, it may make sense to override.\r\n    </summary>\r\n    <returns>FullPath</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.GetFullPathForElement",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.GetFullPathForElement\">\r\n    <summary>\r\n    Return an absolute path for the passed in element.\r\n    If the element is already an absolute path, it is returned.\r\n    Otherwise, it is unrelativized using the project directory\r\n    as the base.\r\n    Note that any \"..\" in the paths will be resolved.\r\n    \r\n    For non-file system based project, it may make sense to override.\r\n    </summary>\r\n    <returns>FullPath</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "virtualProperties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectElement.virtualProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isVirtual",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectElement.isVirtual",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "item",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectElement.item",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "itemProject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectElement.itemProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "deleted",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectElement.deleted",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string ItemName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectElement.ItemName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal bool IsVirtual",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectElement.IsVirtual",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal MSBuild.ProjectItem Item",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectElement.Item",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal ProjectElement(ProjectNode project, MSBuild.ProjectItem existingItem, bool virtualFolder)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.Build.Evaluation.ProjectItem,System.Boolean)\">\r\n    <summary>\r\n    Constructor to Wrap an existing MSBuild.ProjectItem\r\n    Only have internal constructors as the only one who should be creating\r\n    such object is the project itself (see Project.CreateFileNode()).\r\n    </summary>\r\n    <param name=\"project\">Project that owns this item</param>\r\n    <param name=\"existingItem\">an MSBuild.ProjectItem; can be null if virtualFolder is true</param>\r\n    <param name=\"virtualFolder\">Is this item virtual (such as reference folder)</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.Build.Evaluation.ProjectItem,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.Build.Evaluation.ProjectItem,System.Boolean)\">\r\n    <summary>\r\n    Constructor to Wrap an existing MSBuild.ProjectItem\r\n    Only have internal constructors as the only one who should be creating\r\n    such object is the project itself (see Project.CreateFileNode()).\r\n    </summary>\r\n    <param name=\"project\">Project that owns this item</param>\r\n    <param name=\"existingItem\">an MSBuild.ProjectItem; can be null if virtualFolder is true</param>\r\n    <param name=\"virtualFolder\">Is this item virtual (such as reference folder)</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal ProjectElement(ProjectNode project, string itemPath, string itemType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,System.String)\">\r\n    <summary>\r\n    Constructor to create a new MSBuild.ProjectItem and add it to the project\r\n    Only have internal constructors as the only one who should be creating\r\n    such object is the project itself (see Project.CreateFileNode()).\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectElement.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectElement.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String,System.String)\">\r\n    <summary>\r\n    Constructor to create a new MSBuild.ProjectItem and add it to the project\r\n    Only have internal constructors as the only one who should be creating\r\n    such object is the project itself (see Project.CreateFileNode()).\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public sealed class ProjectElement\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectElement\">\r\n    <summary>\r\n    This class represent a project item (usualy a file) and allow getting and\r\n    setting attribute on it.\r\n    This class allow us to keep the internal details of our items hidden from\r\n    our derived classes.\r\n    While the class itself is public so it can be manipulated by derived classes,\r\n    its internal constructors make sure it can only be created from within the assembly.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectElement",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectElement\">\r\n    <summary>\r\n    This class represent a project item (usualy a file) and allow getting and\r\n    setting attribute on it.\r\n    This class allow us to keep the internal details of our items hidden from\r\n    our derived classes.\r\n    While the class itself is public so it can be manipulated by derived classes,\r\n    its internal constructors make sure it can only be created from within the assembly.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "void IConnectionPointContainer.EnumConnectionPoints(out IEnumConnectionPoints ppEnum)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPointContainer.Microsoft#VisualStudio#OLE#Interop#IConnectionPointContainer#EnumConnectionPoints(Microsoft.VisualStudio.OLE.Interop.IEnumConnectionPoints@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void IConnectionPointContainer.FindConnectionPoint(ref Guid riid, out IConnectionPoint ppCP)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPointContainer.Microsoft#VisualStudio#OLE#Interop#IConnectionPointContainer#FindConnectionPoint(System.Guid@,Microsoft.VisualStudio.OLE.Interop.IConnectionPoint@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal void AddEventSource<SinkType>(IEventSource<SinkType> source)where SinkType : class",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPointContainer.AddEventSource``1(Microsoft.VisualStudio.Project.IEventSource{``0})",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "connectionPoints",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConnectionPointContainer.connectionPoints",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal ConnectionPointContainer()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConnectionPointContainer.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ConnectionPointContainer\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ConnectionPointContainer",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int get_DisplayName(out string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.get_DisplayName(System.String@)\">\r\n    <summary>\r\n    The display name is a two part item\r\n    first part is the config name, 2nd part is the platform name\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_DisplayName(System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.get_DisplayName(System.String@)\">\r\n    <summary>\r\n    The display name is a two part item\r\n    first part is the config name, 2nd part is the platform name\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DebugLaunch(uint grfLaunch)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.DebugLaunch(System.UInt32)\">\r\n    <summary>\r\n    Called by the vs shell to start debugging (managed or unmanaged).\r\n    Override this method to support other debug engines.\r\n    </summary>\r\n    <param name=\"grfLaunch\">A flag that determines the conditions under which to start the debugger. For valid grfLaunch values, see __VSDBGLAUNCHFLAGS</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.DebugLaunch(System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.DebugLaunch(System.UInt32)\">\r\n    <summary>\r\n    Called by the vs shell to start debugging (managed or unmanaged).\r\n    Override this method to support other debug engines.\r\n    </summary>\r\n    <param name=\"grfLaunch\">A flag that determines the conditions under which to start the debugger. For valid grfLaunch values, see __VSDBGLAUNCHFLAGS</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Platform(out Guid platform)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_Platform(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_VirtualRoot(out string pbstrVRoot)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_VirtualRoot(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void PrepareBuild(bool clean)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.PrepareBuild(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProjectDesignerPages(CAUUID[] pages)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration dependent.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n    <returns>VSConstants.S_OK</returns>\t\t\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration dependent.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n    <returns>VSConstants.S_OK</returns>\t\t\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_ProjectCfgProvider(out IVsProjectCfgProvider p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_ProjectCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfgProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void GetCfgPropertyPages(CAUUID[] pages)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfgPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Retrieves the configuration dependent property pages.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfgPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfgPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Retrieves the configuration dependent property pages.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string GetConfigurationProperty(string propertyName, bool resetCache)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetConfigurationProperty(System.String,System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_CfgType(ref Guid iidCfg, out IntPtr ppCfg)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_CfgType(System.Guid@,System.IntPtr@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsPrivate(out int pfPrivate)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsPrivate(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IVsProjectFlavorCfg.Close()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#Close\">\r\n    <summary>\r\n    This is called to let the flavored config let go\r\n    of any reference it may still be holding to the base config\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#Close",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#Close\">\r\n    <summary>\r\n    This is called to let the flavored config let go\r\n    of any reference it may still be holding to the base config\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryDebugLaunch(uint flags, out int fCanLaunch)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.QueryDebugLaunch(System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the debugger can be launched, given the state of the launch flags.\r\n    </summary>\r\n    <param name=\"flags\">Flags that determine the conditions under which to launch the debugger. \r\n    For valid grfLaunch values, see __VSDBGLAUNCHFLAGS or __VSDBGLAUNCHFLAGS2.</param>\r\n    <param name=\"fCanLaunch\">true if the debugger can be launched, otherwise false</param>\r\n    <returns>S_OK if the method succeeds, otherwise an error code</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.QueryDebugLaunch(System.UInt32,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.QueryDebugLaunch(System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the debugger can be launched, given the state of the launch flags.\r\n    </summary>\r\n    <param name=\"flags\">Flags that determine the conditions under which to launch the debugger. \r\n    For valid grfLaunch values, see __VSDBGLAUNCHFLAGS or __VSDBGLAUNCHFLAGS2.</param>\r\n    <param name=\"fCanLaunch\">true if the debugger can be launched, otherwise false</param>\r\n    <returns>S_OK if the method succeeds, otherwise an error code</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_CanonicalName(out string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_CanonicalName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IVsProjectFlavorCfg.get_CfgType(ref Guid iidCfg, out IntPtr ppCfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#get_CfgType(System.Guid@,System.IntPtr@)\">\r\n    <summary>\r\n    Actual implementation of get_CfgType.\r\n    When not flavored or when the flavor delegate to use\r\n    we end up creating the requested config if we support it.\r\n    </summary>\r\n    <param name=\"iidCfg\">IID representing the type of config object we should create</param>\r\n    <param name=\"ppCfg\">Config object that the method created</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#get_CfgType(System.Guid@,System.IntPtr@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfg#get_CfgType(System.Guid@,System.IntPtr@)\">\r\n    <summary>\r\n    Actual implementation of get_CfgType.\r\n    When not flavored or when the flavor delegate to use\r\n    we end up creating the requested config if we support it.\r\n    </summary>\r\n    <param name=\"iidCfg\">IID representing the type of config object we should create</param>\r\n    <param name=\"ppCfg\">Config object that the method created</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_RootURL(out string root)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_RootURL(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal int GetXmlFragment(Guid flavor, _PersistStorageType storageType, out string fragment)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetXmlFragment(System.Guid,Microsoft.VisualStudio.Shell.Interop._PersistStorageType,System.String@)\">\r\n    <summary>\r\n    If flavored, ask the flavor if it wants to provide an XML fragment\r\n    </summary>\r\n    <param name=\"flavor\">Guid of the flavor</param>\r\n    <param name=\"storageType\">Project file or user file</param>\r\n    <param name=\"fragment\">Fragment that the flavor wants to save</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetXmlFragment(System.Guid,Microsoft.VisualStudio.Shell.Interop._PersistStorageType,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetXmlFragment(System.Guid,Microsoft.VisualStudio.Shell.Interop._PersistStorageType,System.String@)\">\r\n    <summary>\r\n    If flavored, ask the flavor if it wants to provide an XML fragment\r\n    </summary>\r\n    <param name=\"flavor\">Guid of the flavor</param>\r\n    <param name=\"storageType\">Project file or user file</param>\r\n    <param name=\"fragment\">Fragment that the flavor wants to save</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static bool TrySplitConfigurationCanonicalName(string canonicalName, out string configName, out string platformName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.TrySplitConfigurationCanonicalName(System.String,System.String@,System.String@)\">\r\n    <summary>\r\n    Splits the canonical configuration name into platform and configuration name.\r\n    </summary>\r\n    <param name=\"canonicalName\">The canonicalName name.</param>\r\n    <param name=\"configName\">The name of the configuration.</param>\r\n    <param name=\"platformName\">The name of the platform.</param>\r\n    <returns>true if successfull.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.TrySplitConfigurationCanonicalName(System.String,System.String@,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.TrySplitConfigurationCanonicalName(System.String,System.String@,System.String@)\">\r\n    <summary>\r\n    Splits the canonical configuration name into platform and configuration name.\r\n    </summary>\r\n    <param name=\"canonicalName\">The canonicalName name.</param>\r\n    <param name=\"configName\">The name of the configuration.</param>\r\n    <param name=\"platformName\">The name of the platform.</param>\r\n    <returns>true if successfull.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OutputsRequireAppRoot(out int pfRequiresAppRoot)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.OutputsRequireAppRoot(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenOutput(string name, out IVsOutput output)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.OpenOutput(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutput@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void SetPropertyUnderCondition(string propertyName, string propertyValue, string condition)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.SetPropertyUnderCondition(System.String,System.String,System.String)\">\r\n    <summary>\r\n    Emulates the behavior of SetProperty(name, value, condition) on the old MSBuild object model.\r\n    This finds a property group with the specified condition (or creates one if necessary) then sets the property in there.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.SetPropertyUnderCondition(System.String,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.SetPropertyUnderCondition(System.String,System.String,System.String)\">\r\n    <summary>\r\n    Emulates the behavior of SetProperty(name, value, condition) on the old MSBuild object model.\r\n    This finds a property group with the specified condition (or creates one if necessary) then sets the property in there.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenOutputGroup(string szCanonicalName, out IVsOutputGroup ppIVsOutputGroup)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.OpenOutputGroup(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProjectItem(out IVsHierarchy hier, out uint itemid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)\">\r\n    <summary>\r\n    Maps back to the hierarchy or project item object corresponding to the browse object.\r\n    </summary>\r\n    <param name=\"hier\">Reference to the hierarchy object.</param>\r\n    <param name=\"itemid\">Reference to the project item.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)\">\r\n    <summary>\r\n    Maps back to the hierarchy or project item object corresponding to the browse object.\r\n    </summary>\r\n    <param name=\"hier\">Reference to the hierarchy object.</param>\r\n    <param name=\"itemid\">Reference to the project item.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsPackaged(out int pkgd)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsPackaged(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsReleaseOnly(out int fRelease)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsReleaseOnly(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void SetConfigurationProperty(string propertyName, string propertyValue)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.SetConfigurationProperty(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_TargetCodePage(out uint target)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_TargetCodePage(System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual OutputGroup CreateOutputGroup(ProjectNode project, KeyValuePair<string, string> group)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.CreateOutputGroup(Microsoft.VisualStudio.Project.ProjectNode,System.Collections.Generic.KeyValuePair{System.String,System.String})",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_OutputGroups(uint celt, IVsOutputGroup[] rgpcfg, uint[] pcActual)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_OutputGroups(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputGroup[],System.UInt32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private MSBuildExecution.ProjectPropertyInstance GetMsBuildProperty(string propertyName, bool resetCache)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetMsBuildProperty(System.String,System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal int IsFlavorDirty(_PersistStorageType storageType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.IsFlavorDirty(Microsoft.VisualStudio.Shell.Interop._PersistStorageType)\">\r\n    <summary>\r\n    If flavored, and if the flavor config can be dirty, ask it if it is dirty\r\n    </summary>\r\n    <param name=\"storageType\">Project file or user file</param>\r\n    <returns>0 = not dirty</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.IsFlavorDirty(Microsoft.VisualStudio.Shell.Interop._PersistStorageType)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.IsFlavorDirty(Microsoft.VisualStudio.Shell.Interop._PersistStorageType)\">\r\n    <summary>\r\n    If flavored, and if the flavor config can be dirty, ask it if it is dirty\r\n    </summary>\r\n    <param name=\"storageType\">Project file or user file</param>\r\n    <returns>0 = not dirty</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void GetPages(CAUUID[] pages)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsSpecifyingOutputSupported(out int f)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsSpecifyingOutputSupported(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfg(out IVsCfg cfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg@)\">\r\n    <summary>\r\n    Maps back to the configuration corresponding to the browse object. \r\n    </summary>\r\n    <param name=\"cfg\">The IVsCfg object represented by the browse object</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectConfig.GetCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg@)\">\r\n    <summary>\r\n    Maps back to the configuration corresponding to the browse object. \r\n    </summary>\r\n    <param name=\"cfg\">The IVsCfg object represented by the browse object</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_IsDebugOnly(out int fDebug)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_IsDebugOnly(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int EnumOutputs(out IVsEnumOutputs eo)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.EnumOutputs(Microsoft.VisualStudio.Shell.Interop.IVsEnumOutputs@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_BuildableProjectCfg(out IVsBuildableProjectCfg pb)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_BuildableProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsBuildableProjectCfg@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_UpdateSequenceNumber(ULARGE_INTEGER[] li)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.get_UpdateSequenceNumber(Microsoft.VisualStudio.OLE.Interop.ULARGE_INTEGER[])",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "configName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.configName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Debug",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.Debug",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "AnyCPU",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.AnyCPU",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "currentConfig",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.currentConfig",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "outputGroups",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.outputGroups",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "buildableCfg",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.buildableCfg",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.project",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "flavoredCfg",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.flavoredCfg",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Release",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.Release",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "configurationProperties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfig.configurationProperties",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "private string DisplayName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectConfig.DisplayName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual object ConfigurationProperties",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectConfig.ConfigurationProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string ConfigName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectConfig.ConfigName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected IList<OutputGroup> OutputGroups",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectConfig.OutputGroups",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public ProjectNode ProjectMgr",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectConfig.ProjectMgr",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ProjectConfig(ProjectNode project, string configuration)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfig.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ProjectConfig\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectConfig",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public int get_HelpFile(out string helpFile)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_HelpFile(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_CanonicalName(out string canonicalName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_CanonicalName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_Description(out string description)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_Description(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_ReferredProject(out object unknownProject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_ReferredProject(System.Object@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_Type(out System.Guid guidType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_Type(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic int get_HelpContext(out uint helpContext)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_HelpContext(System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_MustUpdateBefore(out int mustUpdateBefore)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.get_MustUpdateBefore(System.Int32@)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "dependentHierarchy",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.dependentHierarchy",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic NestedProjectBuildDependency(IVsHierarchy dependentHierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectBuildDependency.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class NestedProjectBuildDependency\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.NestedProjectBuildDependency\">\r\n    <summary>\r\n    Used for adding a build dependency to nested project (not a real project reference)\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.NestedProjectBuildDependency",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.NestedProjectBuildDependency\">\r\n    <summary>\r\n    Used for adding a build dependency to nested project (not a real project reference)\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "token",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.DeleteToken.token\">\r\n    <summary>\r\n    String to delete\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.DeleteToken.token",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.DeleteToken.token\">\r\n    <summary>\r\n    String to delete\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string StringToDelete",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DeleteToken.StringToDelete\">\r\n    <summary>\r\n    Token marking the end of the block to delete\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.DeleteToken.StringToDelete",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DeleteToken.StringToDelete\">\r\n    <summary>\r\n    Token marking the end of the block to delete\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public DeleteToken(string token)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DeleteToken.#ctor(System.String)\">\r\n    <summary>\r\n    Constructor\r\n    </summary>\r\n    <param name=\"token\">Deletable token.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DeleteToken.#ctor(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DeleteToken.#ctor(System.String)\">\r\n    <summary>\r\n    Constructor\r\n    </summary>\r\n    <param name=\"token\">Deletable token.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class DeleteToken",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DeleteToken\">\r\n    <summary>\r\n    Storage classes for token to be deleted\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DeleteToken",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DeleteToken\">\r\n    <summary>\r\n    Storage classes for token to be deleted\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "internal bool CanRenameItem(string oldFileName, string newFileName, VSRENAMEFILEFLAGS flag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanRenameItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)\">\r\n    <summary>\r\n     Asks the environment for permission to rename files.\r\n    </summary>\r\n    <param name=\"oldFileName\">Path to the file to be renamed.</param>\r\n    <param name=\"newFileName\">Path to the new file.</param>\r\n    <param name=\"flag\">The VSRENAMEFILEFLAGS associated with the file to be renamed.</param>\r\n    <returns>true if the file can be renamed. Otherwise false.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanRenameItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanRenameItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)\">\r\n    <summary>\r\n     Asks the environment for permission to rename files.\r\n    </summary>\r\n    <param name=\"oldFileName\">Path to the file to be renamed.</param>\r\n    <param name=\"newFileName\">Path to the new file.</param>\r\n    <param name=\"flag\">The VSRENAMEFILEFLAGS associated with the file to be renamed.</param>\r\n    <returns>true if the file can be renamed. Otherwise false.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void OnItemAdded(string file, VSADDFILEFLAGS flag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemAdded(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS)\">\r\n    <summary>\r\n    Notify the environment about a file just added\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemAdded(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemAdded(System.String,Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS)\">\r\n    <summary>\r\n    Notify the environment about a file just added\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal bool CanAddItems(string[] files, VSQUERYADDFILEFLAGS[] flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanAddItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[])\">\r\n    <summary>\r\n    Asks the environment for permission to add files.\r\n    </summary>\r\n    <param name=\"files\">The files to add.</param>\r\n    <param name=\"flags\">The VSQUERYADDFILEFLAGS flags associated to the files added</param>\r\n    <returns>true if the file can be added, false if not.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanAddItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanAddItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[])\">\r\n    <summary>\r\n    Asks the environment for permission to add files.\r\n    </summary>\r\n    <param name=\"files\">The files to add.</param>\r\n    <param name=\"flags\">The VSQUERYADDFILEFLAGS flags associated to the files added</param>\r\n    <returns>true if the file can be added, false if not.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void OnItemRemoved(string file, VSREMOVEFILEFLAGS flag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemRemoved(System.String,Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS)\">\r\n    <summary>\r\n    Notify the environment about a file just removed\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemRemoved(System.String,Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemRemoved(System.String,Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS)\">\r\n    <summary>\r\n    Notify the environment about a file just removed\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void OnItemRenamed(string strOldName, string strNewName, VSRENAMEFILEFLAGS flag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemRenamed(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)\">\r\n    <summary>\r\n    Get's called to tell the env that a file was renamed\r\n    </summary>\r\n    \r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemRenamed(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.OnItemRenamed(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS)\">\r\n    <summary>\r\n    Get's called to tell the env that a file was renamed\r\n    </summary>\r\n    \r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal bool CanRemoveItems(string[] files, VSQUERYREMOVEFILEFLAGS[] flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanRemoveItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[])\">\r\n    <summary>\r\n     Asks the environment for permission to remove files.\r\n    </summary>\r\n    <param name=\"files\">an array of files to remove</param>\r\n    <param name=\"flags\">The VSQUERYREMOVEFILEFLAGS associated to the files to be removed.</param>\r\n    <returns>true if the files can be removed, false if not.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanRemoveItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.CanRemoveItems(System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[])\">\r\n    <summary>\r\n     Asks the environment for permission to remove files.\r\n    </summary>\r\n    <param name=\"files\">an array of files to remove</param>\r\n    <param name=\"flags\">The VSQUERYREMOVEFILEFLAGS associated to the files to be removed.</param>\r\n    <returns>true if the files can be removed, false if not.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private IVsTrackProjectDocuments2 GetIVsTrackProjectDocuments2()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.GetIVsTrackProjectDocuments2\">\r\n    <summary>\r\n    Gets the IVsTrackProjectDocuments2 object by asking the service provider for it.\r\n    </summary>\r\n    <returns>the IVsTrackProjectDocuments2 object</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.GetIVsTrackProjectDocuments2",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.GetIVsTrackProjectDocuments2\">\r\n    <summary>\r\n    Gets the IVsTrackProjectDocuments2 object by asking the service provider for it.\r\n    </summary>\r\n    <returns>the IVsTrackProjectDocuments2 object</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "projectMgr",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.TrackDocumentsHelper.projectMgr",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal TrackDocumentsHelper(ProjectNode project)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.TrackDocumentsHelper.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class TrackDocumentsHelper\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.TrackDocumentsHelper\">\r\n    <summary>\r\n    Used by a project to query the environment for permission to add, remove, or rename a file or directory in a solution\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.TrackDocumentsHelper",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.TrackDocumentsHelper\">\r\n    <summary>\r\n    Used by a project to query the environment for permission to add, remove, or rename a file or directory in a solution\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DataCacheEntry.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataCacheEntry.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DataCacheEntry.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DataCacheEntry.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataCacheEntry.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DataCacheEntry.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "format",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DataCacheEntry.format",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "data",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DataCacheEntry.data",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "dataDir",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DataCacheEntry.dataDir",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.DataCacheEntry.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.DataCacheEntry.Mutex",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.DataCacheEntry.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DataCacheEntry.isDisposed",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal long Data",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.DataCacheEntry.Data",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal DATADIR DataDir",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.DataCacheEntry.DataDir",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal FORMATETC Format",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.DataCacheEntry.Format",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal DataCacheEntry(FORMATETC fmt, IntPtr data, DATADIR dir)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DataCacheEntry.#ctor(Microsoft.VisualStudio.OLE.Interop.FORMATETC,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.DATADIR)\">\r\n    <summary>\r\n    The IntPtr is data allocated that should be removed. It is allocated by the ProcessSelectionData method.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataCacheEntry.#ctor(Microsoft.VisualStudio.OLE.Interop.FORMATETC,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.DATADIR)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DataCacheEntry.#ctor(Microsoft.VisualStudio.OLE.Interop.FORMATETC,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.DATADIR)\">\r\n    <summary>\r\n    The IntPtr is data allocated that should be removed. It is allocated by the ProcessSelectionData method.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "internal sealed class DataCacheEntry\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.DataCacheEntry",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public DebugModeConverter(): base (typeof (DebugMode))",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DebugModeConverter.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class DebugModeConverter",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.DebugModeConverter",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\")]\r\ninternal void Run(Action a)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.Run(System.Action)\">\r\n    <summary>\r\n    Runs an action asynchronously on an associated forms synchronization context.\r\n    </summary>\r\n    <param name=\"a\">The action to run</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIThread.Run(System.Action)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.Run(System.Action)\">\r\n    <summary>\r\n    Runs an action asynchronously on an associated forms synchronization context.\r\n    </summary>\r\n    <param name=\"a\">The action to run</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\"), System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\")]\r\ninternal void RunSync(Action a)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.RunSync(System.Action)\">\r\n    <summary>\r\n    Runs an action synchronously on an associated forms synchronization context\r\n    </summary>\r\n    <param name=\"a\">The action to run.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIThread.RunSync(System.Action)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.RunSync(System.Action)\">\r\n    <summary>\r\n    Runs an action synchronously on an associated forms synchronization context\r\n    </summary>\r\n    <param name=\"a\">The action to run.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static T DoOnUIThread<T>(Func<T> callback)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.DoOnUIThread``1(System.Func{``0})\">\r\n    <summary>\r\n    Performs a callback on the UI thread, blocking until the action completes.  Uses the VS mechanism \r\n    of marshalling back to the main STA thread via COM RPC.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIThread.DoOnUIThread``1(System.Func{``0})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.DoOnUIThread``1(System.Func{``0})\">\r\n    <summary>\r\n    Performs a callback on the UI thread, blocking until the action completes.  Uses the VS mechanism \r\n    of marshalling back to the main STA thread via COM RPC.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\r\ninternal void InitUnitTestingMode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.InitUnitTestingMode\">\r\n    <summary>\r\n    Initializes unit testing mode for this object\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIThread.InitUnitTestingMode",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.InitUnitTestingMode\">\r\n    <summary>\r\n    Initializes unit testing mode for this object\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[Conditional(\"DEBUG\")]\r\ninternal void MustBeCalledFromUIThread()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIThread.MustBeCalledFromUIThread",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.Dispose\">\r\n    <summary>\r\n    Dispose implementation.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIThread.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.Dispose\">\r\n    <summary>\r\n    Dispose implementation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static void DoOnUIThread(Action callback)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.DoOnUIThread(System.Action)\">\r\n    <summary>\r\n    Performs a callback on the UI thread, blocking until the action completes.  Uses the VS mechanism \r\n    of marshalling back to the main STA thread via COM RPC.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIThread.DoOnUIThread(System.Action)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.DoOnUIThread(System.Action)\">\r\n    <summary>\r\n    Performs a callback on the UI thread, blocking until the action completes.  Uses the VS mechanism \r\n    of marshalling back to the main STA thread via COM RPC.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void Initialize()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.Initialize\">\r\n    <summary>\r\n    Initializes this object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIThread.Initialize",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UIThread.Initialize\">\r\n    <summary>\r\n    Initializes this object.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "instance",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UIThread.instance\">\r\n    <summary>\r\n    The singleton instance.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.UIThread.instance",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UIThread.instance\">\r\n    <summary>\r\n    The singleton instance.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "captureStackTrace",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UIThread.captureStackTrace\">\r\n    <summary>\r\n    Stack trace when synchronizationContext was captured\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.UIThread.captureStackTrace",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UIThread.captureStackTrace\">\r\n    <summary>\r\n    Stack trace when synchronizationContext was captured\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "synchronizationContext",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.UIThread.synchronizationContext",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WrappedStacktraceKey",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UIThread.WrappedStacktraceKey\">\r\n    <summary>\r\n    RunSync puts orignal exception stacktrace to Exception.Data by this key if action throws on UI thread\r\n    </summary>\r\n    WrappedStacktraceKey is a string to keep exception serializable.\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.UIThread.WrappedStacktraceKey",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UIThread.WrappedStacktraceKey\">\r\n    <summary>\r\n    RunSync puts orignal exception stacktrace to Exception.Data by this key if action throws on UI thread\r\n    </summary>\r\n    WrappedStacktraceKey is a string to keep exception serializable.\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "uithread",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.UIThread.uithread",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal static bool IsUnitTest",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UIThread.IsUnitTest\">\r\n    <summary>\r\n    Gets a value indicating whether unit tests are running.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.UIThread.IsUnitTest",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UIThread.IsUnitTest\">\r\n    <summary>\r\n    Gets a value indicating whether unit tests are running.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool IsUIThread",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UIThread.IsUIThread\">\r\n    <summary>\r\n    Checks whether this is the UI thread.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.UIThread.IsUIThread",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UIThread.IsUIThread\">\r\n    <summary>\r\n    Checks whether this is the UI thread.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static UIThread Instance",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UIThread.Instance\">\r\n    <summary>\r\n    Gets the singleton instance\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.UIThread.Instance",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UIThread.Instance\">\r\n    <summary>\r\n    Gets the singleton instance\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal UIThread()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.UIThread.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal sealed class UIThread",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.UIThread",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public int get_DisplayName(out string pbstrDisplayName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Output.get_DisplayName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Property(string szProperty, out object pvar)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Output.get_Property(System.String,System.Object@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int get_CanonicalName(out string pbstrCanonicalName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Output.get_CanonicalName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_DeploySourceURL(out string pbstrDeploySourceURL)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Output.get_DeploySourceURL(System.String@)\">\r\n    <summary>\r\n    This path must start with file:/// if it wants other project\r\n    to be able to reference the output on disk.\r\n    If the output is not on disk, then this requirement does not\r\n    apply as other projects probably don't know how to access it.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Output.get_DeploySourceURL(System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Output.get_DeploySourceURL(System.String@)\">\r\n    <summary>\r\n    This path must start with file:/// if it wants other project\r\n    to be able to reference the output on disk.\r\n    If the output is not on disk, then this requirement does not\r\n    apply as other projects probably don't know how to access it.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int get_RootRelativeURL(out string pbstrRelativePath)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Output.get_RootRelativeURL(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Type(out Guid pguidType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.Output.get_Type(System.Guid@)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "output",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Output.output",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Output.project",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public Output(ProjectNode projectManager, ProjectItemInstance outputAssembly)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Output.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.Build.Execution.ProjectItemInstance)\">\r\n    <summary>\r\n    Constructor for IVSOutput2 implementation\r\n    </summary>\r\n    <param name=\"projectManager\">Project that produce this output</param>\r\n    <param name=\"outputAssembly\">MSBuild generated item corresponding to the output assembly (by default, these would be of type MainAssembly</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Output.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.Build.Execution.ProjectItemInstance)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Output.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.Build.Execution.ProjectItemInstance)\">\r\n    <summary>\r\n    Constructor for IVSOutput2 implementation\r\n    </summary>\r\n    <param name=\"projectManager\">Project that produce this output</param>\r\n    <param name=\"outputAssembly\">MSBuild generated item corresponding to the output assembly (by default, these would be of type MainAssembly</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "class Output\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Output",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Disable certain commands for dependent file nodes \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Disable certain commands for dependent file nodes \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Scc\")]\r\nprotected internal override void UpdateSccStateIcons()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.UpdateSccStateIcons\">\r\n    <summary>\r\n    Redraws the state icon if the node is not excluded from source control.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.UpdateSccStateIcons",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.UpdateSccStateIcons\">\r\n    <summary>\r\n    Redraws the state icon if the node is not excluded from source control.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.GetEditLabel\">\r\n    <summary>\r\n    Disable rename\r\n    </summary>\r\n    <param name=\"label\">new label</param>\r\n    <returns>E_NOTIMPLE in order to tell the call that we do not support rename</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.GetEditLabel\">\r\n    <summary>\r\n    Disable rename\r\n    </summary>\r\n    <param name=\"label\">new label</param>\r\n    <returns>E_NOTIMPLE in order to tell the call that we do not support rename</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal override StringBuilder PrepareSelectedNodesForClipBoard()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.PrepareSelectedNodesForClipBoard\">\r\n    <summary>\r\n    DependentFileNodes node cannot be dragged.\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.PrepareSelectedNodesForClipBoard",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.PrepareSelectedNodesForClipBoard\">\r\n    <summary>\r\n    DependentFileNodes node cannot be dragged.\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Gets a handle to the icon that should be set for this node\r\n    </summary>\r\n    <param name=\"open\">Whether the folder is open, ignored here.</param>\r\n    <returns>Handle to icon for the node</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Gets a handle to the icon that should be set for this node\r\n    </summary>\r\n    <param name=\"open\">Whether the folder is open, ignored here.</param>\r\n    <returns>Handle to icon for the node</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override int ImageIndex",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DependentFileNode.ImageIndex\">\r\n    <summary>\r\n    Defines if the node has a name relation to its parent node\r\n    e.g. Form1.ext and Form1.resx are name related (until first occurence of extention separator)\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.DependentFileNode.ImageIndex",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DependentFileNode.ImageIndex\">\r\n    <summary>\r\n    Defines if the node has a name relation to its parent node\r\n    e.g. Form1.ext and Form1.resx are name related (until first occurence of extention separator)\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public DependentFileNode(ProjectNode root, ProjectElement element): base (root, element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the DependentFileNode\r\n    </summary>\r\n    <param name=\"root\">Root of the hierarchy</param>\r\n    <param name=\"e\">Associated project element</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DependentFileNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DependentFileNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the DependentFileNode\r\n    </summary>\r\n    <param name=\"root\">Root of the hierarchy</param>\r\n    <param name=\"e\">Associated project element</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class DependentFileNode\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DependentFileNode\">\r\n    <summary>\r\n    Defines the logic for all dependent file nodes (solution explorer icon, commands etc.)\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DependentFileNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DependentFileNode\">\r\n    <summary>\r\n    Defines the logic for all dependent file nodes (solution explorer icon, commands etc.)\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int UpdateProjectCfg_Begin(IVsHierarchy hierarchy, IVsCfg configProject, IVsCfg configSolution, uint action, ref int cancel)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Called right before a project configuration begins to build. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project that is to be build.</param>\r\n    <param name=\"configProject\">A configuration project object.</param>\r\n    <param name=\"configSolution\">A configuration solution object.</param>\r\n    <param name=\"action\">The action taken.</param>\r\n    <param name=\"cancel\">A flag indicating cancel.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n    <remarks>The values for the action are defined in the enum _SLNUPDACTION env\\msenv\\core\\slnupd2.h</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Begin(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Called right before a project configuration begins to build. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project that is to be build.</param>\r\n    <param name=\"configProject\">A configuration project object.</param>\r\n    <param name=\"configSolution\">A configuration solution object.</param>\r\n    <param name=\"action\">The action taken.</param>\r\n    <param name=\"cancel\">A flag indicating cancel.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n    <remarks>The values for the action are defined in the enum _SLNUPDACTION env\\msenv\\core\\slnupd2.h</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\">true if called from IDispose.Dispose; false if called from Finalizer.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\">true if called from IDispose.Dispose; false if called from Finalizer.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateSolution_StartUpdate(ref int cancelUpdate)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_StartUpdate(System.Int32@)\">\r\n    <summary>\r\n    Called before the first project configuration is about to be built. \r\n    </summary>\r\n    <param name=\"cancelUpdate\">A flag indicating cancel update.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_StartUpdate(System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_StartUpdate(System.Int32@)\">\r\n    <summary>\r\n    Called before the first project configuration is about to be built. \r\n    </summary>\r\n    <param name=\"cancelUpdate\">A flag indicating cancel update.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterActiveSolutionCfgChange(IVsCfg oldActiveSlnCfg, IVsCfg newActiveSlnCfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnAfterActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)\">\r\n    <summary>\r\n    Fired after the active solution config is changed (pOldActiveSlnCfg can be NULL).\r\n    </summary>\r\n    <param name=\"oldActiveSlnCfg\">Old configuration.</param>\r\n    <param name=\"newActiveSlnCfg\">New configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnAfterActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnAfterActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)\">\r\n    <summary>\r\n    Fired after the active solution config is changed (pOldActiveSlnCfg can be NULL).\r\n    </summary>\r\n    <param name=\"oldActiveSlnCfg\">Old configuration.</param>\r\n    <param name=\"newActiveSlnCfg\">New configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnActiveProjectCfgChange(IVsHierarchy hierarchy)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Called when the active project configuration for a project in the solution has changed. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project whose configuration has changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnActiveProjectCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Called when the active project configuration for a project in the solution has changed. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project whose configuration has changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateSolution_Cancel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Cancel\">\r\n    <summary>\r\n    Called when a build is being cancelled. \r\n    </summary>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Cancel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Cancel\">\r\n    <summary>\r\n    Called when a build is being cancelled. \r\n    </summary>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateProjectCfg_Done(IVsHierarchy hierarchy, IVsCfg configProject, IVsCfg configSolution, uint action, int success, int cancel)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)\">\r\n    <summary>\r\n    Called right after a project configuration is finished building. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project that has finished building.</param>\r\n    <param name=\"configProject\">A configuration project object.</param>\r\n    <param name=\"configSolution\">A configuration solution object.</param>\r\n    <param name=\"action\">The action taken.</param>\r\n    <param name=\"success\">Flag indicating success.</param>\r\n    <param name=\"cancel\">Flag indicating cancel.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n    <remarks>The values for the action are defined in the enum _SLNUPDACTION env\\msenv\\core\\slnupd2.h</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateProjectCfg_Done(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg,System.UInt32,System.Int32,System.Int32)\">\r\n    <summary>\r\n    Called right after a project configuration is finished building. \r\n    </summary>\r\n    <param name=\"hierarchy\">The project that has finished building.</param>\r\n    <param name=\"configProject\">A configuration project object.</param>\r\n    <param name=\"configSolution\">A configuration solution object.</param>\r\n    <param name=\"action\">The action taken.</param>\r\n    <param name=\"success\">Flag indicating success.</param>\r\n    <param name=\"cancel\">Flag indicating cancel.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n    <remarks>The values for the action are defined in the enum _SLNUPDACTION env\\msenv\\core\\slnupd2.h</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeActiveSolutionCfgChange(IVsCfg oldActiveSlnCfg, IVsCfg newActiveSlnCfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnBeforeActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)\">\r\n    <summary>\r\n    Fired before the active solution config is changed (pOldActiveSlnCfg can be NULL\r\n    </summary>\r\n    <param name=\"oldActiveSlnCfg\">Old configuration.</param>\r\n    <param name=\"newActiveSlnCfg\">New configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnBeforeActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.OnBeforeActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)\">\r\n    <summary>\r\n    Fired before the active solution config is changed (pOldActiveSlnCfg can be NULL\r\n    </summary>\r\n    <param name=\"oldActiveSlnCfg\">Old configuration.</param>\r\n    <param name=\"newActiveSlnCfg\">New configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateSolution_Done(int fSucceeded, int fModified, int fCancelCommand)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)\">\r\n    <summary>\r\n    Called when a build is completed. \r\n    </summary>\r\n    <param name=\"succeeded\">true if no update actions failed.</param>\r\n    <param name=\"modified\">true if any update action succeeded.</param>\r\n    <param name=\"cancelCommand\">true if update actions were canceled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Done(System.Int32,System.Int32,System.Int32)\">\r\n    <summary>\r\n    Called when a build is completed. \r\n    </summary>\r\n    <param name=\"succeeded\">true if no update actions failed.</param>\r\n    <param name=\"modified\">true if any update action succeeded.</param>\r\n    <param name=\"cancelCommand\">true if update actions were canceled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UpdateSolution_Begin(ref int cancelUpdate)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Begin(System.Int32@)\">\r\n    <summary>\r\n    Called before any build actions have begun. This is the last chance to cancel the build before any building begins. \r\n    </summary>\r\n    <param name=\"cancelUpdate\">Flag indicating cancel update.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Begin(System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.UpdateSolution_Begin(System.Int32@)\">\r\n    <summary>\r\n    Called before any build actions have begun. This is the last chance to cancel the build before any building begins. \r\n    </summary>\r\n    <param name=\"cancelUpdate\">Flag indicating cancel update.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "serviceProvider",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.serviceProvider\">\r\n    <summary>\r\n    The associated service provider.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.serviceProvider",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.serviceProvider\">\r\n    <summary>\r\n    The associated service provider.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Mutex",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "solutionBuildManager",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionBuildManager\">\r\n    <summary>\r\n    The IVsSolutionBuildManager2 object controlling the update solution events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionBuildManager",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionBuildManager\">\r\n    <summary>\r\n    The IVsSolutionBuildManager2 object controlling the update solution events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "solutionEvents2Cookie",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionEvents2Cookie\">\r\n    <summary>\r\n    The cookie associated to the the events based IVsUpdateSolutionEvents2.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionEvents2Cookie",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionEvents2Cookie\">\r\n    <summary>\r\n    The cookie associated to the the events based IVsUpdateSolutionEvents2.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.isDisposed\">\r\n    <summary>\r\n    Flag determining if the object has been disposed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.isDisposed",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.isDisposed\">\r\n    <summary>\r\n    Flag determining if the object has been disposed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "solutionEvents3Cookie",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionEvents3Cookie\">\r\n    <summary>\r\n    The cookie associated to the theIVsUpdateSolutionEvents3 events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionEvents3Cookie",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.solutionEvents3Cookie\">\r\n    <summary>\r\n    The cookie associated to the theIVsUpdateSolutionEvents3 events.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected IVsSolutionBuildManager3 SolutionBuildManager3",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.SolutionBuildManager3\">\r\n    <summary>\r\n    The solution build manager object controlling the solution events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.SolutionBuildManager3",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.SolutionBuildManager3\">\r\n    <summary>\r\n    The solution build manager object controlling the solution events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected IServiceProvider ServiceProvider",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.ServiceProvider\">\r\n    <summary>\r\n    The associated service provider.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.ServiceProvider",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.ServiceProvider\">\r\n    <summary>\r\n    The associated service provider.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected IVsSolutionBuildManager2 SolutionBuildManager2",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.SolutionBuildManager2\">\r\n    <summary>\r\n    The solution build manager object controlling the solution events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.SolutionBuildManager2",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.SolutionBuildManager2\">\r\n    <summary>\r\n    The solution build manager object controlling the solution events.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected UpdateSolutionEventsListener(IServiceProvider serviceProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.#ctor(System.IServiceProvider)\">\r\n    <summary>\r\n    Overloaded constructor.\r\n    </summary>\r\n    <param name=\"serviceProvider\">A service provider.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.#ctor(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener.#ctor(System.IServiceProvider)\">\r\n    <summary>\r\n    Overloaded constructor.\r\n    </summary>\r\n    <param name=\"serviceProvider\">A service provider.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public abstract class UpdateSolutionEventsListener\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener\">\r\n    <summary>\r\n    Defines an abstract class implementing IVsUpdateSolutionEvents interfaces.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UpdateSolutionEventsListener\">\r\n    <summary>\r\n    Defines an abstract class implementing IVsUpdateSolutionEvents interfaces.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public void Resume()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SuspendFileChanges.Resume",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\")]\r\npublic void Suspend()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SuspendFileChanges.Suspend",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "isSuspending",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SuspendFileChanges.isSuspending",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "site",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SuspendFileChanges.site",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "documentFileName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SuspendFileChanges.documentFileName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "fileChangeControl",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SuspendFileChanges.fileChangeControl",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public SuspendFileChanges(IServiceProvider site, string document)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SuspendFileChanges.#ctor(System.IServiceProvider,System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class SuspendFileChanges",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SuspendFileChanges\">\r\n    <summary>\r\n    helper to make the editor ignore external changes\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.SuspendFileChanges",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SuspendFileChanges\">\r\n    <summary>\r\n    helper to make the editor ignore external changes\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "void IEnumSTATDATA.Clone(out IEnumSTATDATA clone)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumSTATDATA.Microsoft#VisualStudio#OLE#Interop#IEnumSTATDATA#Clone(Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IEnumSTATDATA.Skip(uint celt)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumSTATDATA.Microsoft#VisualStudio#OLE#Interop#IEnumSTATDATA#Skip(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IEnumSTATDATA.Next(uint celt, STATDATA[] d, out uint fetched)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumSTATDATA.Microsoft#VisualStudio#OLE#Interop#IEnumSTATDATA#Next(System.UInt32,Microsoft.VisualStudio.OLE.Interop.STATDATA[],System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IEnumSTATDATA.Reset()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumSTATDATA.Microsoft#VisualStudio#OLE#Interop#IEnumSTATDATA#Reset",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "i",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.EnumSTATDATA.i",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "e",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.EnumSTATDATA.e",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public EnumSTATDATA(IEnumerable i)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumSTATDATA.#ctor(System.Collections.IEnumerable)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class EnumSTATDATA",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.EnumSTATDATA",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override int ApplyChanges()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildPropertyPage.ApplyChanges",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override void BindProperties()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildPropertyPage.BindProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildPropertyPage.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "outputPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.BuildPropertyPage.outputPath",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string OutputPath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.BuildPropertyPage.OutputPath",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public BuildPropertyPage()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildPropertyPage.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class BuildPropertyPage\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildPropertyPage\">\r\n    <summary>\r\n    Defines the properties on the build property page and the logic the binds the properties to project data (load and save)\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildPropertyPage",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildPropertyPage\">\r\n    <summary>\r\n    Defines the properties on the build property page and the logic the binds the properties to project data (load and save)\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "internal void GetDocInfo(out bool isOpen, // true if the doc is opened\r\n out bool isDirty, // true if the doc is dirty\r\n out bool isOpenedByUs, // true if opened by our project\r\n out uint docCookie, // VSDOCCOOKIE if open\r\n out IVsPersistDocData persistDocData)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.GetDocInfo(System.Boolean@,System.Boolean@,System.Boolean@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@)\">\r\n    <summary>\r\n    Get document properties from RDT\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.GetDocInfo(System.Boolean@,System.Boolean@,System.Boolean@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.GetDocInfo(System.Boolean@,System.Boolean@,System.Boolean@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@)\">\r\n    <summary>\r\n    Get document properties from RDT\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static void RenameDocument(IServiceProvider site, string oldName, string newName, uint newItemId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.RenameDocument(System.IServiceProvider,System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Rename document in the running document table from oldName to newName.\r\n    </summary>\r\n    <param name=\"provider\">The service provider.</param>\r\n    <param name=\"oldName\">Full path to the old name of the document.</param>\t\t\r\n    <param name=\"newName\">Full path to the new name of the document.</param>\t\t\r\n    <param name=\"newItemId\">The new item id of the document</param>\t\t\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.RenameDocument(System.IServiceProvider,System.String,System.String,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.RenameDocument(System.IServiceProvider,System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Rename document in the running document table from oldName to newName.\r\n    </summary>\r\n    <param name=\"provider\">The service provider.</param>\r\n    <param name=\"oldName\">Full path to the old name of the document.</param>\t\t\r\n    <param name=\"newName\">Full path to the new name of the document.</param>\t\t\r\n    <param name=\"newItemId\">The new item id of the document</param>\t\t\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected string GetOwnerCaption()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.GetOwnerCaption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected string GetFullPathForDocument()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.GetFullPathForDocument",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected static void CloseWindowFrame(ref IVsWindowFrame windowFrame)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.CloseWindowFrame(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Open(ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a document using the standard editor. This method has no implementation since a document is abstract in this context\r\n    </summary>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the document</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>NotImplementedException</returns>\r\n    <remarks>See FileDocumentManager class for an implementation of this method</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a document using the standard editor. This method has no implementation since a document is abstract in this context\r\n    </summary>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the document</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>NotImplementedException</returns>\r\n    <remarks>See FileDocumentManager class for an implementation of this method</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenWithSpecific(uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame frame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a document using a specific editor. This method has no implementation.\r\n    </summary>\r\n    <param name=\"editorFlags\">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>\r\n    <param name=\"editorType\">Unique identifier of the editor type</param>\r\n    <param name=\"physicalView\">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"frame\">A reference to the window frame that is mapped to the document</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>NotImplementedException</returns>\r\n    <remarks>See FileDocumentManager for an implementation of this method</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a document using a specific editor. This method has no implementation.\r\n    </summary>\r\n    <param name=\"editorFlags\">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>\r\n    <param name=\"editorType\">Unique identifier of the editor type</param>\r\n    <param name=\"physicalView\">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"frame\">A reference to the window frame that is mapped to the document</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>NotImplementedException</returns>\r\n    <remarks>See FileDocumentManager for an implementation of this method</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static void UpdateCaption(IServiceProvider site, string caption, IntPtr docData)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.UpdateCaption(System.IServiceProvider,System.String,System.IntPtr)\">\r\n    <summary>\r\n    Updates the caption for all windows associated to the document.\r\n    </summary>\r\n    <param name=\"site\">The service provider.</param>\r\n    <param name=\"caption\">The new caption.</param>\r\n    <param name=\"docData\">The IUnknown interface to a document data object associated with a registered document.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.UpdateCaption(System.IServiceProvider,System.String,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.UpdateCaption(System.IServiceProvider,System.String,System.IntPtr)\">\r\n    <summary>\r\n    Updates the caption for all windows associated to the document.\r\n    </summary>\r\n    <param name=\"site\">The service provider.</param>\r\n    <param name=\"caption\">The new caption.</param>\r\n    <param name=\"docData\">The IUnknown interface to a document data object associated with a registered document.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Close(__FRAMECLOSE closeFlag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Close(Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE)\">\r\n    <summary>\r\n    Close an open document window\r\n    </summary>\r\n    <param name=\"closeFlag\">Decides how to close the document</param>\r\n    <returns>S_OK if successful, otherwise an error is returned</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.Close(Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Close(Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE)\">\r\n    <summary>\r\n    Close an open document window\r\n    </summary>\r\n    <param name=\"closeFlag\">Decides how to close the document</param>\r\n    <returns>S_OK if successful, otherwise an error is returned</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Save(bool saveIfDirty)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Save(System.Boolean)\">\r\n    <summary>\r\n    Silently saves an open document\r\n    </summary>\r\n    <param name=\"saveIfDirty\">Save the open document only if it is dirty</param>\r\n    <remarks>The call to SaveDocData may return Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS.STG_S_DATALOSS to indicate some characters could not be represented in the current codepage</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.Save(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DocumentManager.Save(System.Boolean)\">\r\n    <summary>\r\n    Silently saves an open document\r\n    </summary>\r\n    <param name=\"saveIfDirty\">Save the open document only if it is dirty</param>\r\n    <remarks>The call to SaveDocData may return Microsoft.VisualStudio.Shell.Interop.PFF_RESULTS.STG_S_DATALOSS to indicate some characters could not be represented in the current codepage</remarks>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "node",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DocumentManager.node",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected HierarchyNode Node",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.DocumentManager.Node",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected DocumentManager(HierarchyNode node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DocumentManager.#ctor(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class DocumentManager\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DocumentManager\">\r\n    <summary>\r\n    This abstract class handles opening, saving of items in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DocumentManager",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DocumentManager\">\r\n    <summary>\r\n    This abstract class handles opening, saving of items in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA1806:DoNotIgnoreMethodResults\", MessageId = \"Microsoft.VisualStudio.Shell.Interop.IVsMonitorSelection.UnadviseSelectionEvents(System.UInt32)\")]\r\nprotected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SelectionListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SelectionListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Init()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.Init",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnCmdUIContextChanged(uint dwCmdUICookie, int fActive)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.OnCmdUIContextChanged(System.UInt32,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnElementValueChanged(uint elementid, object varValueOld, object varValueNew)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.OnElementValueChanged(System.UInt32,System.Object,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SelectionListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SelectionListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnSelectionChanged(IVsHierarchy pHierOld, uint itemidOld, IVsMultiItemSelect pMISOld, ISelectionContainer pSCOld, IVsHierarchy pHierNew, uint itemidNew, IVsMultiItemSelect pMISNew, ISelectionContainer pSCNew)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.OnSelectionChanged(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect,Microsoft.VisualStudio.Shell.Interop.ISelectionContainer)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SelectionListener.isDisposed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "monSel",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SelectionListener.monSel",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "eventsCookie",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SelectionListener.eventsCookie",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "serviceProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SelectionListener.serviceProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SelectionListener.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SelectionListener.Mutex",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SelectionListener.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected IVsMonitorSelection SelectionMonitor",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SelectionListener.SelectionMonitor",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected ServiceProvider ServiceProvider",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SelectionListener.ServiceProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected uint EventsCookie",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SelectionListener.EventsCookie",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected SelectionListener(ServiceProvider serviceProviderParameter)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SelectionListener.#ctor(Microsoft.VisualStudio.Shell.ServiceProvider)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class SelectionListener\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SelectionListener",
          "XmlDocumentation": ""
        },
        {
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual bool EmbedInteropTypes",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceProperties.EmbedInteropTypes",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ComReferenceProperties(ComReferenceNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceProperties.#ctor(Microsoft.VisualStudio.Project.ComReferenceNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ComReferenceProperties",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ComReferenceProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private void InitHandlesList()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.InitHandlesList",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void Dispose(bool disposing)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.Dispose(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Close()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.Close\">\r\n    <summary>\r\n    Closes the ImageHandler object freeing its resources.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.Close",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.Close\">\r\n    <summary>\r\n    Closes the ImageHandler object freeing its resources.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void AddImage(Image image)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.AddImage(System.Drawing.Image)\">\r\n    <summary>\r\n    Add an image to the ImageHandler.\r\n    </summary>\r\n    <param name=\"image\">the image object to be added.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.AddImage(System.Drawing.Image)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.AddImage(System.Drawing.Image)\">\r\n    <summary>\r\n    Add an image to the ImageHandler.\r\n    </summary>\r\n    <param name=\"image\">the image object to be added.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IntPtr GetIconHandle(int iconIndex)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.GetIconHandle(System.Int32)\">\r\n    <summary>\r\n    Returns the handle to an icon build from the image of index\r\n    iconIndex in the image list.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.GetIconHandle(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.GetIconHandle(System.Int32)\">\r\n    <summary>\r\n    Returns the handle to an icon build from the image of index\r\n    iconIndex in the image list.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "imageList",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ImageHandler.imageList",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ImageHandler.isDisposed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "iconHandles",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ImageHandler.iconHandles",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ImageHandler.Mutex",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public ImageList ImageList",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ImageHandler.ImageList\">\r\n    <summary>\r\n    Get or set the ImageList object for this ImageHandler.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ImageHandler.ImageList",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ImageHandler.ImageList\">\r\n    <summary>\r\n    Get or set the ImageList object for this ImageHandler.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ImageHandler()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.#ctor\">\r\n    <summary>\r\n    Builds an empty ImageHandler object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.#ctor",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.#ctor\">\r\n    <summary>\r\n    Builds an empty ImageHandler object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public ImageHandler(ImageList list)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.#ctor(System.Windows.Forms.ImageList)\">\r\n    <summary>\r\n    Builds an ImageHandler object from an ImageList object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.#ctor(System.Windows.Forms.ImageList)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.#ctor(System.Windows.Forms.ImageList)\">\r\n    <summary>\r\n    Builds an ImageHandler object from an ImageList object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1810:InitializeReferenceTypeStaticFieldsInline\")]\r\nstatic ImageHandler()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.#cctor\">\r\n    <summary>\r\n    Initializes the <see cref=\"!:RDTListener\"/> class.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.#cctor",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.#cctor\">\r\n    <summary>\r\n    Initializes the <see cref=\"!:RDTListener\"/> class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public ImageHandler(Stream resourceStream)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.#ctor(System.IO.Stream)\">\r\n    <summary>\r\n    Builds an ImageHandler object from a Stream providing the bitmap that\r\n    stores the images for the image list.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ImageHandler.#ctor(System.IO.Stream)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ImageHandler.#ctor(System.IO.Stream)\">\r\n    <summary>\r\n    Builds an ImageHandler object from a Stream providing the bitmap that\r\n    stores the images for the image list.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ImageHandler",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ImageHandler",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "internal static IntPtr CopyHGlobal(IntPtr data)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DragDropHelper.CopyHGlobal(System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public static int QueryGetData(Microsoft.VisualStudio.OLE.Interop.IDataObject pDataObject, ref FORMATETC fmtetc)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DragDropHelper.QueryGetData(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.OLE.Interop.FORMATETC@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal static string GetData(IntPtr dropHandle)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DragDropHelper.GetData(System.IntPtr)\">\r\n    <summary>\r\n    Returns the data packed after the DROPFILES structure.\r\n    </summary>\r\n    <param name=\"dropHandle\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DragDropHelper.GetData(System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DragDropHelper.GetData(System.IntPtr)\">\r\n    <summary>\r\n    Returns the data packed after the DROPFILES structure.\r\n    </summary>\r\n    <param name=\"dropHandle\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static string GetSourceProjectPath(Microsoft.VisualStudio.OLE.Interop.IDataObject dataObject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DragDropHelper.GetSourceProjectPath(Microsoft.VisualStudio.OLE.Interop.IDataObject)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public static List<string> GetDroppedFiles(ushort format, Microsoft.VisualStudio.OLE.Interop.IDataObject dataObject, out DropDataType ddt)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DragDropHelper.GetDroppedFiles(System.UInt16,Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Project.DropDataType@)\">\r\n    <summary>\r\n    Retrives data from a VS format.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DragDropHelper.GetDroppedFiles(System.UInt16,Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Project.DropDataType@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DragDropHelper.GetDroppedFiles(System.UInt16,Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Project.DropDataType@)\">\r\n    <summary>\r\n    Retrives data from a VS format.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static STGMEDIUM GetData(Microsoft.VisualStudio.OLE.Interop.IDataObject pDataObject, ref FORMATETC fmtetc)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DragDropHelper.GetData(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.OLE.Interop.FORMATETC@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public static FORMATETC CreateFormatEtc(ushort iFormat)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DragDropHelper.CreateFormatEtc(System.UInt16)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal static void CopyStringToHGlobal(string s, IntPtr data, int bufferSize)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DragDropHelper.CopyStringToHGlobal(System.String,System.IntPtr,System.Int32)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "CF_VSREFPROJECTITEMS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DragDropHelper.CF_VSREFPROJECTITEMS",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CF_VSPROJECTCLIPDESCRIPTOR",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DragDropHelper.CF_VSPROJECTCLIPDESCRIPTOR",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CF_VSSTGPROJECTITEMS",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DragDropHelper.CF_VSSTGPROJECTITEMS",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1810:InitializeReferenceTypeStaticFieldsInline\")]\r\nstatic DragDropHelper()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DragDropHelper.#cctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal static class DragDropHelper",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.DragDropHelper",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual void TaskStartedHandler(object sender, TaskStartedEventArgs buildEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for TaskStartedHandler events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.TaskStartedHandler(System.Object,Microsoft.Build.Framework.TaskStartedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for TaskStartedHandler events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void SetVerbosity()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.SetVerbosity\">\r\n    <summary>\r\n    Sets the verbosity level.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.SetVerbosity",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.SetVerbosity\">\r\n    <summary>\r\n    Sets the verbosity level.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void BuildStartedHandler(object sender, BuildStartedEventArgs buildEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for BuildStartedHandler events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.BuildStartedHandler(System.Object,Microsoft.Build.Framework.BuildStartedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for BuildStartedHandler events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void BuildFinishedHandler(object sender, BuildFinishedEventArgs buildEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for BuildFinishedHandler events.\r\n    </summary>\r\n    <param name=\"sender\"></param>\r\n    <param name=\"buildEvent\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.BuildFinishedHandler(System.Object,Microsoft.Build.Framework.BuildFinishedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for BuildFinishedHandler events.\r\n    </summary>\r\n    <param name=\"sender\"></param>\r\n    <param name=\"buildEvent\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void ErrorHandler(object sender, BuildErrorEventArgs errorEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)\">\r\n    <summary>\r\n    This is the delegate for error events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ErrorHandler(System.Object,Microsoft.Build.Framework.BuildErrorEventArgs)\">\r\n    <summary>\r\n    This is the delegate for error events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void ClearQueuedTasks()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.ClearQueuedTasks",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override void Initialize(IEventSource eventSource)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.Initialize(Microsoft.Build.Framework.IEventSource)\">\r\n    <summary>\r\n    Overridden from the Logger class.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.Initialize(Microsoft.Build.Framework.IEventSource)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.Initialize(Microsoft.Build.Framework.IEventSource)\">\r\n    <summary>\r\n    Overridden from the Logger class.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void ProjectStartedHandler(object sender, ProjectStartedEventArgs buildEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for ProjectStartedHandler events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ProjectStartedHandler(System.Object,Microsoft.Build.Framework.ProjectStartedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for ProjectStartedHandler events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void ClearCachedVerbosity()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ClearCachedVerbosity\">\r\n    <summary>\r\n    Clear the cached verbosity, so that it will be re-evaluated from the build verbosity registry key.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.ClearCachedVerbosity",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ClearCachedVerbosity\">\r\n    <summary>\r\n    Clear the cached verbosity, so that it will be re-evaluated from the build verbosity registry key.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void TaskFinishedHandler(object sender, TaskFinishedEventArgs buildEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for TaskFinishedHandler events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.TaskFinishedHandler(System.Object,Microsoft.Build.Framework.TaskFinishedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for TaskFinishedHandler events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void IndentOutput()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.IndentOutput",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected void QueueOutputText(string text)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.QueueOutputText(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private bool LogAtImportance(MessageImportance importance)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.LogAtImportance(Microsoft.Build.Framework.MessageImportance)\">\r\n    <summary>\r\n    This method takes a MessageImportance and returns true if messages\r\n    at importance i should be loggeed.  Otherwise return false.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.LogAtImportance(Microsoft.Build.Framework.MessageImportance)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.LogAtImportance(Microsoft.Build.Framework.MessageImportance)\">\r\n    <summary>\r\n    This method takes a MessageImportance and returns true if messages\r\n    at importance i should be loggeed.  Otherwise return false.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void MessageHandler(object sender, BuildMessageEventArgs messageEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)\">\r\n    <summary>\r\n    This is the delegate for Message event types\r\n    </summary>\t\t\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.MessageHandler(System.Object,Microsoft.Build.Framework.BuildMessageEventArgs)\">\r\n    <summary>\r\n    This is the delegate for Message event types\r\n    </summary>\t\t\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void TargetStartedHandler(object sender, TargetStartedEventArgs buildEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for TargetStartedHandler events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.TargetStartedHandler(System.Object,Microsoft.Build.Framework.TargetStartedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for TargetStartedHandler events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void TargetFinishedHandler(object sender, TargetFinishedEventArgs buildEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for TargetFinishedHandler events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.TargetFinishedHandler(System.Object,Microsoft.Build.Framework.TargetFinishedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for TargetFinishedHandler events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected void QueueOutputEvent(MessageImportance importance, BuildEventArgs buildEvent)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.QueueOutputEvent(Microsoft.Build.Framework.MessageImportance,Microsoft.Build.Framework.BuildEventArgs)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void CustomHandler(object sender, CustomBuildEventArgs buildEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.CustomHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)\">\r\n    <summary>\r\n    This is the delegate for CustomHandler events.\r\n    </summary>\r\n    <param name=\"sender\"></param>\r\n    <param name=\"buildEvent\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.CustomHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.CustomHandler(System.Object,Microsoft.Build.Framework.CustomBuildEventArgs)\">\r\n    <summary>\r\n    This is the delegate for CustomHandler events.\r\n    </summary>\r\n    <param name=\"sender\"></param>\r\n    <param name=\"buildEvent\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void WarningHandler(object sender, BuildWarningEventArgs warningEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)\">\r\n    <summary>\r\n    This is the delegate for warning events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.WarningHandler(System.Object,Microsoft.Build.Framework.BuildWarningEventArgs)\">\r\n    <summary>\r\n    This is the delegate for warning events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static void ShowErrorMessage(IServiceProvider serviceProvider, Exception exception)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ShowErrorMessage(System.IServiceProvider,System.Exception)\">\r\n    <summary>\r\n    Show error window about the exception\r\n    </summary>\r\n    <param name=\"serviceProvider\">service provider</param>\r\n    <param name=\"exception\">exception</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.ShowErrorMessage(System.IServiceProvider,System.Exception)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ShowErrorMessage(System.IServiceProvider,System.Exception)\">\r\n    <summary>\r\n    Show error window about the exception\r\n    </summary>\r\n    <param name=\"serviceProvider\">service provider</param>\r\n    <param name=\"exception\">exception</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void ClearQueuedOutput()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.ClearQueuedOutput",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void UnindentOutput()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.UnindentOutput",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void ProjectFinishedHandler(object sender, ProjectFinishedEventArgs buildEvent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for ProjectFinishedHandler events.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.ProjectFinishedHandler(System.Object,Microsoft.Build.Framework.ProjectFinishedEventArgs)\">\r\n    <summary>\r\n    This is the delegate for ProjectFinishedHandler events.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected void QueueTaskEvent(BuildEventArgs errorEvent)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.QueueTaskEvent(Microsoft.Build.Framework.BuildEventArgs)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private static void BeginInvokeWithErrorMessage(IServiceProvider serviceProvider, Dispatcher dispatcher, Action action)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.BeginInvokeWithErrorMessage(System.IServiceProvider,System.Windows.Threading.Dispatcher,System.Action)\">\r\n    <summary>\r\n    Call Dispatcher.BeginInvoke, showing an error message if there was a non-critical exception.\r\n    </summary>\r\n    <param name=\"serviceProvider\">service provider</param>\r\n    <param name=\"dispatcher\">dispatcher</param>\r\n    <param name=\"action\">action to invoke</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.BeginInvokeWithErrorMessage(System.IServiceProvider,System.Windows.Threading.Dispatcher,System.Action)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.BeginInvokeWithErrorMessage(System.IServiceProvider,System.Windows.Threading.Dispatcher,System.Action)\">\r\n    <summary>\r\n    Call Dispatcher.BeginInvoke, showing an error message if there was a non-critical exception.\r\n    </summary>\r\n    <param name=\"serviceProvider\">service provider</param>\r\n    <param name=\"dispatcher\">dispatcher</param>\r\n    <param name=\"action\">action to invoke</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private string GetFormattedErrorMessage(string fileName, int line, int column, bool isWarning, string errorNumber, string errorText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.GetFormattedErrorMessage(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String)\">\r\n    <summary>\r\n    Format error messages for the task list\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.GetFormattedErrorMessage(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.GetFormattedErrorMessage(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String)\">\r\n    <summary>\r\n    Format error messages for the task list\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static void CallWithErrorMessage(IServiceProvider serviceProvider, Action action)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.CallWithErrorMessage(System.IServiceProvider,System.Action)\">\r\n    <summary>\r\n    Show error message if exception is caught when invoking a method\r\n    </summary>\r\n    <param name=\"serviceProvider\">service provider</param>\r\n    <param name=\"action\">action to invoke</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.CallWithErrorMessage(System.IServiceProvider,System.Action)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.CallWithErrorMessage(System.IServiceProvider,System.Action)\">\r\n    <summary>\r\n    Show error message if exception is caught when invoking a method\r\n    </summary>\r\n    <param name=\"serviceProvider\">service provider</param>\r\n    <param name=\"action\">action to invoke</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected void QueueOutputText(MessageImportance importance, string text)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.QueueOutputText(Microsoft.Build.Framework.MessageImportance,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void ReportQueuedOutput()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.ReportQueuedOutput",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void ReportQueuedTasks()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.ReportQueuedTasks",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "currentIndent",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.currentIndent",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "outputQueue",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.outputQueue",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "errorString",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.errorString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "taskProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.taskProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "hierarchy",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.hierarchy",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "outputWindowPane",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.outputWindowPane",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "warningString",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.warningString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "buildVerbosityRegistryRoot",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.buildVerbosityRegistryRoot",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "buildVerbosityRegistryKey",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.buildVerbosityRegistryKey",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "haveCachedVerbosity",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.haveCachedVerbosity",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "dispatcher",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.dispatcher",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "buildVerbosityRegistrySubKey",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.buildVerbosityRegistrySubKey",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "serviceProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.serviceProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "taskQueue",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.IDEBuildLogger.taskQueue",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal IVsOutputWindowPane OutputWindowPane",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IDEBuildLogger.OutputWindowPane\">\r\n    <summary>\r\n    Set to null to avoid writing to the output window\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.IDEBuildLogger.OutputWindowPane",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IDEBuildLogger.OutputWindowPane\">\r\n    <summary>\r\n    Set to null to avoid writing to the output window\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal string BuildVerbosityRegistryRoot",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IDEBuildLogger.BuildVerbosityRegistryRoot\">\r\n    <summary>\r\n    When building from within VS, setting this will\r\n    enable the logger to retrive the verbosity from\r\n    the correct registry hive.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.IDEBuildLogger.BuildVerbosityRegistryRoot",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IDEBuildLogger.BuildVerbosityRegistryRoot\">\r\n    <summary>\r\n    When building from within VS, setting this will\r\n    enable the logger to retrive the verbosity from\r\n    the correct registry hive.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string ErrorString",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.IDEBuildLogger.ErrorString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public IServiceProvider ServiceProvider",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.IDEBuildLogger.ServiceProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string WarningString",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.IDEBuildLogger.WarningString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected bool InteractiveBuild",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IDEBuildLogger.InteractiveBuild\">\r\n    <summary>\r\n    When the build is not a \"design time\" (background or secondary) build this is True\r\n    </summary>\r\n    <remarks>\r\n    The only known way to detect an interactive build is to check this.outputWindowPane for null.\r\n    </remarks>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.IDEBuildLogger.InteractiveBuild",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IDEBuildLogger.InteractiveBuild\">\r\n    <summary>\r\n    When the build is not a \"design time\" (background or secondary) build this is True\r\n    </summary>\r\n    <remarks>\r\n    The only known way to detect an interactive build is to check this.outputWindowPane for null.\r\n    </remarks>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public IDEBuildLogger(IVsOutputWindowPane output, TaskProvider taskProvider, IVsHierarchy hierarchy)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,Microsoft.VisualStudio.Shell.TaskProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Constructor.  Inititialize member data.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IDEBuildLogger.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,Microsoft.VisualStudio.Shell.TaskProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IDEBuildLogger.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,Microsoft.VisualStudio.Shell.TaskProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Constructor.  Inititialize member data.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "internal class IDEBuildLogger\r\n\r\n#endregionexception handling helpers",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IDEBuildLogger\">\r\n    <summary>\r\n    This class implements an MSBuild logger that output events to VS outputwindow and tasklist.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IDEBuildLogger",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IDEBuildLogger\">\r\n    <summary>\r\n    This class implements an MSBuild logger that output events to VS outputwindow and tasklist.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "internal string GetVsTemplateFile(string templateFile)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.RegisteredProjectType.GetVsTemplateFile(System.String)\">\r\n    <summary>\r\n    If the project support VsTemplates, returns the path to\r\n    the vstemplate file corresponding to the requested template\r\n    \r\n    You can pass in a string such as: \"Windows\\Console Application\"\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.RegisteredProjectType.GetVsTemplateFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.RegisteredProjectType.GetVsTemplateFile(System.String)\">\r\n    <summary>\r\n    If the project support VsTemplates, returns the path to\r\n    the vstemplate file corresponding to the requested template\r\n    \r\n    You can pass in a string such as: \"Windows\\Console Application\"\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static RegisteredProjectType CreateRegisteredProjectType(Guid projectTypeGuid)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.RegisteredProjectType.CreateRegisteredProjectType(System.Guid)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "wizardTemplatesDir",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.RegisteredProjectType.wizardTemplatesDir",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "packageGuid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.RegisteredProjectType.packageGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DefaultProjectExtension",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.RegisteredProjectType.DefaultProjectExtension",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectTemplatesDir",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.RegisteredProjectType.projectTemplatesDir",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "defaultProjectExtension",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.RegisteredProjectType.defaultProjectExtension",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Package",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.RegisteredProjectType.Package",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WizardsTemplatesDir",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.RegisteredProjectType.WizardsTemplatesDir",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectTemplatesDir",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.RegisteredProjectType.ProjectTemplatesDir",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal string ProjectTemplatesDirValue",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.RegisteredProjectType.ProjectTemplatesDirValue",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal string DefaultProjectExtensionValue",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.RegisteredProjectType.DefaultProjectExtensionValue",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal Guid PackageGuidValue",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.RegisteredProjectType.PackageGuidValue",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal string WizardTemplatesDirValue",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.RegisteredProjectType.WizardTemplatesDirValue",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class RegisteredProjectType",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.RegisteredProjectType\">\r\n    <summary>\r\n    Gets registry settings from for a project.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.RegisteredProjectType",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.RegisteredProjectType\">\r\n    <summary>\r\n    Gets registry settings from for a project.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override string GetLocalizedString(string value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SRCategoryAttribute.GetLocalizedString(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public SRCategoryAttribute(string category): base (category)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SRCategoryAttribute.#ctor(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal sealed class SRCategoryAttribute",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SRCategoryAttribute",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\")]\r\npublic virtual int SaveItem(VSSAVEFLAGS saveFlag, string silentSaveAsName, uint itemid, IntPtr docData, out int cancelled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Saves the hierarchy item to disk. \r\n    </summary>\r\n    <param name=\"saveFlag\">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>\r\n    <param name=\"silentSaveAsName\">New filename when doing silent save as</param>\r\n    <param name=\"itemid\">Item identifier of the hierarchy item saved from VSITEMID.</param>\r\n    <param name=\"docData\">Item identifier of the hierarchy item saved from VSITEMID.</param>\r\n    <param name=\"cancelled\">[out] true if the save action was canceled.</param>\r\n    <returns>[out] true if the save action was canceled.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Saves the hierarchy item to disk. \r\n    </summary>\r\n    <param name=\"saveFlag\">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>\r\n    <param name=\"silentSaveAsName\">New filename when doing silent save as</param>\r\n    <param name=\"itemid\">Item identifier of the hierarchy item saved from VSITEMID.</param>\r\n    <param name=\"docData\">Item identifier of the hierarchy item saved from VSITEMID.</param>\r\n    <param name=\"cancelled\">[out] true if the save action was canceled.</param>\r\n    <returns>[out] true if the save action was canceled.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void RemoveChild(HierarchyNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.RemoveChild(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Removes a node from the hierarchy.\r\n    </summary>\r\n    <param name=\"node\">The node to remove.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.RemoveChild(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.RemoveChild(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Removes a node from the hierarchy.\r\n    </summary>\r\n    <param name=\"node\">The node to remove.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddChild(HierarchyNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddChild(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    AddChild - add a node, sorted in the right location.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AddChild(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddChild(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    AddChild - add a node, sorted in the right location.\r\n    </summary>\r\n    <param name=\"node\">The node to add.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"ClipBoard\")]\r\nprotected internal virtual StringBuilder PrepareSelectedNodesForClipBoard()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.PrepareSelectedNodesForClipBoard\">\r\n    <summary>\r\n    Prepares a selected node for clipboard. \r\n    It takes the the project reference string of this item and adds it to a stringbuilder. \r\n    </summary>\r\n    <returns>A stringbuilder.</returns>\r\n    <devremark>This method has to be public since seleceted nodes will call it.</devremark>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.PrepareSelectedNodesForClipBoard",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.PrepareSelectedNodesForClipBoard\">\r\n    <summary>\r\n    Prepares a selected node for clipboard. \r\n    It takes the the project reference string of this item and adds it to a stringbuilder. \r\n    </summary>\r\n    <returns>A stringbuilder.</returns>\r\n    <devremark>This method has to be public since seleceted nodes will call it.</devremark>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal protected virtual void DeleteFromStorage(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DeleteFromStorage(System.String)\">\r\n    <summary>\r\n    Delete the item corresponding to the specified path from storage.\r\n    </summary>\r\n    <param name=\"path\">Url of the item to delete</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DeleteFromStorage(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DeleteFromStorage(System.String)\">\r\n    <summary>\r\n    Delete the item corresponding to the specified path from storage.\r\n    </summary>\r\n    <param name=\"path\">Url of the item to delete</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"vaIn\")]\r\nprotected virtual int ExecCommandThatDependsOnSelectedNodes(Guid cmdGroup, uint cmdId, uint cmdExecOpt, IntPtr vaIn, IntPtr vaOut, CommandOrigin commandOrigin, IList<HierarchyNode> selectedNodes, out bool handled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandThatDependsOnSelectedNodes(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)\">\r\n    <summary>\r\n    Executes a command that can only be executed once the whole selection is known.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <param name=\"selectedNodes\">The list of the selected nodes.</param>\r\n    <param name=\"handled\">An out parameter specifying that the command was handled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandThatDependsOnSelectedNodes(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandThatDependsOnSelectedNodes(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)\">\r\n    <summary>\r\n    Executes a command that can only be executed once the whole selection is known.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <param name=\"selectedNodes\">The list of the selected nodes.</param>\r\n    <param name=\"handled\">An out parameter specifying that the command was handled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"propid\")]\r\npublic virtual int GetGuidProperty(int propid, out Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Get a guid property\r\n    </summary>\r\n    <param name=\"propid\">property id for the guid property requested</param>\r\n    <param name=\"guid\">the requested guid</param>\r\n    <returns>S_OK if succeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Get a guid property\r\n    </summary>\r\n    <param name=\"propid\">property id for the guid property requested</param>\r\n    <param name=\"guid\">the requested guid</param>\r\n    <returns>S_OK if succeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\">Is the Dispose called by some internal member, or it is called by from GC.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\">Is the Dispose called by some internal member, or it is called by from GC.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetSite(out Microsoft.VisualStudio.OLE.Interop.IServiceProvider site)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int AdviseHierarchyEvents(IVsHierarchyEvents sink, out uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AdviseHierarchyEvents(Microsoft.VisualStudio.Shell.Interop.IVsHierarchyEvents,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject pDataObject, uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual int AfterSaveItemAs(IntPtr docData, string newName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AfterSaveItemAs(System.IntPtr,System.String)\">\r\n    <summary>\r\n    Performs save as operation for an item after the save as dialog has been processed.\r\n    </summary>\r\n    <param name=\"docData\">A pointer to the rdt</param>\r\n    <param name=\"newName\">The newName of the item</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AfterSaveItemAs(System.IntPtr,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AfterSaveItemAs(System.IntPtr,System.String)\">\r\n    <summary>\r\n    Performs save as operation for an item after the save as dialog has been processed.\r\n    </summary>\r\n    <param name=\"docData\">A pointer to the rdt</param>\r\n    <param name=\"newName\">The newName of the item</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string GetRelationalName()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationalName\">\r\n    <summary>\r\n    Returns the relational name which is defined as the first part of the caption until indexof NameRelationSeparator\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationalName",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationalName\">\r\n    <summary>\r\n    Returns the relational name which is defined as the first part of the caption until indexof NameRelationSeparator\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1720:IdentifiersShouldNotContainTypeNames\", MessageId = \"pointer\")]\r\nprotected virtual int DisplayContextMenu(IList<HierarchyNode> selectedNodes, IntPtr pointerToVariant)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisplayContextMenu(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.IntPtr)\">\r\n    <summary>\r\n    Displays the context menu.\r\n    </summary>\r\n    <param name=\"selectedNodes\">list of selected nodes.</param>\r\n    <param name=\"pointerToVariant\">contains the location (x,y) at which to show the menu.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DisplayContextMenu(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisplayContextMenu(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.IntPtr)\">\r\n    <summary>\r\n    Displays the context menu.\r\n    </summary>\r\n    <param name=\"selectedNodes\">list of selected nodes.</param>\r\n    <param name=\"pointerToVariant\">contains the location (x,y) at which to show the menu.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int ReloadItem(uint itemId, uint reserved)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32,System.UInt32)\">\r\n    <summary>\r\n    Called to reload a project item. \r\n    </summary>\r\n    <param name=\"itemId\">Specifies itemid from VSITEMID.</param>\r\n    <param name=\"reserved\">Reserved.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32,System.UInt32)\">\r\n    <summary>\r\n    Called to reload a project item. \r\n    </summary>\r\n    <param name=\"itemId\">Specifies itemid from VSITEMID.</param>\r\n    <param name=\"reserved\">Reserved.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual VSADDFILEFLAGS[] GetAddFileFlags(string[] files)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetAddFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnAddFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSADDFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetAddFileFlags(System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetAddFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnAddFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSADDFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject pDataObject, uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int DragOver(uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCanonicalName(uint itemId, out string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetCanonicalName(System.UInt32,System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int SetProperty(uint itemId, int propid, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetProperty(System.UInt32,System.Int32,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProperty(uint itemId, int propId, out object propVal)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetProperty(System.UInt32,System.Int32,System.Object@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2233:OperationsShouldNotOverflow\", MessageId = \"cookie-1\")]\r\npublic virtual int UnadviseHierarchyEvents(uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.UnadviseHierarchyEvents(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Scc\")]\r\nprotected internal virtual void UpdateSccStateIcons()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.UpdateSccStateIcons\">\r\n    <summary>\r\n    Redraws the state icon if the node is not excluded from source control.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.UpdateSccStateIcons",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.UpdateSccStateIcons\">\r\n    <summary>\r\n    Redraws the state icon if the node is not excluded from source control.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DragLeave()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DragLeave",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"vaIn\")]\r\nprotected virtual int ExecCommandIndependentOfSelection(Guid cmdGroup, uint cmdId, uint cmdExecOpt, IntPtr vaIn, IntPtr vaOut, CommandOrigin commandOrigin, out bool handled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandIndependentOfSelection(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Boolean@)\">\r\n    <summary>\r\n    Executes command that are independent of a selection.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <param name=\"handled\">An out parameter specifying that the command was handled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandIndependentOfSelection(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Boolean@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandIndependentOfSelection(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin,System.Boolean@)\">\r\n    <summary>\r\n    Executes command that are independent of a selection.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <param name=\"handled\">An out parameter specifying that the command was handled.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Cmdexecopt\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"n\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"pva\")]\r\nprotected virtual int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Handles command execution.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"nCmdexecopt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"pvaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"pvaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Handles command execution.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"nCmdexecopt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"pvaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"pvaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int ParseCanonicalName(string name, out uint itemId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ParseCanonicalName(System.String,System.UInt32@)\">\r\n    <summary>\r\n    the canonicalName of an item is it's URL, or better phrased,\r\n    the persistence data we put into @RelPath, which is a relative URL\r\n    to the root project\r\n    returning the itemID from this means scanning the list\r\n    </summary>\r\n    <param name=\"name\"></param>\r\n    <param name=\"itemId\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ParseCanonicalName(System.String,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ParseCanonicalName(System.String,System.UInt32@)\">\r\n    <summary>\r\n    the canonicalName of an item is it's URL, or better phrased,\r\n    the persistence data we put into @RelPath, which is a relative URL\r\n    to the root project\r\n    returning the itemID from this means scanning the list\r\n    </summary>\r\n    <param name=\"name\"></param>\r\n    <param name=\"itemId\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Remove(bool removeFromStorage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Removes items from the hierarchy. Project overwrites this\r\n    </summary>\r\n    <param name=\"removeFromStorage\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Remove(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Removes items from the hierarchy. Project overwrites this\r\n    </summary>\r\n    <param name=\"removeFromStorage\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected void CloseDocumentWindow(HierarchyNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CloseDocumentWindow(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Close open document frame for a specific node.\r\n    </summary> \r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CloseDocumentWindow(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CloseDocumentWindow(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Close open document frame for a specific node.\r\n    </summary> \r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void IgnoreItemFileChanges(bool ignoreFlag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.Boolean)\">\r\n    <summary>\r\n    Determines whether a file change should be ignored or not.\r\n    </summary>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (true to ignore changes).</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.Boolean)\">\r\n    <summary>\r\n    Determines whether a file change should be ignored or not.\r\n    </summary>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (true to ignore changes).</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnDropNotify(int fDropped, uint dwEffects)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnDropNotify(System.Int32,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual int ExcludeFromProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeFromProject\">\r\n    <summary>\r\n    Handles the exclude from project command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeFromProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeFromProject\">\r\n    <summary>\r\n    Handles the exclude from project command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual int ShowInDesigner(IList<HierarchyNode> selectedNodes)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ShowInDesigner(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode})\">\r\n    <summary>\r\n    Handles the Show in Designer command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ShowInDesigner(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ShowInDesigner(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode})\">\r\n    <summary>\r\n    Handles the Show in Designer command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual bool AllowPasteCommand()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AllowPasteCommand\">\r\n    <summary>\r\n    Determines if the paste command should be allowed.\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AllowPasteCommand",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AllowPasteCommand\">\r\n    <summary>\r\n    Determines if the paste command should be allowed.\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual VSQUERYREMOVEFILEFLAGS[] GetQueryRemoveFileFlags(string[] files)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetQueryRemoveFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSQUERYREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryRemoveFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSQUERYREMOVEFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetQueryRemoveFileFlags(System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetQueryRemoveFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSQUERYREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryRemoveFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSQUERYREMOVEFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal HierarchyNode FindChild(string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.FindChild(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStatus(ref Guid guidCmdGroup, uint cCmds, OLECMD[] prgCmds, IntPtr pCmdText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)\">\r\n    <summary>\r\n    Queries the object for the command status\r\n    </summary>\r\n    <remarks>we only support one command at a time, i.e. the first member in the OLECMD array</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)\">\r\n    <summary>\r\n    Queries the object for the command status\r\n    </summary>\r\n    <remarks>we only support one command at a time, i.e. the first member in the OLECMD array</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string GetRelationNameExtension()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationNameExtension\">\r\n    <summary>\r\n    Returns the 'extension' of the relational name\r\n    e.g. form1.resx returns .resx, form1.designer.cs returns .designer.cs\r\n    </summary>\r\n    <returns>The extension</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationNameExtension",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRelationNameExtension\">\r\n    <summary>\r\n    Returns the 'extension' of the relational name\r\n    e.g. form1.resx returns .resx, form1.designer.cs returns .designer.cs\r\n    </summary>\r\n    <returns>The extension</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual int CutToClipboard()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CutToClipboard\">\r\n    <summary>\r\n    Handle the Cut operation to the clipboard\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CutToClipboard",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CutToClipboard\">\r\n    <summary>\r\n    Handle the Cut operation to the clipboard\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int SetEditLabel(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Called by the shell when a node has been renamed from the GUI\r\n    </summary>\r\n    <param name=\"label\"></param>\r\n    <returns>E_NOTIMPL</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Called by the shell when a node has been renamed from the GUI\r\n    </summary>\r\n    <param name=\"label\"></param>\r\n    <returns>E_NOTIMPL</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"propid\")]\r\npublic virtual int SetProperty(int propid, object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetProperty(System.Int32,System.Object)\">\r\n    <summary>\r\n    Sets the value of a property for a given property id\r\n    </summary>\r\n    <param name=\"propid\">the property id of the property to be set</param>\r\n    <param name=\"value\">value of the property</param>\r\n    <returns>S_OK if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetProperty(System.Int32,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetProperty(System.Int32,System.Object)\">\r\n    <summary>\r\n    Sets the value of a property for a given property id\r\n    </summary>\r\n    <param name=\"propid\">the property id of the property to be set</param>\r\n    <param name=\"value\">value of the property</param>\r\n    <returns>S_OK if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void OnItemDeleted()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnItemDeleted",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object GetService(Type type)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetService(System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal bool AddFileToNodeFromProjectReference(string projectRef, HierarchyNode targetNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddFileToNodeFromProjectReference(System.String,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Adds an item from a project refererence to target node.\r\n    </summary>\r\n    <param name=\"projectRef\"></param>\r\n    <param name=\"targetNode\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AddFileToNodeFromProjectReference(System.String,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddFileToNodeFromProjectReference(System.String,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Adds an item from a project refererence to target node.\r\n    </summary>\r\n    <param name=\"projectRef\"></param>\r\n    <param name=\"targetNode\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Unused2()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused2",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int IgnoreItemFileChanges(uint itemId, int ignoreFlag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.UInt32,System.Int32)\">\r\n    <summary>\r\n    Flag indicating that changes to a file can be ignored when item is saved or reloaded. \r\n    </summary>\r\n    <param name=\"itemId\">Specifies the item id from VSITEMID.</param>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.UInt32,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IgnoreItemFileChanges(System.UInt32,System.Int32)\">\r\n    <summary>\r\n    Flag indicating that changes to a file can be ignored when item is saved or reloaded. \r\n    </summary>\r\n    <param name=\"itemId\">Specifies the item id from VSITEMID.</param>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CreatePropertiesObject\">\r\n    <summary>\r\n    Creates an object derived from NodeProperties that will be used to expose properties\r\n    spacific for this object to the property browser.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CreatePropertiesObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CreatePropertiesObject\">\r\n    <summary>\r\n    Creates an object derived from NodeProperties that will be used to expose properties\r\n    spacific for this object to the property browser.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"vaIn\")]\r\nprotected virtual int InternalExecCommand(Guid cmdGroup, uint cmdId, uint cmdExecOpt, IntPtr vaIn, IntPtr vaOut, CommandOrigin commandOrigin)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.InternalExecCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)\">\r\n    <summary>\r\n    The main entry point for command excection. Gets called from the IVsUIHierarchy and IOleCommandTarget methods.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.InternalExecCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.InternalExecCommand(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)\">\r\n    <summary>\r\n    The main entry point for command excection. Gets called from the IVsUIHierarchy and IOleCommandTarget methods.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmdId\">The command to be executed.</param>\r\n    <param name=\"cmdExecOpt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"vaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"vaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <param name=\"commandOrigin\">The origin of the command. From IOleCommandTarget or hierarchy.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Re\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"ReDraw\")]\r\npublic virtual void ReDraw(UIHierarchyElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReDraw(Microsoft.VisualStudio.Project.UIHierarchyElement)\">\r\n    <summary>\r\n    Causes the hierarchy to be redrawn.\r\n    </summary>\r\n    <param name=\"element\">Used by the hierarchy to decide which element to redraw</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ReDraw(Microsoft.VisualStudio.Project.UIHierarchyElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReDraw(Microsoft.VisualStudio.Project.UIHierarchyElement)\">\r\n    <summary>\r\n    Causes the hierarchy to be redrawn.\r\n    </summary>\r\n    <param name=\"element\">Used by the hierarchy to decide which element to redraw</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\")]\r\nprotected virtual int AddNewFolder()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddNewFolder\">\r\n    <summary>\r\n    Add a new Folder to the project hierarchy.\r\n    </summary>\r\n    <returns>S_OK if succeeded, otherwise an error</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AddNewFolder",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.AddNewFolder\">\r\n    <summary>\r\n    Add a new Folder to the project hierarchy.\r\n    </summary>\r\n    <returns>S_OK if succeeded, otherwise an error</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"propid\")]\r\npublic virtual int SetGuidProperty(int propid, ref Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Set a guid property.\r\n    </summary>\r\n    <param name=\"propid\">property id of the guid property to be set</param>\r\n    <param name=\"guid\">the guid to be set</param>\r\n    <returns>E_NOTIMPL</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Set a guid property.\r\n    </summary>\r\n    <param name=\"propid\">property id of the guid property to be set</param>\r\n    <param name=\"guid\">the guid to be set</param>\r\n    <returns>E_NOTIMPL</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual int PasteFromClipboard(HierarchyNode targetNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.PasteFromClipboard(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Handle the paste from Clipboard command.\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.PasteFromClipboard(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.PasteFromClipboard(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Handle the paste from Clipboard command.\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetAutomationObject\">\r\n    <summary>\r\n    Returns an automation object representing this node\r\n    </summary>\r\n    <returns>The automation object</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetAutomationObject\">\r\n    <summary>\r\n    Returns an automation object representing this node\r\n    </summary>\r\n    <returns>The automation object</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual VSQUERYADDFILEFLAGS[] GetQueryAddFileFlags(string[] files)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetQueryAddFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSQUERYADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryAddFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSADDFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetQueryAddFileFlags(System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetQueryAddFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSQUERYADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryAddFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSADDFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Reloadable\")]\r\nprotected internal virtual bool IsItemReloadable()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable\">\r\n    <summary>\r\n    Called to determine whether a project item is reloadable. \r\n    </summary>\r\n    <returns>True if the project item is reloadable.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable\">\r\n    <summary>\r\n    Called to determine whether a project item is reloadable. \r\n    </summary>\r\n    <returns>True if the project item is reloadable.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryClose(out int fCanClose)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryClose(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal void InstantiateItemsDraggedOrCutOrCopiedList()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.InstantiateItemsDraggedOrCutOrCopiedList",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Mk\")]\r\npublic virtual string GetMkDocument()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetMkDocument\">\r\n    <summary>\r\n    This method is called by the interface method GetMkDocument to specify the item moniker.\r\n    </summary>\r\n    <returns>The moniker for this item</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetMkDocument",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetMkDocument\">\r\n    <summary>\r\n    This method is called by the interface method GetMkDocument to specify the item moniker.\r\n    </summary>\r\n    <returns>The moniker for this item</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetGuidProperty(uint itemId, int propid, out Guid guid)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetGuidProperty(System.UInt32,System.Int32,System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual int AddItemToHierarchy(HierarchyAddType addType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.AddItemToHierarchy(Microsoft.VisualStudio.Project.HierarchyAddType)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void ReloadItem(uint reserved)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32)\">\r\n    <summary>\r\n    Reloads an item.\r\n    </summary>\r\n    <param name=\"reserved\">Reserved parameter defined at the IVsPersistHierarchyItem2::ReloadItem parameter.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ReloadItem(System.UInt32)\">\r\n    <summary>\r\n    Reloads an item.\r\n    </summary>\r\n    <param name=\"reserved\">Reserved parameter defined at the IVsPersistHierarchyItem2::ReloadItem parameter.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void DoDefaultAction()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DoDefaultAction\">\r\n    <summary>\r\n    Overwritten in subclasses\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DoDefaultAction",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DoDefaultAction\">\r\n    <summary>\r\n    Overwritten in subclasses\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int ExecCommand(uint itemId, ref Guid guidCmdGroup, uint nCmdId, uint nCmdExecOpt, IntPtr pvain, IntPtr p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ExecCommand(System.UInt32,System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"p\")]\r\nprotected virtual int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Handles command status on a node. Should be overridden by descendant nodes. If a command cannot be handled then the base should be called.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>\r\n    <param name=\"cmd\">The command to query status for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>\r\n    <param name=\"result\">An out parameter specifying the QueryStatusResult of the command.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Handles command status on a node. Should be overridden by descendant nodes. If a command cannot be handled then the base should be called.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>\r\n    <param name=\"cmd\">The command to query status for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>\r\n    <param name=\"result\">An out parameter specifying the QueryStatusResult of the command.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SetGuidProperty(uint itemId, int propid, ref Guid guid)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetGuidProperty(System.UInt32,System.Int32,System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject pDataObject, uint dwEffect, out int fCancelDrop)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual object GetIconHandle(bool open)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Return an iconhandle\r\n    </summary>\r\n    <param name=\"open\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Return an iconhandle\r\n    </summary>\r\n    <param name=\"open\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int IsItemDirty(uint itemId, IntPtr docData, out int isDirty)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the hierarchy item changed. \r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of the hierarchy item contained in VSITEMID.</param>\r\n    <param name=\"docData\">Pointer to the IUnknown interface of the hierarchy item.</param>\r\n    <param name=\"isDirty\">true if the hierarchy item changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the hierarchy item changed. \r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of the hierarchy item contained in VSITEMID.</param>\r\n    <param name=\"docData\">Pointer to the IUnknown interface of the hierarchy item.</param>\r\n    <param name=\"isDirty\">true if the hierarchy item changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Unused3()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused3",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Unused1()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused1",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Overwrite this method to tell that you support the default icon for this node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Overwrite this method to tell that you support the default icon for this node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Scc\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"scc\")]\r\nprotected internal virtual void GetSccSpecialFiles(string sccFile, IList<string> files, IList<tagVsSccFilesFlags> flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    This method should be overridden to provide the list of special files and associated flags for source control.\r\n    </summary>\r\n    <param name=\"sccFile\">One of the file associated to the node.</param>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    This method should be overridden to provide the list of special files and associated flags for source control.\r\n    </summary>\r\n    <param name=\"sccFile\">One of the file associated to the node.</param>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual DocumentManager GetDocumentManager()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetDocumentManager\">\r\n    <summary>\r\n    Factory method for the Document Manager object\r\n    </summary>\r\n    <returns>null object, since a hierarchy node does not know its kind of document</returns>\r\n    <remarks>Must be overriden by derived node classes if a document manager is needed</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetDocumentManager",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetDocumentManager\">\r\n    <summary>\r\n    Factory method for the Document Manager object\r\n    </summary>\r\n    <returns>null object, since a hierarchy node does not know its kind of document</returns>\r\n    <remarks>Must be overriden by derived node classes if a document manager is needed</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void RegisterClipboardNotifications(bool value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.RegisterClipboardNotifications(System.Boolean)\">\r\n    <summary>\r\n    Register/Unregister for Clipboard events for the UiHierarchyWindow (solution explorer)\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n    <param name=\"value\">true for register, false for unregister</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.RegisterClipboardNotifications(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.RegisterClipboardNotifications(System.Boolean)\">\r\n    <summary>\r\n    Register/Unregister for Clipboard events for the UiHierarchyWindow (solution explorer)\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n    <param name=\"value\">true for register, false for unregister</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual VSREMOVEFILEFLAGS[] GetRemoveFileFlags(string[] files)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRemoveFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnRemoveFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSREMOVEFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetRemoveFileFlags(System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetRemoveFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnRemoveFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSREMOVEFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\r\ninternal void FindNodesOfType<T>(List<T> nodes)where T : HierarchyNode",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.FindNodesOfType``1(System.Collections.Generic.List{``0})\">\r\n    <summary>\r\n    Recursively find all nodes of type T\r\n    </summary>\r\n    <typeparam name=\"T\">The type of hierachy node being serched for</typeparam>\r\n    <param name=\"nodes\">A list of nodes of type T</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.FindNodesOfType``1(System.Collections.Generic.List{``0})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.FindNodesOfType``1(System.Collections.Generic.List{``0})\">\r\n    <summary>\r\n    Recursively find all nodes of type T\r\n    </summary>\r\n    <typeparam name=\"T\">The type of hierachy node being serched for</typeparam>\r\n    <param name=\"nodes\">A list of nodes of type T</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Scc\")]\r\nprotected internal virtual void GetSccFiles(IList<string> files, IList<tagVsSccFilesFlags> flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    This method should be overridden to provide the list of files and associated flags for source control.\r\n    </summary>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetSccFiles(System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    This method should be overridden to provide the list of files and associated flags for source control.\r\n    </summary>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetDropInfo(out uint pdwOKEffects, out Microsoft.VisualStudio.OLE.Interop.IDataObject ppDataObject, out IDropSource ppDropSource)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Cmds\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"c\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"p\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"prg\")]\r\nprotected virtual int QueryStatusSelection(Guid cmdGroup, uint cCmds, OLECMD[] prgCmds, IntPtr pCmdText, CommandOrigin commandOrigin)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)\">\r\n    <summary>\r\n    Queries the object for the command status on a list of selected nodes.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group.</param>\r\n    <param name=\"cCmds\">The number of commands in the prgCmds array</param>\r\n    <param name=\"prgCmds\">A caller-allocated array of OLECMD structures that indicate the commands for which the caller requires status information. This method fills the cmdf member of each structure with values taken from the OLECMDF enumeration</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>\r\n    <param name=\"commandOrigin\">Specifies the origin of the command. Either it was called from the QueryStatusCommand on IVsUIHierarchy or from the IOleCommandTarget</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelection(System.Guid,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr,Microsoft.VisualStudio.Project.CommandOrigin)\">\r\n    <summary>\r\n    Queries the object for the command status on a list of selected nodes.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group.</param>\r\n    <param name=\"cCmds\">The number of commands in the prgCmds array</param>\r\n    <param name=\"prgCmds\">A caller-allocated array of OLECMD structures that indicate the commands for which the caller requires status information. This method fills the cmdf member of each structure with values taken from the OLECMDF enumeration</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>\r\n    <param name=\"commandOrigin\">Specifies the origin of the command. Either it was called from the QueryStatusCommand on IVsUIHierarchy or from the IOleCommandTarget</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual int SetEditLabel(string label, string relativePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String,System.String)\">\r\n    <summary>\r\n    To be overwritten by descendants.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.SetEditLabel(System.String,System.String)\">\r\n    <summary>\r\n    To be overwritten by descendants.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void OnInvalidateItems(HierarchyNode parent)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnInvalidateItems(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual int ShowContextMenu(int menuId, Guid menuGroup, POINTS points)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.POINTS)\">\r\n    <summary>\r\n    Shows the specified context menu at a specified location.\r\n    </summary>\r\n    <param name=\"menuId\">The context menu ID.</param>\r\n    <param name=\"groupGuid\">The GUID of the menu group.</param>\r\n    <param name=\"points\">The location at which to show the menu.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.POINTS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.ShowContextMenu(System.Int32,System.Guid,Microsoft.VisualStudio.Shell.Interop.POINTS)\">\r\n    <summary>\r\n    Shows the specified context menu at a specified location.\r\n    </summary>\r\n    <param name=\"menuId\">The context menu ID.</param>\r\n    <param name=\"groupGuid\">The GUID of the menu group.</param>\r\n    <param name=\"points\">The location at which to show the menu.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryDeleteItem(uint delItemOp, uint itemId, out int candelete)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryDeleteItem(System.UInt32,System.UInt32,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int DeleteItem(uint delItemOp, uint itemId)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DeleteItem(System.UInt32,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Exec(ref Guid guidCmdGroup, uint nCmdId, uint nCmdExecOpt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    CommandTarget.Exec is called for most major operations if they are NOT UI based. Otherwise IVSUInode::exec is called first\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    CommandTarget.Exec is called for most major operations if they are NOT UI based. Otherwise IVSUInode::exec is called first\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual string GetCanonicalName()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetCanonicalName\">\r\n    <summary>\r\n    Returns the Cannonical Name\r\n    </summary>\r\n    <returns>Cannonical Name</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetCanonicalName",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetCanonicalName\">\r\n    <summary>\r\n    Returns the Cannonical Name\r\n    </summary>\r\n    <returns>Cannonical Name</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual HierarchyNode GetDragTargetHandlerNode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetDragTargetHandlerNode\">\r\n    <summary>\r\n    Called by the drag and drop implementation to ask the node\r\n    which is being dragged/droped over which nodes should\r\n    process the operation.\r\n    This allows for dragging to a node that cannot contain\r\n    items to let its parent accept the drop\r\n    </summary>\r\n    <returns>HierarchyNode that accept the drop handling</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetDragTargetHandlerNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetDragTargetHandlerNode\">\r\n    <summary>\r\n    Called by the drag and drop implementation to ask the node\r\n    which is being dragged/droped over which nodes should\r\n    process the operation.\r\n    This allows for dragging to a node that cannot contain\r\n    items to let its parent accept the drop\r\n    </summary>\r\n    <returns>HierarchyNode that accept the drop handling</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetEditLabel\">\r\n    <summary>\r\n    Called by the shell to get the node caption when the user tries to rename from the GUI\r\n    </summary>\r\n    <returns>the node cation</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetEditLabel\">\r\n    <summary>\r\n    Called by the shell to get the node caption when the user tries to rename from the GUI\r\n    </summary>\r\n    <returns>the node cation</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void OnItemAdded(HierarchyNode parent, HierarchyNode child)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnItemAdded(Microsoft.VisualStudio.Project.HierarchyNode,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStatusCommand(uint itemId, ref Guid guidCmdGroup, uint cCmds, OLECMD[] cmds, IntPtr pCmdText)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusCommand(System.UInt32,System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\"), SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"InCurrent\")]\r\nprotected virtual bool DisableCmdInCurrentMode(Guid commandGroup, uint command)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCmdInCurrentMode(System.Guid,System.UInt32)\">\r\n    <summary>\r\n    Disables commands when the project is in run/break mode.\r\n    </summary>/\r\n    <param name=\"commandGroup\">Unique identifier of the command group</param>\r\n    <param name=\"command\">The command to be executed.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCmdInCurrentMode(System.Guid,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCmdInCurrentMode(System.Guid,System.UInt32)\">\r\n    <summary>\r\n    Disables commands when the project is in run/break mode.\r\n    </summary>/\r\n    <param name=\"commandGroup\">Unique identifier of the command group</param>\r\n    <param name=\"command\">The command to be executed.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Unused4()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused4",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual int CopyToClipboard()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CopyToClipboard\">\r\n    <summary>\r\n    Handle the Copy operation to the clipboard\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.CopyToClipboard",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.CopyToClipboard\">\r\n    <summary>\r\n    Handle the Copy operation to the clipboard\r\n    This method is typically overriden on the project node\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void OnItemsAppended(HierarchyNode parent)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnItemsAppended(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider site)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Reloadable\")]\r\npublic virtual int IsItemReloadable(uint itemId, out int isReloadable)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable(System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Called to determine whether a project item is reloadable before calling ReloadItem. \r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of an item in the hierarchy. Valid values are VSITEMID_NIL, VSITEMID_ROOT and VSITEMID_SELECTION.</param>\r\n    <param name=\"isReloadable\">A flag indicating that the project item is reloadable (1 for reloadable, 0 for non-reloadable).</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable(System.UInt32,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.IsItemReloadable(System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Called to determine whether a project item is reloadable before calling ReloadItem. \r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of an item in the hierarchy. Valid values are VSITEMID_NIL, VSITEMID_ROOT and VSITEMID_SELECTION.</param>\r\n    <param name=\"isReloadable\">A flag indicating that the project item is reloadable (1 for reloadable, 0 for non-reloadable).</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Close()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Close",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual QueryStatusResult QueryStatusCommandFromOleCommandTarget(Guid cmdGroup, uint cmd, out bool handled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusCommandFromOleCommandTarget(System.Guid,System.UInt32,System.Boolean@)\">\r\n    <summary>\r\n    Handles menus originating from IOleCommandTarget.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"handled\">Specifies whether the menu was handled.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusCommandFromOleCommandTarget(System.Guid,System.UInt32,System.Boolean@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusCommandFromOleCommandTarget(System.Guid,System.UInt32,System.Boolean@)\">\r\n    <summary>\r\n    Handles menus originating from IOleCommandTarget.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"handled\">Specifies whether the menu was handled.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetNestedHierarchy(uint itemId, ref Guid iidHierarchyNested, out IntPtr ppHierarchyNested, out uint pItemId)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"propid\")]\r\npublic void OnPropertyChanged(HierarchyNode node, int propid, uint flags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.OnPropertyChanged(Microsoft.VisualStudio.Project.HierarchyNode,System.Int32,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"p\")]\r\nprotected virtual QueryStatusResult QueryStatusSelectionOnNodes(IList<HierarchyNode> selectedNodes, Guid cmdGroup, uint cmd, IntPtr pCmdText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelectionOnNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Guid,System.UInt32,System.IntPtr)\">\r\n    <summary>\r\n    Queries the selected nodes for the command status. \r\n    A command is supported iff any nodes supports it.\r\n    A command is enabled iff all nodes enable it.\r\n    A command is invisible iff any node sets invisibility.\r\n    A command is latched only if all are latched.\r\n    </summary>\r\n    <param name=\"selectedNodes\">The list of selected nodes.</param>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group.</param>\r\n    <param name=\"cmd\">The command id to query for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>\r\n    <returns>Retuns the result of the query on the slected nodes.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelectionOnNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Guid,System.UInt32,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.QueryStatusSelectionOnNodes(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Guid,System.UInt32,System.IntPtr)\">\r\n    <summary>\r\n    Queries the selected nodes for the command status. \r\n    A command is supported iff any nodes supports it.\r\n    A command is enabled iff all nodes enable it.\r\n    A command is invisible iff any node sets invisibility.\r\n    A command is latched only if all are latched.\r\n    </summary>\r\n    <param name=\"selectedNodes\">The list of selected nodes.</param>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group.</param>\r\n    <param name=\"cmd\">The command id to query for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information. </param>\r\n    <returns>Retuns the result of the query on the slected nodes.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Multi\")]\r\nprotected virtual QueryStatusResult DisableCommandOnNodesThatDoNotSupportMultiSelection(Guid cmdGroup, uint cmd, IList<HierarchyNode> selectedNodes, out bool handled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCommandOnNodesThatDoNotSupportMultiSelection(System.Guid,System.UInt32,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)\">\r\n    <summary>\r\n    Specifies which command does not support multiple selection and should be disabled if multi-selected.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"selectedNodes\">The list of selected nodes.</param>\r\n    <param name=\"handled\">Specifies whether the menu was handled.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCommandOnNodesThatDoNotSupportMultiSelection(System.Guid,System.UInt32,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.DisableCommandOnNodesThatDoNotSupportMultiSelection(System.Guid,System.UInt32,System.Collections.Generic.IList{Microsoft.VisualStudio.Project.HierarchyNode},System.Boolean@)\">\r\n    <summary>\r\n    Specifies which command does not support multiple selection and should be disabled if multi-selected.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"selectedNodes\">The list of selected nodes.</param>\r\n    <param name=\"handled\">Specifies whether the menu was handled.</param>\r\n    <returns>A QueryStatusResult describing the status of the menu.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Unused0()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.Unused0",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\"), System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\")]\r\npublic virtual object GetProperty(int propId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Returns a property object based on a property id \r\n    </summary>\r\n    <param name=\"propId\">the property id of the property requested</param>\r\n    <returns>the property object requested</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.GetProperty(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Returns a property object based on a property id \r\n    </summary>\r\n    <param name=\"propId\">the property id of the property requested</param>\r\n    <returns>the property object requested</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode FindChildByProjectElement(ProjectElement node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.FindChildByProjectElement(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Finds a non virtual hierarchy item by its project element.\r\n    </summary>\r\n    <param name=\"node\">The Project element to find</param>\r\n    <returns>The node found</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.FindChildByProjectElement(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.FindChildByProjectElement(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Finds a non virtual hierarchy item by its project element.\r\n    </summary>\r\n    <param name=\"node\">The Project element to find</param>\r\n    <returns>The node found</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "hasDesigner",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.hasDesigner",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "virtualNodeName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.virtualNodeName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "NoImage",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.NoImage",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "parentHierarchyItemId",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.parentHierarchyItemId",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "LastTracedProperty",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.LastTracedProperty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "itemsDraggedOrCutOrCopied",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.itemsDraggedOrCutOrCopied",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "nextSibling",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.nextSibling",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SolutionExplorer",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.SolutionExplorer",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "lastChild",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.lastChild",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "firstChild",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.firstChild",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "excludeNodeFromScc",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.excludeNodeFromScc",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isExpanded",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.isExpanded",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "nodeProperties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.nodeProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "onChildAdded",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.onChildAdded",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectMgr",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.projectMgr",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "sourceDraggedOrCutOrCopied",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.sourceDraggedOrCutOrCopied",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "docCookie",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.docCookie",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "parentHierarchy",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.parentHierarchy",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "hasParentNodeNameRelation",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.hasParentNodeNameRelation",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "itemNode",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.itemNode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.HierarchyNode.isDisposed\">\r\n    <summary>\r\n    Has the object been disposed.\r\n    </summary>\r\n    <devremark>We will not specify a property for isDisposed, rather it is expected that the a private flag is defined\r\n    on all subclasses. We do not want get in a situation where the base class's dipose is not called because a child sets the flag through the property.</devremark>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.isDisposed",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.HierarchyNode.isDisposed\">\r\n    <summary>\r\n    Has the object been disposed.\r\n    </summary>\r\n    <devremark>We will not specify a property for isDisposed, rather it is expected that the a private flag is defined\r\n    on all subclasses. We do not want get in a situation where the base class's dipose is not called because a child sets the flag through the property.</devremark>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "hierarchyEventSinks",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.hierarchyEventSinks",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "onChildRemoved",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.onChildRemoved",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "hierarchyId",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.hierarchyId",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "parentNode",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.parentNode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "oleServiceProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNode.oleServiceProvider",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual VsStateIcon StateIconIndex",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.StateIconIndex\">\r\n    <summary>\r\n    Return an state icon index\r\n    </summary>\r\n    <returns></returns>\r\n    <summary>\r\n    Sets the state icon for a file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.StateIconIndex",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.StateIconIndex\">\r\n    <summary>\r\n    Return an state icon index\r\n    </summary>\r\n    <returns></returns>\r\n    <summary>\r\n    Sets the state icon for a file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode NextSibling",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.NextSibling",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public uint DocCookie",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.DocCookie",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public OleServiceProvider OleServiceProvider",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.OleServiceProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool ExcludeNodeFromScc",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeNodeFromScc\">\r\n    <summary>\r\n    Specifies if a Node is under source control.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeNodeFromScc",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.ExcludeNodeFromScc\">\r\n    <summary>\r\n    Specifies if a Node is under source control.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal virtual object Object",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.Object\">\r\n    <summary>\r\n    Returns an object that is a special view over this object; this is the value\r\n    returned by the Object property of the automation objects.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.Object",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.Object\">\r\n    <summary>\r\n    Returns an object that is a special view over this object; this is the value\r\n    returned by the Object property of the automation objects.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool HasDesigner",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.HasDesigner",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public ProjectNode ProjectMgr",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.ProjectMgr",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string NameRelationSeparator",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.NameRelationSeparator\">\r\n    <summary>\r\n    Defines a string that is used to separate the name relation from the extension\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.NameRelationSeparator",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.NameRelationSeparator\">\r\n    <summary>\r\n    Defines a string that is used to separate the name relation from the extension\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual NodeProperties NodeProperties",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.NodeProperties\">\r\n    <summary>\r\n    Defines the properties attached to this node.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.NodeProperties",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.NodeProperties\">\r\n    <summary>\r\n    Defines the properties attached to this node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int ImageIndex",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.ImageIndex\">\r\n    <summary>\r\n    Return an imageindex\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.ImageIndex",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.ImageIndex\">\r\n    <summary>\r\n    Return an imageindex\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int MenuCommandId",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.MenuCommandId",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode Parent",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.Parent",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode PreviousSibling",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.PreviousSibling",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public ProjectElement ItemNode",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.ItemNode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode LastChild",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.LastChild",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public abstract Guid ItemTypeGuid",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.ItemTypeGuid\">\r\n    <summary>\r\n    The item type guid associated to a node.\r\n    </summary>\r\n    <value></value>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.ItemTypeGuid",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.ItemTypeGuid\">\r\n    <summary>\r\n    The item type guid associated to a node.\r\n    </summary>\r\n    <value></value>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public abstract string Url",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.Url\">\r\n    <summary>\r\n    The URL of the node.\r\n    </summary>\r\n    <value></value>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.Url",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.Url\">\r\n    <summary>\r\n    The URL of the node.\r\n    </summary>\r\n    <value></value>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected bool SourceDraggedOrCutOrCopied",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.SourceDraggedOrCutOrCopied",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool HasParentNodeNameRelation",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.HasParentNodeNameRelation\">\r\n    <summary>\r\n    Defines if a node a name relation to its parent node\r\n    \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.HasParentNodeNameRelation",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.HasParentNodeNameRelation\">\r\n    <summary>\r\n    Defines if a node a name relation to its parent node\r\n    \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string VirtualNodeName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.VirtualNodeName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool IsExpanded",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.IsExpanded",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public abstract string Caption",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.Caption\">\r\n    <summary>\r\n    The Caption of the node.\r\n    </summary>\r\n    <value></value>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.Caption",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.Caption\">\r\n    <summary>\r\n    The Caption of the node.\r\n    </summary>\r\n    <value></value>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool CanExecuteCommand",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.CanExecuteCommand\">\r\n    <summary>\r\n    Defines whether a node can execute a command if in selection.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.CanExecuteCommand",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.CanExecuteCommand\">\r\n    <summary>\r\n    Defines whether a node can execute a command if in selection.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SortPriority",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.SortPriority\">\r\n    <summary>\r\n    Used to determine the sort order of different node types\r\n    in the solution explorer window.\r\n    Nodes with the same priorities are sorted based on their captions.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.SortPriority",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.HierarchyNode.SortPriority\">\r\n    <summary>\r\n    Used to determine the sort order of different node types\r\n    in the solution explorer window.\r\n    Nodes with the same priorities are sorted based on their captions.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public uint ID",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.ID",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode FirstChild",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.FirstChild",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected IList<HierarchyNode> ItemsDraggedOrCutOrCopied",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNode.ItemsDraggedOrCutOrCopied",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected HierarchyNode(ProjectNode root)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    Overloaded ctor. \r\n    </summary>\r\n    <param name=\"root\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.HierarchyNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    Overloaded ctor. \r\n    </summary>\r\n    <param name=\"root\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected HierarchyNode(ProjectNode root, ProjectElement element)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected HierarchyNode()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNode.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class HierarchyNode\r\n//, IVsBuildStatusCallback \r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.HierarchyNode\">\r\n    <summary>\r\n    An object that deals with user interaction via a GUI in the form a hierarchy: a parent node with zero or more child nodes, each of which\r\n    can itself be a hierarchy.  \r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.HierarchyNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.HierarchyNode\">\r\n    <summary>\r\n    An object that deals with user interaction via a GUI in the form a hierarchy: a parent node with zero or more child nodes, each of which\r\n    can itself be a hierarchy.  \r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override bool ShouldSerializeValue(object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ShouldSerializeValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetEditor(Type editorBaseType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetEditor(System.Type)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetEditor(System.Type)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetEditor(System.Type)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override bool CanResetValue(object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.CanResetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.CanResetValue(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.CanResetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void SetValue(object component, object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.SetValue(System.Object,System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.SetValue(System.Object,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.SetValue(System.Object,System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetValue(object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetValue(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual Type GetTypeFromNameProperty(string typeName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)\">\r\n    <summary>\r\n    Convert name to a Type object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.GetTypeFromNameProperty(System.String)\">\r\n    <summary>\r\n    Convert name to a Type object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override void ResetValue(object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ResetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ResetValue(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ResetValue(System.Object)\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "property",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.property",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "converter",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.converter",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "displayName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.displayName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "editors",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.editors",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override TypeConverter Converter",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.Converter\">\r\n    <summary>\r\n    Return type converter for property\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.Converter",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.Converter\">\r\n    <summary>\r\n    Return type converter for property\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string DisplayName",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.DisplayName\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.DisplayName",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.DisplayName\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override Type PropertyType",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.PropertyType\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.PropertyType",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.PropertyType\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override Type ComponentType",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ComponentType\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ComponentType",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.ComponentType\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override bool IsReadOnly",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.IsReadOnly\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.IsReadOnly",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.IsReadOnly\">\r\n    <summary>\r\n    Delegates to base.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public DesignPropertyDescriptor(PropertyDescriptor prop): base (prop)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)\">\r\n    <summary>\r\n    Constructor.  Copy the base property descriptor and also hold a pointer\r\n    to it for calling its overridden abstract methods.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.DesignPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)\">\r\n    <summary>\r\n    Constructor.  Copy the base property descriptor and also hold a pointer\r\n    to it for calling its overridden abstract methods.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class DesignPropertyDescriptor",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DesignPropertyDescriptor\">\r\n    <summary>\r\n    The purpose of DesignPropertyDescriptor is to allow us to customize the\r\n    display name of the property in the property grid.  None of the CLR\r\n    implementations of PropertyDescriptor allow you to change the DisplayName.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DesignPropertyDescriptor",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DesignPropertyDescriptor\">\r\n    <summary>\r\n    The purpose of DesignPropertyDescriptor is to allow us to customize the\r\n    display name of the property in the property grid.  None of the CLR\r\n    implementations of PropertyDescriptor allow you to change the DisplayName.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "child",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.HierarchyNodeEventArgs.child",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public HierarchyNode Child",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.HierarchyNodeEventArgs.Child",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal HierarchyNodeEventArgs(HierarchyNode child)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.HierarchyNodeEventArgs.#ctor(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class HierarchyNodeEventArgs",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.HierarchyNodeEventArgs\">\r\n    <summary>\r\n    This class is used for the events raised by a HierarchyNode object.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.HierarchyNodeEventArgs",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.HierarchyNodeEventArgs\">\r\n    <summary>\r\n    This class is used for the events raised by a HierarchyNode object.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override int OnAfterLoadProject(IVsHierarchy stubHierarchy, IVsHierarchy realHierarchy)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Needs to update the dangling reference on projects that contain this hierarchy as project reference.\r\n    </summary>\r\n    <param name=\"stubHierarchy\"></param>\r\n    <param name=\"realHierarchy\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnAfterLoadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Needs to update the dangling reference on projects that contain this hierarchy as project reference.\r\n    </summary>\r\n    <param name=\"stubHierarchy\"></param>\r\n    <param name=\"realHierarchy\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private List<ProjectReferenceNode> GetProjectReferencesContainingThisProject(IVsHierarchy inputHierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.GetProjectReferencesContainingThisProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private static ProjectReferenceNode GetProjectReferenceOnNodeForHierarchy(IList<ReferenceNode> references, IVsHierarchy inputHierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.GetProjectReferenceOnNodeForHierarchy(System.Collections.Generic.IList{Microsoft.VisualStudio.Project.ReferenceNode},Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int OnBeforeCloseProject(IVsHierarchy hierarchy, int removed)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)\">\r\n    <summary>\r\n    Delete this project from the references of projects of this type, if it is found.\r\n    </summary>\r\n    <param name=\"hierarchy\"></param>\r\n    <param name=\"removed\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnBeforeCloseProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)\">\r\n    <summary>\r\n    Delete this project from the references of projects of this type, if it is found.\r\n    </summary>\r\n    <param name=\"hierarchy\"></param>\r\n    <param name=\"removed\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnBeforeUnloadProject(IVsHierarchy realHierarchy, IVsHierarchy stubHierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnBeforeUnloadProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int OnAfterRenameProject(IVsHierarchy hierarchy)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.OnAfterRenameProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public SolutionListenerForProjectReferenceUpdate(IServiceProvider serviceProvider): base (serviceProvider)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate.#ctor(System.IServiceProvider)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class SolutionListenerForProjectReferenceUpdate\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SolutionListenerForProjectReferenceUpdate",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[ConditionalAttribute(\"Enable_CCIDiagnostics\")]\r\nstatic void InternalTraceCall(int levels)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.CCITracing.InternalTraceCall(System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[ConditionalAttribute(\"CCI_TRACING\")]\r\nstatic public void TraceData(string strOutput)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.CCITracing.TraceData(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[ConditionalAttribute(\"CCI_TRACING\")]\r\nstatic public void TraceCall(string strParameters)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.CCITracing.TraceCall(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[ConditionalAttribute(\"CCI_TRACING\")]\r\nstatic public void Trace(string strOutput)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.CCITracing.Trace(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[ConditionalAttribute(\"CCI_TRACING\")]\r\nstatic public void Trace(System.Exception e)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.CCITracing.Trace(System.Exception)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[ConditionalAttribute(\"CCI_TRACING\")]\r\nstatic public void TraceCall()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.CCITracing.TraceCall",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[ConditionalAttribute(\"Enable_CCIFileOutput\")]\r\n[ConditionalAttribute(\"CCI_TRACING\")]\r\nstatic public void AddTraceLog(string strFileName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.CCITracing.AddTraceLog(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "private CCITracing()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.CCITracing.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal class CCITracing",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.CCITracing",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"The services created here will be disposed in the Dispose method of this type.\")]\r\npublic void AddService(Type serviceType, ServiceCreatorCallback callback, bool shouldDisposeServiceInstance)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(System.Type,Microsoft.VisualStudio.Project.OleServiceProvider.ServiceCreatorCallback,System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int QueryService(ref Guid guidService, ref Guid riid, out IntPtr ppvObject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void RemoveService(Type serviceType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.RemoveService(System.Type)\">\r\n    <devdoc>\r\n    Removes the given service type from the service container.\r\n    </devdoc>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.RemoveService(System.Type)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.RemoveService(System.Type)\">\r\n    <devdoc>\r\n    Removes the given service type from the service container.\r\n    </devdoc>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void AddService(ServiceData data)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(Microsoft.VisualStudio.Project.OleServiceProvider.ServiceData)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\", Justification = \"The services created here will be disposed in the Dispose method of this type.\")]\r\npublic void AddService(Type serviceType, object serviceInstance, bool shouldDisposeServiceInstance)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)\">\r\n    <summary>\r\n    Adds the given service to the service container.\r\n    </summary>\r\n    <param name=\"serviceType\">The type of the service to add.</param>\r\n    <param name=\"serviceInstance\">An instance of the service.</param>\r\n    <param name=\"shouldDisposeServiceInstance\">true if the Dipose of the service provider is allowed to dispose the sevice instance.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.AddService(System.Type,System.Object,System.Boolean)\">\r\n    <summary>\r\n    Adds the given service to the service container.\r\n    </summary>\r\n    <param name=\"serviceType\">The type of the service to add.</param>\r\n    <param name=\"serviceInstance\">An instance of the service.</param>\r\n    <param name=\"shouldDisposeServiceInstance\">true if the Dipose of the service provider is allowed to dispose the sevice instance.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OleServiceProvider.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.OleServiceProvider.isDisposed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "services",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.OleServiceProvider.services",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.OleServiceProvider.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.OleServiceProvider.Mutex",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.OleServiceProvider.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OleServiceProvider()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OleServiceProvider.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class OleServiceProvider\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.OleServiceProvider",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual ProjectConfig CreateProjectConfiguration(string configName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.CreateProjectConfiguration(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetAutomationObject(string configurationName, out object configurationProperties)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetAutomationObject(System.String,System.Object@)\">\r\n    <summary>\r\n    Proved access to an IDispatchable object being a list of configuration properties\r\n    </summary>\r\n    <param name=\"configurationName\">Combined Name and Platform for the configuration requested</param>\r\n    <param name=\"configurationProperties\">The IDispatchcable object</param>\r\n    <returns>S_OK if successful</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetAutomationObject(System.String,System.Object@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetAutomationObject(System.String,System.Object@)\">\r\n    <summary>\r\n    Proved access to an IDispatchable object being a list of configuration properties\r\n    </summary>\r\n    <param name=\"configurationName\">Combined Name and Platform for the configuration requested</param>\r\n    <param name=\"configurationProperties\">The IDispatchcable object</param>\r\n    <returns>S_OK if successful</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static string ConvertPlatformToVsProject(string oldPlatformName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.ConvertPlatformToVsProject(System.String)\">\r\n    <summary>\r\n    Helper function to convert AnyCPU to Any CPU.\r\n    </summary>\r\n    <param name=\"oldName\">The oldname.</param>\r\n    <returns>The new name.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.ConvertPlatformToVsProject(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.ConvertPlatformToVsProject(System.String)\">\r\n    <summary>\r\n    Helper function to convert AnyCPU to Any CPU.\r\n    </summary>\r\n    <param name=\"oldName\">The oldname.</param>\r\n    <returns>The new name.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AddCfgsOfPlatformName(string platformName, string clonePlatformName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfPlatformName(System.String,System.String)\">\r\n    <summary>\r\n    Copies an existing platform name or creates a new one. \r\n    </summary>\r\n    <param name=\"platformName\">The name of the new platform.</param>\r\n    <param name=\"clonePlatformName\">The name of the platform to copy, or a null reference, indicating that AddCfgsOfPlatformName should create a new platform.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfPlatformName(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfPlatformName(System.String,System.String)\">\r\n    <summary>\r\n    Copies an existing platform name or creates a new one. \r\n    </summary>\r\n    <param name=\"platformName\">The name of the new platform.</param>\r\n    <param name=\"clonePlatformName\">The name of the platform to copy, or a null reference, indicating that AddCfgsOfPlatformName should create a new platform.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\r\nprivate void NotifyOnPlatformNameAdded(string platformName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnPlatformNameAdded(System.String)\">\r\n    <summary>\r\n    Called when a platform name was added\r\n    </summary>\r\n    <param name=\"platformName\">The name of the platform.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnPlatformNameAdded(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnPlatformNameAdded(System.String)\">\r\n    <summary>\r\n    Called when a platform name was added\r\n    </summary>\r\n    <param name=\"platformName\">The name of the platform.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private string[] GetPlatformsFromProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformsFromProject\">\r\n    <summary>\r\n    Gets all the platforms defined in the project\r\n    </summary>\r\n    <returns>An array of platform names.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformsFromProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformsFromProject\">\r\n    <summary>\r\n    Gets all the platforms defined in the project\r\n    </summary>\r\n    <returns>An array of platform names.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AddCfgsOfCfgName(string name, string cloneName, int fPrivate)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfCfgName(System.String,System.String,System.Int32)\">\r\n    <summary>\r\n    Copies an existing configuration name or creates a new one. \r\n    </summary>\r\n    <param name=\"name\">The name of the new configuration.</param>\r\n    <param name=\"cloneName\">the name of the configuration to copy, or a null reference, indicating that AddCfgsOfCfgName should create a new configuration.</param>\r\n    <param name=\"fPrivate\">Flag indicating whether or not the new configuration is private. If fPrivate is set to true, the configuration is private. If set to false, the configuration is public. This flag can be ignored.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfCfgName(System.String,System.String,System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AddCfgsOfCfgName(System.String,System.String,System.Int32)\">\r\n    <summary>\r\n    Copies an existing configuration name or creates a new one. \r\n    </summary>\r\n    <param name=\"name\">The name of the new configuration.</param>\r\n    <param name=\"cloneName\">the name of the configuration to copy, or a null reference, indicating that AddCfgsOfCfgName should create a new configuration.</param>\r\n    <param name=\"fPrivate\">Flag indicating whether or not the new configuration is private. If fPrivate is set to true, the configuration is private. If set to false, the configuration is public. This flag can be ignored.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static int GetPlatforms(uint celt, string[] names, uint[] actual, string[] platforms)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatforms(System.UInt32,System.String[],System.UInt32[],System.String[])\">\r\n    <summary>\r\n    Common method for handling platform names.\r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be null if the celt parameter is zero. On output, names contains platform names</param>\r\n    <param name=\"actual\">A count of the actual number of platform names returned.</param>\r\n    <param name=\"platforms\">An array of available platform names</param>\r\n    <returns>A count of the actual number of platform names returned.</returns>\r\n    <devremark>The platforms array is never null. It is assured by the callers.</devremark>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatforms(System.UInt32,System.String[],System.UInt32[],System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatforms(System.UInt32,System.String[],System.UInt32[],System.String[])\">\r\n    <summary>\r\n    Common method for handling platform names.\r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be null if the celt parameter is zero. On output, names contains platform names</param>\r\n    <param name=\"actual\">A count of the actual number of platform names returned.</param>\r\n    <param name=\"platforms\">An array of available platform names</param>\r\n    <returns>A count of the actual number of platform names returned.</returns>\r\n    <devremark>The platforms array is never null. It is assured by the callers.</devremark>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int RenameCfgsOfCfgName(string old, string newname)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.RenameCfgsOfCfgName(System.String,System.String)\">\r\n    <summary>\r\n    Assigns a new name to a configuration. \r\n    </summary>\r\n    <param name=\"old\">The old name of the target configuration.</param>\r\n    <param name=\"newname\">The new name of the target configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.RenameCfgsOfCfgName(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.RenameCfgsOfCfgName(System.String,System.String)\">\r\n    <summary>\r\n    Assigns a new name to a configuration. \r\n    </summary>\r\n    <param name=\"old\">The old name of the target configuration.</param>\r\n    <param name=\"newname\">The new name of the target configuration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgProviderProperty(int propid, out object var)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgProviderProperty(System.Int32,System.Object@)\">\r\n    <summary>\r\n    Returns a specified configuration property. \r\n    </summary>\r\n    <param name=\"propid\">Specifies the property identifier for the property to return. For valid propid values, see __VSCFGPROPID.</param>\r\n    <param name=\"var\">The value of the property.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgProviderProperty(System.Int32,System.Object@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgProviderProperty(System.Int32,System.Object@)\">\r\n    <summary>\r\n    Returns a specified configuration property. \r\n    </summary>\r\n    <param name=\"propid\">Specifies the property identifier for the property to return. For valid propid values, see __VSCFGPROPID.</param>\r\n    <param name=\"var\">The value of the property.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private string[] GetSupportedPlatformsFromProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformsFromProject\">\r\n    <summary>\r\n    Return the supported platform names.\r\n    </summary>\r\n    <returns>An array of supported platform names.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformsFromProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformsFromProject\">\r\n    <summary>\r\n    Return the supported platform names.\r\n    </summary>\r\n    <returns>An array of supported platform names.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void NotifyOnCfgNameAdded(string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameAdded(System.String)\">\r\n    <summary>\r\n    Called when a new configuration name was added.\r\n    </summary>\r\n    <param name=\"name\">The name of configuration just added.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameAdded(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameAdded(System.String)\">\r\n    <summary>\r\n    Called when a new configuration name was added.\r\n    </summary>\r\n    <param name=\"name\">The name of configuration just added.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void NotifyOnCfgNameDeleted(string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameDeleted(System.String)\">\r\n    <summary>\r\n    Called when a config name was deleted.\r\n    </summary>\r\n    <param name=\"name\">The name of the configuration.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameDeleted(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameDeleted(System.String)\">\r\n    <summary>\r\n    Called when a config name was deleted.\r\n    </summary>\r\n    <param name=\"name\">The name of the configuration.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgOfName(string name, string platName, out IVsCfg cfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)\">\r\n    <summary>\r\n    Returns the configuration associated with a specified configuration or platform name. \r\n    </summary>\r\n    <param name=\"name\">The name of the configuration to be returned.</param>\r\n    <param name=\"platName\">The name of the platform for the configuration to be returned.</param>\r\n    <param name=\"cfg\">The implementation of the IVsCfg interface.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgOfName(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsCfg@)\">\r\n    <summary>\r\n    Returns the configuration associated with a specified configuration or platform name. \r\n    </summary>\r\n    <param name=\"name\">The name of the configuration to be returned.</param>\r\n    <param name=\"platName\">The name of the platform for the configuration to be returned.</param>\r\n    <param name=\"cfg\">The implementation of the IVsCfg interface.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenProjectCfg(string projectCfgCanonicalName, out IVsProjectCfg projectCfg)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)\">\r\n    <summary>\r\n    Provides access to the IVsProjectCfg interface implemented on a project's configuration object. \r\n    </summary>\r\n    <param name=\"projectCfgCanonicalName\">The canonical name of the configuration to access.</param>\r\n    <param name=\"projectCfg\">The IVsProjectCfg interface of the configuration identified by szProjectCfgCanonicalName.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.OpenProjectCfg(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)\">\r\n    <summary>\r\n    Provides access to the IVsProjectCfg interface implemented on a project's configuration object. \r\n    </summary>\r\n    <param name=\"projectCfgCanonicalName\">The canonical name of the configuration to access.</param>\r\n    <param name=\"projectCfg\">The IVsProjectCfg interface of the configuration identified by szProjectCfgCanonicalName.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DeleteCfgsOfPlatformName(string platName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfPlatformName(System.String)\">\r\n    <summary>\r\n    Deletes a specified platform name. \r\n    </summary>\r\n    <param name=\"platName\">The platform name to delet.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfPlatformName(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfPlatformName(System.String)\">\r\n    <summary>\r\n    Deletes a specified platform name. \r\n    </summary>\r\n    <param name=\"platName\">The platform name to delet.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgs(uint celt, IVsCfg[] a, uint[] actual, uint[] flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the per-configuration objects for this object. \r\n    </summary>\r\n    <param name=\"celt\">Number of configuration objects to be returned or zero, indicating a request for an unknown number of objects.</param>\r\n    <param name=\"a\">On input, pointer to an interface array or a null reference. On output, this parameter points to an array of IVsCfg interfaces belonging to the requested configuration objects.</param>\r\n    <param name=\"actual\">The number of configuration objects actually returned or a null reference, if this information is not necessary.</param>\r\n    <param name=\"flags\">Flags that specify settings for project configurations, or a null reference (Nothing in Visual Basic) if no additional flag settings are required. For valid prgrFlags values, see __VSCFGFLAGS.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsCfg[],System.UInt32[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the per-configuration objects for this object. \r\n    </summary>\r\n    <param name=\"celt\">Number of configuration objects to be returned or zero, indicating a request for an unknown number of objects.</param>\r\n    <param name=\"a\">On input, pointer to an interface array or a null reference. On output, this parameter points to an array of IVsCfg interfaces belonging to the requested configuration objects.</param>\r\n    <param name=\"actual\">The number of configuration objects actually returned or a null reference, if this information is not necessary.</param>\r\n    <param name=\"flags\">Flags that specify settings for project configurations, or a null reference (Nothing in Visual Basic) if no additional flag settings are required. For valid prgrFlags values, see __VSCFGFLAGS.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int get_UsesIndependentConfigurations(out int usesIndependentConfigurations)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.get_UsesIndependentConfigurations(System.Int32@)\">\r\n    <summary>\r\n    Checks whether or not this configuration provider uses independent configurations. \r\n    </summary>\r\n    <param name=\"usesIndependentConfigurations\">true if independent configurations are used, false if they are not used. By default returns true.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.get_UsesIndependentConfigurations(System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.get_UsesIndependentConfigurations(System.Int32@)\">\r\n    <summary>\r\n    Checks whether or not this configuration provider uses independent configurations. \r\n    </summary>\r\n    <param name=\"usesIndependentConfigurations\">true if independent configurations are used, false if they are not used. By default returns true.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgNames(uint celt, string[] names, uint[] actual)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the existing configurations stored in the project file.\r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of property names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of configuration property names specified by celt. This parameter can also be a null reference if the celt parameter is zero. \r\n    On output, names contains configuration property names.</param>\r\n    <param name=\"actual\">The actual number of property names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgNames(System.UInt32,System.String[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetCfgNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the existing configurations stored in the project file.\r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of property names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of configuration property names specified by celt. This parameter can also be a null reference if the celt parameter is zero. \r\n    On output, names contains configuration property names.</param>\r\n    <param name=\"actual\">The actual number of property names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetSupportedPlatformNames(uint celt, string[] names, uint[] actual)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the set of platforms that are installed on the user's machine. \r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of supported platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of names specified by celt. This parameter can also be a null reference (Nothing in Visual Basic)if the celt parameter is zero. On output, names contains the names of supported platforms</param>\r\n    <param name=\"actual\">The actual number of platform names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetSupportedPlatformNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns the set of platforms that are installed on the user's machine. \r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of supported platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of names specified by celt. This parameter can also be a null reference (Nothing in Visual Basic)if the celt parameter is zero. On output, names contains the names of supported platforms</param>\r\n    <param name=\"actual\">The actual number of platform names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private string[] GetPropertiesConditionedOn(string constant)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPropertiesConditionedOn(System.String)\">\r\n    <summary>\r\n    Get all the configurations in the project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetPropertiesConditionedOn(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPropertiesConditionedOn(System.String)\">\r\n    <summary>\r\n    Get all the configurations in the project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected ProjectConfig GetProjectConfiguration(string configName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetProjectConfiguration(System.String)\">\r\n    <summary>\r\n    Creates new Project Configuartion objects based on the configuration name.\r\n    </summary>\r\n    <param name=\"configName\">The name of the configuration</param>\r\n    <returns>An instance of a ProjectConfig object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetProjectConfiguration(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetProjectConfiguration(System.String)\">\r\n    <summary>\r\n    Creates new Project Configuartion objects based on the configuration name.\r\n    </summary>\r\n    <param name=\"configName\">The name of the configuration</param>\r\n    <returns>An instance of a ProjectConfig object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void NotifyOnCfgNameRenamed(string oldName, string newName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameRenamed(System.String,System.String)\">\r\n    <summary>\r\n    Called when a config name was renamed\r\n    </summary>\r\n    <param name=\"oldName\">Old configuration name</param>\r\n    <param name=\"newName\">New configuration name</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameRenamed(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnCfgNameRenamed(System.String,System.String)\">\r\n    <summary>\r\n    Called when a config name was renamed\r\n    </summary>\r\n    <param name=\"oldName\">Old configuration name</param>\r\n    <param name=\"newName\">New configuration name</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\r\nprivate void NotifyOnPlatformNameDeleted(string platformName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnPlatformNameDeleted(System.String)\">\r\n    <summary>\r\n    Called when a platform name was deleted\r\n    </summary>\r\n    <param name=\"platformName\">The name of the platform.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnPlatformNameDeleted(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.NotifyOnPlatformNameDeleted(System.String)\">\r\n    <summary>\r\n    Called when a platform name was deleted\r\n    </summary>\r\n    <param name=\"platformName\">The name of the platform.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int DeleteCfgsOfCfgName(string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfCfgName(System.String)\">\r\n    <summary>\r\n    Deletes a specified configuration name. \r\n    </summary>\r\n    <param name=\"name\">The name of the configuration to be deleted.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfCfgName(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.DeleteCfgsOfCfgName(System.String)\">\r\n    <summary>\r\n    Deletes a specified configuration name. \r\n    </summary>\r\n    <param name=\"name\">The name of the configuration to be deleted.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetPlatformNames(uint celt, string[] names, uint[] actual)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns one or more platform names. \r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be a null reference if the celt parameter is zero. On output, names contains platform names.</param>\r\n    <param name=\"actual\">The actual number of platform names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.GetPlatformNames(System.UInt32,System.String[],System.UInt32[])\">\r\n    <summary>\r\n    Returns one or more platform names. \r\n    </summary>\r\n    <param name=\"celt\">Specifies the requested number of platform names. If this number is unknown, celt can be zero.</param>\r\n    <param name=\"names\">On input, an allocated array to hold the number of platform names specified by celt. This parameter can also be a null reference if the celt parameter is zero. On output, names contains platform names.</param>\r\n    <param name=\"actual\">The actual number of platform names returned.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UnadviseCfgProviderEvents(uint cookie)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.UnadviseCfgProviderEvents(System.UInt32)\">\r\n    <summary>\r\n    Cancels a registration for configuration event notification. \r\n    </summary>\r\n    <param name=\"cookie\">The cookie used for registration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.UnadviseCfgProviderEvents(System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.UnadviseCfgProviderEvents(System.UInt32)\">\r\n    <summary>\r\n    Cancels a registration for configuration event notification. \r\n    </summary>\r\n    <param name=\"cookie\">The cookie used for registration.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AdviseCfgProviderEvents(IVsCfgProviderEvents sink, out uint cookie)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)\">\r\n    <summary>\r\n    Registers the caller for configuration event notification. \r\n    </summary>\r\n    <param name=\"sink\">Reference to the IVsCfgProviderEvents interface to be called to provide notification of configuration events.</param>\r\n    <param name=\"cookie\">Reference to a token representing the completed registration</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ConfigProvider.AdviseCfgProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsCfgProviderEvents,System.UInt32@)\">\r\n    <summary>\r\n    Registers the caller for configuration event notification. \r\n    </summary>\r\n    <param name=\"sink\">Reference to the IVsCfgProviderEvents interface to be called to provide notification of configuration events.</param>\r\n    <param name=\"cookie\">Reference to a token representing the completed registration</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "configString",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConfigProvider.configString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "newCfgProps",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConfigProvider.newCfgProps",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "x86Platform",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConfigProvider.x86Platform",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "cfgEventSinks",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConfigProvider.cfgEventSinks",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConfigProvider.project",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "configurationsList",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConfigProvider.configurationsList",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "AnyCPUPlatform",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ConfigProvider.AnyCPUPlatform",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected ProjectNode ProjectMgr",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ConfigProvider.ProjectMgr\">\r\n    <summary>\r\n    The associated project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ConfigProvider.ProjectMgr",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ConfigProvider.ProjectMgr\">\r\n    <summary>\r\n    The associated project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual List<KeyValuePair<KeyValuePair<string, string>, string>> NewConfigProperties",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"P:Microsoft.VisualStudio.Project.ConfigProvider.NewConfigProperties\" -->\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ConfigProvider.NewConfigProperties",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"P:Microsoft.VisualStudio.Project.ConfigProvider.NewConfigProperties\" -->\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ConfigProvider(ProjectNode manager)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ConfigProvider.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ConfigProvider",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ConfigProvider",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int OnQueryRemoveDirectories(IVsProject pProject, int cDirectories, string[] rgpszMkDocuments, VSQUERYREMOVEDIRECTORYFLAGS[] rgFlags, VSQUERYREMOVEDIRECTORYRESULTS[] pSummaryResult, VSQUERYREMOVEDIRECTORYRESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryRemoveDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEDIRECTORYRESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterAddDirectoriesEx(int cProjects, int cDirectories, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, VSADDDIRECTORYFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterAddDirectoriesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDDIRECTORYFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRemoveFiles(int cProjects, int cFiles, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, VSREMOVEFILEFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterRemoveFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEFILEFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterSccStatusChanged(int cProjects, int cFiles, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, uint[] rgdwSccStatus)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterSccStatusChanged(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.UInt32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryRenameFiles(IVsProject pProject, int cFiles, string[] rgszMkOldNames, string[] rgszMkNewNames, VSQUERYRENAMEFILEFLAGS[] rgFlags, VSQUERYRENAMEFILERESULTS[] pSummaryResult, VSQUERYRENAMEFILERESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryRenameFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEFILERESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Init()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Init",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRemoveDirectories(int cProjects, int cDirectories, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, VSREMOVEDIRECTORYFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterRemoveDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSREMOVEDIRECTORYFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryRenameDirectories(IVsProject pProject, int cDirs, string[] rgszMkOldNames, string[] rgszMkNewNames, VSQUERYRENAMEDIRECTORYFLAGS[] rgFlags, VSQUERYRENAMEDIRECTORYRESULTS[] pSummaryResult, VSQUERYRENAMEDIRECTORYRESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryRenameDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYRENAMEDIRECTORYRESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterAddFilesEx(int cProjects, int cFiles, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgpszMkDocuments, VSADDFILEFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterAddFilesEx(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSADDFILEFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Usage\", \"CA1806:DoNotIgnoreMethodResults\", MessageId = \"Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.UnadviseTrackProjectDocumentsEvents(System.UInt32)\")]\r\nprotected virtual void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryAddFiles(IVsProject pProject, int cFiles, string[] rgpszMkDocuments, VSQUERYADDFILEFLAGS[] rgFlags, VSQUERYADDFILERESULTS[] pSummaryResult, VSQUERYADDFILERESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Dispose\">\r\n    <summary>\r\n    The IDispose interface Dispose method for disposing the object determinastically.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryRemoveFiles(IVsProject pProject, int cFiles, string[] rgpszMkDocuments, VSQUERYREMOVEFILEFLAGS[] rgFlags, VSQUERYREMOVEFILERESULTS[] pSummaryResult, VSQUERYREMOVEFILERESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryRemoveFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYREMOVEFILERESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnQueryAddDirectories(IVsProject pProject, int cDirectories, string[] rgpszMkDocuments, VSQUERYADDDIRECTORYFLAGS[] rgFlags, VSQUERYADDDIRECTORYRESULTS[] pSummaryResult, VSQUERYADDDIRECTORYRESULTS[] rgResults)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnQueryAddDirectories(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDDIRECTORYRESULTS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRenameFiles(int cProjects, int cFiles, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgszMkOldNames, string[] rgszMkNewNames, VSRENAMEFILEFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterRenameFiles(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEFILEFLAGS[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAfterRenameDirectories(int cProjects, int cDirs, IVsProject[] rgpProjects, int[] rgFirstIndices, string[] rgszMkOldNames, string[] rgszMkNewNames, VSRENAMEDIRECTORYFLAGS[] rgFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.OnAfterRenameDirectories(System.Int32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsProject[],System.Int32[],System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSRENAMEDIRECTORYFLAGS[])",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Mutex",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectDocumentsListener.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectDocumentsListener.isDisposed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectDocTracker",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectDocumentsListener.projectDocTracker",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "eventsCookie",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectDocumentsListener.eventsCookie",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "serviceProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectDocumentsListener.serviceProvider",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected uint EventsCookie",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectDocumentsListener.EventsCookie",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected ServiceProvider ServiceProvider",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectDocumentsListener.ServiceProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected IVsTrackProjectDocuments2 ProjectDocumentTracker2",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectDocumentsListener.ProjectDocumentTracker2",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected ProjectDocumentsListener(ServiceProvider serviceProviderParameter)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDocumentsListener.#ctor(Microsoft.VisualStudio.Shell.ServiceProvider)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class ProjectDocumentsListener\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectDocumentsListener",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int TranslateAccelerator(MSG[] arrMsg)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.TranslateAccelerator(Microsoft.VisualStudio.OLE.Interop.MSG[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void SetObjects(uint count, object[] punk)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.SetObjects(System.UInt32,System.Object[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Show(uint cmd)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Show(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void SetPageSite(IPropertyPageSite theSite)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.SetPageSite(Microsoft.VisualStudio.OLE.Interop.IPropertyPageSite)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string GetProperty(string propertyName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetProperty(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Move(RECT[] arrRect)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Move(Microsoft.VisualStudio.OLE.Interop.RECT[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void GetPageInfo(PROPPAGEINFO[] arrInfo)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetPageInfo(Microsoft.VisualStudio.OLE.Interop.PROPPAGEINFO[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Deactivate()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Deactivate",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object GetTypedConfigProperty(string name, Type type)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetTypedConfigProperty(System.String,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public object GetTypedProperty(string name, Type type)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetTypedProperty(System.String,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void Dispose(bool disposing)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Dispose(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Activate(IntPtr parent, RECT[] pRect, int bModal)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Activate(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void Dispose()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SettingsPage.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Dispose",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SettingsPage.Dispose\">\r\n    <summary>\r\n    Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void SetConfigProperty(string name, string value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SettingsPage.SetConfigProperty(System.String,System.String)\">\r\n    <summary>\r\n    Sets the value of a configuration dependent property.\r\n    If the attribute does not exist it is created.  \r\n    If value is null it will be set to an empty string.\r\n    </summary>\r\n    <param name=\"name\">property name.</param>\r\n    <param name=\"value\">value of property</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.SetConfigProperty(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SettingsPage.SetConfigProperty(System.String,System.String)\">\r\n    <summary>\r\n    Sets the value of a configuration dependent property.\r\n    If the attribute does not exist it is created.  \r\n    If value is null it will be set to an empty string.\r\n    </summary>\r\n    <param name=\"name\">property name.</param>\r\n    <param name=\"value\">value of property</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected abstract void BindProperties();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.BindProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void Help(string helpDir)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Help(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Apply()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.Apply",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected ProjectConfig[] GetProjectConfigurations()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetProjectConfigurations",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected void UpdateObjects()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.UpdateObjects",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int IsPageDirty()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.IsPageDirty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string GetConfigProperty(string propertyName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.GetConfigProperty(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected abstract int ApplyChanges();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SettingsPage.ApplyChanges",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "site",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.site",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "grid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.grid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectConfigs",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.projectConfigs",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "name",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.name",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.isDisposed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "dirty",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.dirty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "panel",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.panel",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.Mutex",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.project",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "active",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SettingsPage.active",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected IVSMDPropertyGrid Grid",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SettingsPage.Grid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public ProjectNode ProjectMgr",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SettingsPage.ProjectMgr",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected Panel ThePanel",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SettingsPage.ThePanel",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected bool IsDirty",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SettingsPage.IsDirty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string Name",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SettingsPage.Name",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class SettingsPage",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SettingsPage\">\r\n    <summary>\r\n    The base class for property pages.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.SettingsPage",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SettingsPage\">\r\n    <summary>\r\n    The base class for property pages.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\r\npublic static object GetObject(string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SR.GetObject(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public static string GetString(string name, CultureInfo culture)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SR.GetString(System.String,System.Globalization.CultureInfo)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\r\npublic static string GetString(string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SR.GetString(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public static string GetString(string name, params object[] args)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SR.GetString(System.String,System.Object[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private static SR GetLoader()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SR.GetLoader",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "BuildEventError",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.BuildEventError",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectFile",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ProjectFile",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Advanced",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Advanced",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ErrorInvalidProjectName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ErrorInvalidProjectName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileAlreadyInProjectCaption",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileAlreadyInProjectCaption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WinExe",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.WinExe",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "AddToNullProjectError",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.AddToNullProjectError",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CopyToLocalDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CopyToLocalDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReloadPromptOnTargetFxChangedCaption",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ReloadPromptOnTargetFxChangedCaption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "BuildVerbosityDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.BuildVerbosityDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "LinkedItemsAreNotSupported",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.LinkedItemsAreNotSupported",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileProperties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ErrorReferenceCouldNotBeAdded",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ErrorReferenceCouldNotBeAdded",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReferencesNodeName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ReferencesNodeName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FullPathDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FullPathDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CancelQueryEdit",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CancelQueryEdit",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ConfirmExtensionChange",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ConfirmExtensionChange",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Minimal",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Minimal",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CustomToolDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CustomToolDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "InvalidParameter",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.InvalidParameter",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "BuildActionDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.BuildActionDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SaveModifiedDocuments",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.SaveModifiedDocuments",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileNameDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileNameDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileCopyError",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileCopyError",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DetailsItem",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.DetailsItem",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FolderProperties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FolderProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FullPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FullPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "s_InternalSyncObject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.s_InternalSyncObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ErrorMsBuildRegistration",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ErrorMsBuildRegistration",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Quiet",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Quiet",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectFolder",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ProjectFolder",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "BuildCaption",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.BuildCaption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileAlreadyExistsCaption",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileAlreadyExistsCaption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DetailsImport",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.DetailsImport",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileAlreadyExists",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileAlreadyExists",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "EmbedInteropTypes",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.EmbedInteropTypes",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Compile",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Compile",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OutputPathDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.OutputPathDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Settings",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Settings",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ErrorInvalidFileName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ErrorInvalidFileName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReloadPromptOnTargetFxChanged",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ReloadPromptOnTargetFxChanged",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "EmbeddedResource",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.EmbeddedResource",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileOrFolderCannotBeFound",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileOrFolderCannotBeFound",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "StandardEditorViewError",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.StandardEditorViewError",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileCannotBeRenamedToAnExistingFile",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileCannotBeRenamedToAnExistingFile",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CustomTool",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CustomTool",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "URL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.URL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Library",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Library",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DetailsItemLocation",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.DetailsItemLocation",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SaveCaption",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.SaveCaption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "BuildAction",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.BuildAction",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "RefName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.RefName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "QueryReloadNestedProject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.QueryReloadNestedProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CopyToLocal",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CopyToLocal",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "AddReferenceDialogTitle",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.AddReferenceDialogTitle",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "RefNameDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.RefNameDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "InvalidLoggerType",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.InvalidLoggerType",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Misc",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Misc",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ParameterCannotBeNullOrEmpty",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ParameterCannotBeNullOrEmpty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReferenceAlreadyExists",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ReferenceAlreadyExists",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "BuildVerbosity",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.BuildVerbosity",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileAlreadyExistsAndCannotBeRenamed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileAlreadyExistsAndCannotBeRenamed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FailedToGetService",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FailedToGetService",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ExpectedObjectOfType",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ExpectedObjectOfType",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Program",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Program",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "loader",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.loader",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "resources",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.resources",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PasteFailed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.PasteFailed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PathTooLong",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.PathTooLong",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "InvalidAutomationObject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.InvalidAutomationObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectFileDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ProjectFileDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Project",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "cli1",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.cli1",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "EmbedInteropTypesDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.EmbedInteropTypesDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DetailsProperty",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.DetailsProperty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "AssemblyReferenceAlreadyExists",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.AssemblyReferenceAlreadyExists",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "RTL",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.RTL",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "None",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.None",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "RenameFolder",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.RenameFolder",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ParameterMustBeAValidItemId",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ParameterMustBeAValidItemId",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Detailed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Detailed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectContainsCircularReferences",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ProjectContainsCircularReferences",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CustomToolNamespace",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CustomToolNamespace",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FolderNameDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FolderNameDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ParameterMustBeAValidGuid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ParameterMustBeAValidGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CannotAddFileThatIsOpenInEditor",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CannotAddFileThatIsOpenInEditor",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectProperties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ProjectProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Warning",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Warning",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileAlreadyInProject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileAlreadyInProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SaveOfProjectFileOutsideCurrentDirectory",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.SaveOfProjectFileOutsideCurrentDirectory",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FolderName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FolderName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ErrorSaving",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ErrorSaving",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DirectoryExistError",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.DirectoryExistError",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CannotLoadUnknownTargetFrameworkProject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CannotLoadUnknownTargetFrameworkProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "UseOfDeletedItemError",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.UseOfDeletedItemError",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CanNotSaveFileNotOpeneInEditor",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CanNotSaveFileNotOpeneInEditor",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ItemDoesNotExistInProjectDirectory",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ItemDoesNotExistInProjectDirectory",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Diagnostic",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Diagnostic",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DetailsTarget",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.DetailsTarget",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Content",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Content",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectFolderDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ProjectFolderDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FailedToRetrieveProperties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FailedToRetrieveProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileNameCannotContainALeadingPeriod",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileNameCannotContainALeadingPeriod",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Exe",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Exe",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Normal",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Normal",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReferenceProperties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.ReferenceProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "NestedProjectFailedToReload",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.NestedProjectFailedToReload",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FileOrFolderAlreadyExists",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.FileOrFolderAlreadyExists",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Error",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.Error",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "EditorViewError",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.EditorViewError",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DetailsUsingTask",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.DetailsUsingTask",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CustomToolNamespaceDescription",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.CustomToolNamespaceDescription",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OutputPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.OutputPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DetailsUserImport",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.DetailsUserImport",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "AttributeLoad",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SR.AttributeLoad",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public static ResourceManager Resources",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SR.Resources",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private static Object InternalSyncObject",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SR.InternalSyncObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private static CultureInfo Culture",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SR.Culture",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal SR()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SR.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal sealed class SR",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SR",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "replacement",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplacePairToken.replacement\">\r\n    <summary>\r\n    Replacement string\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ReplacePairToken.replacement",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplacePairToken.replacement\">\r\n    <summary>\r\n    Replacement string\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "token",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplacePairToken.token\">\r\n    <summary>\r\n    token string\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ReplacePairToken.token",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplacePairToken.token\">\r\n    <summary>\r\n    token string\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string Token",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplacePairToken.Token\">\r\n    <summary>\r\n    Token that needs to be replaced\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReplacePairToken.Token",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplacePairToken.Token\">\r\n    <summary>\r\n    Token that needs to be replaced\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string Replacement",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplacePairToken.Replacement\">\r\n    <summary>\r\n    String to replace the token with\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReplacePairToken.Replacement",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplacePairToken.Replacement\">\r\n    <summary>\r\n    String to replace the token with\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ReplacePairToken(string token, string replacement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReplacePairToken.#ctor(System.String,System.String)\">\r\n    <summary>\r\n    Constructor\r\n    </summary>\r\n    <param name=\"token\">replaceable token</param>\r\n    <param name=\"replacement\">replacement string</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReplacePairToken.#ctor(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReplacePairToken.#ctor(System.String,System.String)\">\r\n    <summary>\r\n    Constructor\r\n    </summary>\r\n    <param name=\"token\">replaceable token</param>\r\n    <param name=\"replacement\">replacement string</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ReplacePairToken",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ReplacePairToken\">\r\n    <summary>\r\n     Storage classes for replacement tokens\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReplacePairToken",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ReplacePairToken\">\r\n    <summary>\r\n     Storage classes for replacement tokens\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "hierarchy",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.hierarchy\">\r\n    <summary>\r\n    The hierarchy whose configuration has changed \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.hierarchy",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.hierarchy\">\r\n    <summary>\r\n    The hierarchy whose configuration has changed \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal IVsHierarchy Hierarchy",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.Hierarchy\">\r\n    <summary>\r\n    The hierarchy whose configuration has changed \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.Hierarchy",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.Hierarchy\">\r\n    <summary>\r\n    The hierarchy whose configuration has changed \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal ActiveConfigurationChangedEventArgs(IVsHierarchy hierarchy)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Constructs a new event args.\r\n    </summary>\r\n    <param name=\"fileName\">The hierarchy that has changed its configuration.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs.#ctor(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Constructs a new event args.\r\n    </summary>\r\n    <param name=\"fileName\">The hierarchy that has changed its configuration.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ActiveConfigurationChangedEventArgs",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs\">\r\n    <summary>\r\n    Defines the event args for the active configuration chnage event.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs\">\r\n    <summary>\r\n    Defines the event args for the active configuration chnage event.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public int Next(uint elements, IVsDependency[] dependencies, out uint elementsFetched)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.Next(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDependency[],System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Skip(uint elements)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.Skip(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Reset()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.Reset",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int Clone(out IVsEnumDependencies enumDependencies)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.Clone(Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies@)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "nextIndex",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.EnumDependencies.nextIndex",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "dependencyList",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.EnumDependencies.dependencyList",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public EnumDependencies(IList<IVsBuildDependency> dependencyList)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.#ctor(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency})",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public EnumDependencies(IList<IVsDependency> dependencyList)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.EnumDependencies.#ctor(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.IVsDependency})",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class EnumDependencies",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.EnumDependencies",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override bool EditComponent(ITypeDescriptorContext context, object component)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.PropertiesEditorLauncher.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)\">\r\n    <summary>\r\n    Launch the Project Properties Editor (properties pages)\r\n    </summary>\r\n    <returns>If we succeeded or not</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.PropertiesEditorLauncher.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.PropertiesEditorLauncher.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)\">\r\n    <summary>\r\n    Launch the Project Properties Editor (properties pages)\r\n    </summary>\r\n    <returns>If we succeeded or not</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "serviceProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.PropertiesEditorLauncher.serviceProvider",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public PropertiesEditorLauncher(ServiceProvider serviceProvider)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.PropertiesEditorLauncher.#ctor(Microsoft.VisualStudio.Shell.ServiceProvider)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class PropertiesEditorLauncher\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropertiesEditorLauncher\">\r\n    <summary>\r\n    This class is used to enable launching the project properties\r\n    editor from the Properties Browser.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.PropertiesEditorLauncher",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropertiesEditorLauncher\">\r\n    <summary>\r\n    This class is used to enable launching the project properties\r\n    editor from the Properties Browser.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "onCustomToolNameSpaceChanged",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorNodeProperties.onCustomToolNameSpaceChanged",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "onCustomToolChanged",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorNodeProperties.onCustomToolChanged",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual string CustomToolNamespace",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SingleFileGeneratorNodeProperties.CustomToolNamespace",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string CustomTool",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.SingleFileGeneratorNodeProperties.CustomTool",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public SingleFileGeneratorNodeProperties(HierarchyNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGeneratorNodeProperties.#ctor(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class SingleFileGeneratorNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SingleFileGeneratorNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private void RefreshReferences()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.BuildableProjectConfig.RefreshReferences\">\r\n    <summary>\r\n    Refreshes references and redraws them correctly.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.RefreshReferences",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.BuildableProjectConfig.RefreshReferences\">\r\n    <summary>\r\n    Refreshes references and redraws them correctly.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int UnadviseBuildStatusCallback(uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.UnadviseBuildStatusCallback(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int StartClean(IVsOutputWindowPane pane, uint options)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.StartClean(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int StartBuild(IVsOutputWindowPane pane, uint options)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.StartBuild(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStatus(out int done)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.QueryStatus(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\")]\r\nprivate bool NotifyBuildBegin()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.NotifyBuildBegin",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStartClean(uint options, int[] supported, int[] ready)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.QueryStartClean(System.UInt32,System.Int32[],System.Int32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStartBuild(uint options, int[] supported, int[] ready)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.QueryStartBuild(System.UInt32,System.Int32[],System.Int32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int AdviseBuildStatusCallback(IVsBuildStatusCallback callback, out uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.AdviseBuildStatusCallback(Microsoft.VisualStudio.Shell.Interop.IVsBuildStatusCallback,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void Build(uint options, IVsOutputWindowPane output, string target)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.Build(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int QueryStartUpToDateCheck(uint options, int[] supported, int[] ready)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.QueryStartUpToDateCheck(System.UInt32,System.Int32[],System.Int32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int StartUpToDateCheck(IVsOutputWindowPane pane, uint options)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.StartUpToDateCheck(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1031:DoNotCatchGeneralExceptionTypes\")]\r\nprivate void NotifyBuildEnd(MSBuildResult result, string buildTarget)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.NotifyBuildEnd(Microsoft.VisualStudio.Project.MSBuildResult,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Stop(int fsync)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.Stop(System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_ProjectCfg(out IVsProjectCfg p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.get_ProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Wait(uint ms, int fTickWhenMessageQNotEmpty)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.Wait(System.UInt32,System.Int32)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "callbacks",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.BuildableProjectConfig.callbacks",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "config",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.BuildableProjectConfig.config",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public BuildableProjectConfig(ProjectConfig config)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildableProjectConfig.#ctor(Microsoft.VisualStudio.Project.ProjectConfig)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class BuildableProjectConfig\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildableProjectConfig",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "tokenStart",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenStart\">\r\n    <summary>\r\n    Token start\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenStart",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenStart\">\r\n    <summary>\r\n    Token start\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "tokenidentifier",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenidentifier\">\r\n    <summary>\r\n    Token identifier string\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenidentifier",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenidentifier\">\r\n    <summary>\r\n    Token identifier string\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "replacement",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.replacement\">\r\n    <summary>\r\n    Replacement string\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.replacement",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.replacement\">\r\n    <summary>\r\n    Replacement string\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "tokenEnd",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenEnd\">\r\n    <summary>\r\n    End token\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenEnd",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.tokenEnd\">\r\n    <summary>\r\n    End token\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string TokenEnd",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenEnd\">\r\n    <summary>\r\n    Token marking the end of the block to delete\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenEnd",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenEnd\">\r\n    <summary>\r\n    Token marking the end of the block to delete\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string TokenStart",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenStart\">\r\n    <summary>\r\n    Token marking the begining of the block to delete\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenStart",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenStart\">\r\n    <summary>\r\n    Token marking the begining of the block to delete\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string TokenIdentifier",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenIdentifier\">\r\n    <summary>\r\n    Token Identifier\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenIdentifier",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenIdentifier\">\r\n    <summary>\r\n    Token Identifier\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string TokenReplacement",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenReplacement\">\r\n    <summary>\r\n    Token marking the end of the block to delete\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenReplacement",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.TokenReplacement\">\r\n    <summary>\r\n    Token marking the end of the block to delete\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"tokenid\")]\r\npublic ReplaceBetweenPairToken(string tokenid, string blockStart, string blockEnd, string replacement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.#ctor(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    Constructor\r\n    </summary>\r\n    <param name=\"blockStart\">Start token</param>\r\n    <param name=\"blockEnd\">End Token</param>\r\n    <param name=\"replacement\">Replacement string.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.#ctor(System.String,System.String,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken.#ctor(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    Constructor\r\n    </summary>\r\n    <param name=\"blockStart\">Start token</param>\r\n    <param name=\"blockEnd\">End Token</param>\r\n    <param name=\"replacement\">Replacement string.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ReplaceBetweenPairToken",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken\">\r\n    <summary>\r\n    Storage classes for string to be deleted between tokens to be deleted \r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ReplaceBetweenPairToken\">\r\n    <summary>\r\n    Storage classes for string to be deleted between tokens to be deleted \r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual ProjectReferenceNode CreateProjectReferenceNode(VSCOMPONENTSELECTORDATA selectorData)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)\">\r\n    <summary>\r\n    Create a Project to Project reference given a VSCOMPONENTSELECTORDATA structure\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA)\">\r\n    <summary>\r\n    Create a Project to Project reference given a VSCOMPONENTSELECTORDATA structure\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ComReferenceNode CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Creates a com reference node from a selector data.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Creates a com reference node from a selector data.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Defines whether this node is valid node for painting the refererences icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Defines whether this node is valid node for painting the refererences icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ReferenceNode CreateReferenceNode(string referenceType, ProjectElement element)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateReferenceNode(System.String,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal override StringBuilder PrepareSelectedNodesForClipBoard()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.PrepareSelectedNodesForClipBoard\">\r\n    <summary>\r\n    References node cannot be dragged.\r\n    </summary>\r\n    <returns>A stringbuilder.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.PrepareSelectedNodesForClipBoard",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.PrepareSelectedNodesForClipBoard\">\r\n    <summary>\r\n    References node cannot be dragged.\r\n    </summary>\r\n    <returns>A stringbuilder.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual AssemblyReferenceNode CreateAssemblyReferenceNode(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(System.String)\">\r\n    <summary>\r\n    Creates an assembly reference node from a file path.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(System.String)\">\r\n    <summary>\r\n    Creates an assembly reference node from a file path.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetEditLabel\">\r\n    <summary>\r\n    Disable inline editing of Caption of a ReferendeContainerNode\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetEditLabel\">\r\n    <summary>\r\n    Disable inline editing of Caption of a ReferendeContainerNode\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public ReferenceNode AddReferenceFromSelectorData(VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Adds a reference to this container using the selector data structure to identify it.\r\n    </summary>\r\n    <param name=\"selectorData\">data describing selected component</param>\r\n    <returns>Reference in case of a valid reference node has been created. Otherwise null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Adds a reference to this container using the selector data structure to identify it.\r\n    </summary>\r\n    <param name=\"selectorData\">data describing selected component</param>\r\n    <returns>Reference in case of a valid reference node has been created. Otherwise null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ReferenceNode CreateReferenceNode(VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateReferenceNode(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public IList<ReferenceNode> EnumReferences()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.EnumReferences",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int ExcludeFromProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.ExcludeFromProject\">\r\n    <summary>\r\n    Not supported.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.ExcludeFromProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.ExcludeFromProject\">\r\n    <summary>\r\n    Not supported.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void LoadReferencesFromBuildProject(MSBuild.Project buildProject)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.LoadReferencesFromBuildProject(Microsoft.Build.Evaluation.Project)\">\r\n    <summary>\r\n    Adds references to this container from a MSBuild project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.LoadReferencesFromBuildProject(Microsoft.Build.Evaluation.Project)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.LoadReferencesFromBuildProject(Microsoft.Build.Evaluation.Project)\">\r\n    <summary>\r\n    Adds references to this container from a MSBuild project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ComReferenceNode CreateComReferenceNode(ProjectElement reference)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates a com reference node from the project element.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateComReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates a com reference node from the project element.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual AssemblyReferenceNode CreateAssemblyReferenceNode(ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates an assembly refernce node from a project element.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateAssemblyReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates an assembly refernce node from a project element.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetAutomationObject\">\r\n    <summary>\r\n    Returns an instance of the automation object for ReferenceContainerNode\r\n    </summary>\r\n    <returns>An intance of the Automation.OAReferenceFolderItem type if succeeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.GetAutomationObject\">\r\n    <summary>\r\n    Returns an instance of the automation object for ReferenceContainerNode\r\n    </summary>\r\n    <returns>An intance of the Automation.OAReferenceFolderItem type if succeeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual ProjectReferenceNode CreateProjectReferenceNode(ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates a project reference node given an existing project element.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateProjectReferenceNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Creates a project reference node given an existing project element.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ReferenceNode CreateFileComponent(VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Creates an assemby or com reference node given a selector data.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceContainerNode.CreateFileComponent(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Creates an assemby or com reference node given a selector data.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "references",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ReferenceContainerNode.references",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "supportedReferenceTypes",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ReferenceContainerNode.supportedReferenceTypes",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReferencesNodeVirtualName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ReferenceContainerNode.ReferencesNodeVirtualName",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override Guid ItemTypeGuid",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceContainerNode.ItemTypeGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Caption",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceContainerNode.Caption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int SortPriority",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceContainerNode.SortPriority",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal override object Object",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceContainerNode.Object",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Url",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceContainerNode.Url",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual string[] SupportedReferenceTypes",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceContainerNode.SupportedReferenceTypes",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int MenuCommandId",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceContainerNode.MenuCommandId",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ReferenceContainerNode(ProjectNode root): base (root)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceContainerNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ReferenceContainerNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReferenceContainerNode",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "name",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.LocDisplayNameAttribute.name",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override string DisplayName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.LocDisplayNameAttribute.DisplayName",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public LocDisplayNameAttribute(string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocDisplayNameAttribute.#ctor(System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal sealed class LocDisplayNameAttribute\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.LocDisplayNameAttribute",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "ReferenceCopyLocalPaths",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.MsBuildGeneratedItemType.ReferenceCopyLocalPaths",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ComReferenceWrappers",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.MsBuildGeneratedItemType.ComReferenceWrappers",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public static class MsBuildGeneratedItemType",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.MsBuildGeneratedItemType",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "fileName",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.fileName\">\r\n    <summary>\r\n    File name that was changed on disk.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.fileName",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.fileName\">\r\n    <summary>\r\n    File name that was changed on disk.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "itemID",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.itemID\">\r\n    <summary>\r\n    The item ide of the file that has changed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.itemID",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.itemID\">\r\n    <summary>\r\n    The item ide of the file that has changed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "fileChangeFlag",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.fileChangeFlag\">\r\n    <summary>\r\n    The reason the file has changed on disk.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.fileChangeFlag",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.fileChangeFlag\">\r\n    <summary>\r\n    The reason the file has changed on disk.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal uint ItemID",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.ItemID\">\r\n    <summary>\r\n    Gets item id of the file that has changed\r\n    </summary>\r\n    <value>The file that was changed on disk.</value>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.ItemID",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.ItemID\">\r\n    <summary>\r\n    Gets item id of the file that has changed\r\n    </summary>\r\n    <value>The file that was changed on disk.</value>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal _VSFILECHANGEFLAGS FileChangeFlag",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.FileChangeFlag\">\r\n    <summary>\r\n    The reason while the file has chnaged on disk.\r\n    </summary>\r\n    <value>The reason while the file has chnaged on disk.</value>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.FileChangeFlag",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.FileChangeFlag\">\r\n    <summary>\r\n    The reason while the file has chnaged on disk.\r\n    </summary>\r\n    <value>The reason while the file has chnaged on disk.</value>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal string FileName",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.FileName\">\r\n    <summary>\r\n    Gets the file name that was changed on disk.\r\n    </summary>\r\n    <value>The file that was changed on disk.</value>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.FileName",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.FileName\">\r\n    <summary>\r\n    Gets the file name that was changed on disk.\r\n    </summary>\r\n    <value>The file that was changed on disk.</value>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal FileChangedOnDiskEventArgs(string fileName, uint id, _VSFILECHANGEFLAGS flag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.#ctor(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS)\">\r\n    <summary>\r\n    Constructs a new event args.\r\n    </summary>\r\n    <param name=\"fileName\">File name that was changed on disk.</param>\r\n    <param name=\"id\">The item id of the file that was changed on disk.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.#ctor(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs.#ctor(System.String,System.UInt32,Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS)\">\r\n    <summary>\r\n    Constructs a new event args.\r\n    </summary>\r\n    <param name=\"fileName\">File name that was changed on disk.</param>\r\n    <param name=\"id\">The item id of the file that was changed on disk.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "internal class FileChangedOnDiskEventArgs",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs\">\r\n    <summary>\r\n    Event args class for triggering file change event arguments.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs\">\r\n    <summary>\r\n    Event args class for triggering file change event arguments.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "Rebuild",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.MsBuildTarget.Rebuild",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ResolveProjectReferences",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.MsBuildTarget.ResolveProjectReferences",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Clean",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.MsBuildTarget.Clean",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ResolveComReferences",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.MsBuildTarget.ResolveComReferences",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ResolveAssemblyReferences",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.MsBuildTarget.ResolveAssemblyReferences",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Build",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.MsBuildTarget.Build",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public static class MsBuildTarget",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.MsBuildTarget\">\r\n    <summary>\r\n    Defines the constant strings for various msbuild targets\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.MsBuildTarget",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.MsBuildTarget\">\r\n    <summary>\r\n    Defines the constant strings for various msbuild targets\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private void InitSccInfo()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitSccInfo\">\r\n    <summary>\r\n    Sets the scc info from the project file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.InitSccInfo",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitSccInfo\">\r\n    <summary>\r\n    Sets the scc info from the project file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode NodeFromItemId(uint itemId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.NodeFromItemId(System.UInt32)\">\r\n    <summary>\r\n    Get Node from ItemID.\r\n    </summary>\r\n    <param name=\"itemId\">ItemID for the requested node</param>\r\n    <returns>Node if found</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.NodeFromItemId(System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.NodeFromItemId(System.UInt32)\">\r\n    <summary>\r\n    Get Node from ItemID.\r\n    </summary>\r\n    <param name=\"itemId\">ItemID for the requested node</param>\r\n    <returns>Node if found</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int UpdateTargetFramework(IVsHierarchy pHier, string currentTargetFramework, string newTargetFramework)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.UpdateTargetFramework(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string GetOutputAssembly(string config)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputAssembly(System.String)\">\r\n    <summary>\r\n    Get output assembly for a specific configuration name\r\n    </summary>\r\n    <param name=\"config\">Name of configuration</param>\r\n    <returns>Name of output assembly</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputAssembly(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputAssembly(System.String)\">\r\n    <summary>\r\n    Get output assembly for a specific configuration name\r\n    </summary>\r\n    <param name=\"config\">Name of configuration</param>\r\n    <returns>Name of output assembly</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void SetCurrentConfiguration()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetCurrentConfiguration\">\r\n    <summary>\r\n    Set the configuration in MSBuild.\r\n    This does not get persisted and is used to evaluate msbuild conditions\r\n    which are based on the $(Configuration) property.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetCurrentConfiguration",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetCurrentConfiguration\">\r\n    <summary>\r\n    Set the configuration in MSBuild.\r\n    This does not get persisted and is used to evaluate msbuild conditions\r\n    which are based on the $(Configuration) property.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual int UnloadProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.UnloadProject\">\r\n    <summary>\r\n    Unloads the project.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.UnloadProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.UnloadProject\">\r\n    <summary>\r\n    Unloads the project.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    Disposes the project node object.\r\n    </summary>\r\n    <param name=\"disposing\">Flag determining ehether it was deterministic or non deterministic clean up.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    Disposes the project node object.\r\n    </summary>\r\n    <param name=\"disposing\">Flag determining ehether it was deterministic or non deterministic clean up.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal virtual DataObject PackageSelectionDataObject(bool cutHighlightItems)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PackageSelectionDataObject(System.Boolean)\">\r\n    <summary>\r\n    Returns a dataobject from selected nodes\r\n    </summary>\r\n    <param name=\"cutHighlightItems\">boolean that defines if the selected items must be cut</param>\r\n    <returns>data object for selected items</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.PackageSelectionDataObject(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PackageSelectionDataObject(System.Boolean)\">\r\n    <summary>\r\n    Returns a dataobject from selected nodes\r\n    </summary>\r\n    <param name=\"cutHighlightItems\">boolean that defines if the selected items must be cut</param>\r\n    <returns>data object for selected items</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnPaste(int wasCut, uint dropEffect)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnPaste(System.Int32,System.UInt32)\">\r\n     <summary>\r\n     Called after your cut/copied items has been pasted\r\n     </summary>\r\n    <param name=\"wasCut\">If true, then the IDataObject has been successfully pasted into a target hierarchy. \r\n     If false, then the cut or copy operation was cancelled.</param>\r\n     <param name=\"dropEffect\">Visual effects associated with the drag and drop operation, such as cursors, bitmaps, and so on. \r\n     These should be the same visual effects used in OnDropNotify</param>\r\n     <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnPaste(System.Int32,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnPaste(System.Int32,System.UInt32)\">\r\n     <summary>\r\n     Called after your cut/copied items has been pasted\r\n     </summary>\r\n    <param name=\"wasCut\">If true, then the IDataObject has been successfully pasted into a target hierarchy. \r\n     If false, then the cut or copy operation was cancelled.</param>\r\n     <param name=\"dropEffect\">Visual effects associated with the drag and drop operation, such as cursors, bitmaps, and so on. \r\n     These should be the same visual effects used in OnDropNotify</param>\r\n     <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddBuildDependency(IVsBuildDependency dependency)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult Build(string config, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,System.String)\">\r\n    <summary>\r\n    Overloaded method to invoke MSBuild. Does not log build results to the output window pane.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,System.String)\">\r\n    <summary>\r\n    Overloaded method to invoke MSBuild. Does not log build results to the output window pane.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider site)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)\">\r\n    <summary>\r\n    Sets the service provider from which to access the services. \r\n    </summary>\r\n    <param name=\"site\">An instance to an Microsoft.VisualStudio.OLE.Interop object</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)\">\r\n    <summary>\r\n    Sets the service provider from which to access the services. \r\n    </summary>\r\n    <param name=\"site\">An instance to an Microsoft.VisualStudio.OLE.Interop object</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult Build(string target, IVsOutputWindowPane output)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Overloaded method. Invokes MSBuild using the default configuration.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Overloaded method. Invokes MSBuild using the default configuration.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal void LoadXmlFragment(IPersistXMLFragment persistXmlFragment, string configName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.LoadXmlFragment(Microsoft.VisualStudio.Shell.Interop.IPersistXMLFragment,System.String)\">\r\n    <summary>\r\n    Initialize an object with an XML fragment.\r\n    </summary>\r\n    <param name=\"iPersistXMLFragment\">Object that support being initialized with an XML fragment</param>\r\n    <param name=\"configName\">Name of the configuration being initialized, null if it is the project</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.LoadXmlFragment(Microsoft.VisualStudio.Shell.Interop.IPersistXMLFragment,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.LoadXmlFragment(Microsoft.VisualStudio.Shell.Interop.IPersistXMLFragment,System.String)\">\r\n    <summary>\r\n    Initialize an object with an XML fragment.\r\n    </summary>\r\n    <param name=\"iPersistXMLFragment\">Object that support being initialized with an XML fragment</param>\r\n    <param name=\"configName\">Name of the configuration being initialized, null if it is the project</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int ReopenItem(uint itemId, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame frame)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ReopenItem(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void ProcessFiles()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessFiles\">\r\n    <summary>\r\n    Loads file items from the project file into the hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ProcessFiles",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessFiles\">\r\n    <summary>\r\n    Loads file items from the project file into the hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string GetProjectProperty(string propertyName, bool resetCache)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String,System.Boolean)\">\r\n    <summary>\r\n    Return the value of a project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to get</param>\r\n    <param name=\"resetCache\">True to avoid using the cache</param>\r\n    <returns>null if property does not exist, otherwise value of the property</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String,System.Boolean)\">\r\n    <summary>\r\n    Return the value of a project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to get</param>\r\n    <param name=\"resetCache\">True to avoid using the cache</param>\r\n    <returns>null if property does not exist, otherwise value of the property</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void SuspendMSBuild()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SuspendMSBuild\">\r\n    <summary>\r\n    Suspends MSBuild\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SuspendMSBuild",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SuspendMSBuild\">\r\n    <summary>\r\n    Suspends MSBuild\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int EndBatchEdit()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.EndBatchEdit",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual bool IsItemTypeFileType(string type)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsItemTypeFileType(System.String)\">\r\n    <summary>\r\n    Called by the project to know if the item is a file (that is part of the project)\r\n    or an intermediate file used by the MSBuild tasks/targets\r\n    Override this method if your project has more types or different ones\r\n    </summary>\r\n    <param name=\"type\">Type name</param>\r\n    <returns>True = items of this type should be included in the project</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsItemTypeFileType(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsItemTypeFileType(System.String)\">\r\n    <summary>\r\n    Called by the project to know if the item is a file (that is part of the project)\r\n    or an intermediate file used by the MSBuild tasks/targets\r\n    Override this method if your project has more types or different ones\r\n    </summary>\r\n    <param name=\"type\">Type name</param>\r\n    <returns>True = items of this type should be included in the project</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private bool GetBoolAttr(MSBuildExecution.ProjectInstance properties, string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetBoolAttr(Microsoft.Build.Execution.ProjectInstance,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult CallMSBuild(string target, IVsOutputWindowPane output)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. Uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. Uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\"), System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Globalization\", \"CA1308:NormalizeStringsToUppercase\")]\r\npublic virtual ProjectOptions GetProjectOptions(string config = null)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectOptions(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Attr\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1720:IdentifiersShouldNotContainTypeNames\", MessageId = \"bool\")]\r\npublic virtual bool GetBoolAttr(string config, string name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetBoolAttr(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IVsBuildPropertyStorage.RemoveProperty(string propertyName, string configName, uint storage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#RemoveProperty(System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Delete a property\r\n    In our case this simply mean defining it as null\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to remove</param>\r\n    <param name=\"configName\">Configuration for which to remove the property</param>\r\n    <param name=\"storage\">Project or user file (_PersistStorageType)</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#RemoveProperty(System.String,System.String,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#RemoveProperty(System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Delete a property\r\n    In our case this simply mean defining it as null\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to remove</param>\r\n    <param name=\"configName\">Configuration for which to remove the property</param>\r\n    <param name=\"storage\">Project or user file (_PersistStorageType)</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int InitializeForOuter(string filename, string location, string name, uint flags, ref Guid iid, out IntPtr projectPointer, out int canceled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)\">\r\n    <summary>\r\n    This is where the initialization occurs.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitializeForOuter(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)\">\r\n    <summary>\r\n    This is where the initialization occurs.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override bool AllowPasteCommand()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AllowPasteCommand\">\r\n    <summary>\r\n    Determines if the paste command should be allowed.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AllowPasteCommand",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AllowPasteCommand\">\r\n    <summary>\r\n    Determines if the paste command should be allowed.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal FolderNode CreateFolderNode(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNode(System.String)\">\r\n    <summary>\r\n    Create FolderNode from Path\r\n    </summary>\r\n    <param name=\"path\">Path to folder</param>\r\n    <returns>FolderNode created that can be added to the hierarchy</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNode(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNode(System.String)\">\r\n    <summary>\r\n    Create FolderNode from Path\r\n    </summary>\r\n    <param name=\"path\">Path to folder</param>\r\n    <returns>FolderNode created that can be added to the hierarchy</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void SetOutputLogger(IVsOutputWindowPane output)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetOutputLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Associate window output pane to the build logger\r\n    </summary>\r\n    <param name=\"output\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetOutputLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetOutputLogger(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Associate window output pane to the build logger\r\n    </summary>\r\n    <param name=\"output\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private bool IsFrameworkOnMachine()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsFrameworkOnMachine",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int StartBatchEdit()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.StartBatchEdit",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private bool TryBeginBuild(bool designTime, bool requiresUIThread = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Attempts to lock in the privilege of running a build in Visual Studio.\r\n    </summary>\r\n    <param name=\"designTime\"><c>false</c> if this build was called for by the Solution Build Manager; <c>true</c> otherwise.</param>\r\n    <param name=\"requiresUIThread\">\r\n    Need to claim the UI thread for build under the following conditions:\r\n    1. The build must use a resource that uses the UI thread, such as\r\n    - you set HostServices and you have a host object which requires (even indirectly) the UI thread (VB and C# compilers do this for instance.)\r\n    or,\r\n    2. The build requires the in-proc node AND waits on the UI thread for the build to complete, such as:\r\n    - you use a ProjectInstance to build, or\r\n    - you have specified a host object, whether or not it requires the UI thread, or\r\n    - you set HostServices and you have specified a node affinity.\r\n    - In addition to the above you also call submission.Execute(), or you call submission.ExecuteAsync() and then also submission.WaitHandle.Wait*().\r\n    </param>\r\n    <returns>A value indicating whether a build may proceed.</returns>\r\n    <remarks>\r\n    This method must be called on the UI thread.\r\n    </remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Attempts to lock in the privilege of running a build in Visual Studio.\r\n    </summary>\r\n    <param name=\"designTime\"><c>false</c> if this build was called for by the Solution Build Manager; <c>true</c> otherwise.</param>\r\n    <param name=\"requiresUIThread\">\r\n    Need to claim the UI thread for build under the following conditions:\r\n    1. The build must use a resource that uses the UI thread, such as\r\n    - you set HostServices and you have a host object which requires (even indirectly) the UI thread (VB and C# compilers do this for instance.)\r\n    or,\r\n    2. The build requires the in-proc node AND waits on the UI thread for the build to complete, such as:\r\n    - you use a ProjectInstance to build, or\r\n    - you have specified a host object, whether or not it requires the UI thread, or\r\n    - you set HostServices and you have specified a node affinity.\r\n    - In addition to the above you also call submission.Execute(), or you call submission.ExecuteAsync() and then also submission.WaitHandle.Wait*().\r\n    </param>\r\n    <returns>A value indicating whether a build may proceed.</returns>\r\n    <remarks>\r\n    This method must be called on the UI thread.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual FileNode CreateFileNode(string file)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(System.String)\">\r\n    <summary>\r\n    Create a file node based on a string.\r\n    </summary>\r\n    <param name=\"file\">filename of the new filenode</param>\r\n    <returns>File node added</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(System.String)\">\r\n    <summary>\r\n    Create a file node based on a string.\r\n    </summary>\r\n    <param name=\"file\">filename of the new filenode</param>\r\n    <returns>File node added</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Handles command status on the project node. If a command cannot be handled then the base should be called.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>\r\n    <param name=\"cmd\">The command to query status for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>\r\n    <param name=\"result\">An out parameter specifying the QueryStatusResult of the command.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)\">\r\n    <summary>\r\n    Handles command status on the project node. If a command cannot be handled then the base should be called.\r\n    </summary>\r\n    <param name=\"cmdGroup\">A unique identifier of the command group. The pguidCmdGroup parameter can be NULL to specify the standard group.</param>\r\n    <param name=\"cmd\">The command to query status for.</param>\r\n    <param name=\"pCmdText\">Pointer to an OLECMDTEXT structure in which to return the name and/or status information of a single command. Can be NULL to indicate that the caller does not require this information.</param>\r\n    <param name=\"result\">An out parameter specifying the QueryStatusResult of the command.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void CleanupSelectionDataObject(bool dropped, bool cut, bool moved, bool justCleanup)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CleanupSelectionDataObject(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n     After a drop or paste, will use the dwEffects \r\n     to determine whether we need to clean up the source nodes or not. If\r\n     justCleanup is set, it only does the cleanup work.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CleanupSelectionDataObject(System.Boolean,System.Boolean,System.Boolean,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CleanupSelectionDataObject(System.Boolean,System.Boolean,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n     After a drop or paste, will use the dwEffects \r\n     to determine whether we need to clean up the source nodes or not. If\r\n     justCleanup is set, it only does the cleanup work.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"CATID\")]\r\nprotected internal Guid GetCATIDForType(Type type)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetCATIDForType(System.Type)\">\r\n    <summary>\r\n    Get the CATID corresponding to the specified type.\r\n    </summary>\r\n    <param name=\"type\">Type of the object for which you want the CATID</param>\r\n    <returns>CATID</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetCATIDForType(System.Type)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetCATIDForType(System.Type)\">\r\n    <summary>\r\n    Get the CATID corresponding to the specified type.\r\n    </summary>\r\n    <param name=\"type\">Type of the object for which you want the CATID</param>\r\n    <returns>CATID</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int ResolveAssemblyPathInTargetFx(string[] prgAssemblySpecs, uint cAssembliesToResolve, VsResolvedAssemblyPath[] prgResolvedAssemblyPaths, out uint pcResolvedAssemblyPaths)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ResolveAssemblyPathInTargetFx(System.String[],System.UInt32,Microsoft.VisualStudio.Shell.Interop.VsResolvedAssemblyPath[],System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IVsProjectFlavorCfgProvider.CreateProjectFlavorCfg(IVsCfg pBaseProjectCfg, out IVsProjectFlavorCfg ppFlavorCfg)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsProjectFlavorCfgProvider#CreateProjectFlavorCfg(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsProjectFlavorCfg@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int SccGlyphChanged(int affectedNodes, uint[] itemidAffectedNodes, VsStateIcon[] newGlyphs, uint[] newSccStatus)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])\">\r\n    <summary>\r\n    This method is called by the source control portion of the environment to inform the project of changes to the source control glyph on various nodes. \r\n    </summary>\r\n    <param name=\"affectedNodes\">Count of changed nodes.</param>\r\n    <param name=\"itemidAffectedNodes\">An array of VSITEMID identifiers of the changed nodes.</param>\r\n    <param name=\"newGlyphs\">An array of VsStateIcon glyphs representing the new state of the corresponding item in rgitemidAffectedNodes.</param>\r\n    <param name=\"newSccStatus\">An array of status flags from SccStatus corresponding to rgitemidAffectedNodes. </param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SccGlyphChanged(System.Int32,System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VsStateIcon[],System.UInt32[])\">\r\n    <summary>\r\n    This method is called by the source control portion of the environment to inform the project of changes to the source control glyph on various nodes. \r\n    </summary>\r\n    <param name=\"affectedNodes\">Count of changed nodes.</param>\r\n    <param name=\"itemidAffectedNodes\">An array of VSITEMID identifiers of the changed nodes.</param>\r\n    <param name=\"newGlyphs\">An array of VsStateIcon glyphs representing the new state of the corresponding item in rgitemidAffectedNodes.</param>\r\n    <param name=\"newSccStatus\">An array of status flags from SccStatus corresponding to rgitemidAffectedNodes. </param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int GetAggregateProjectTypeGuids(out string projectTypeGuids)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAggregateProjectTypeGuids(System.String@)\">\r\n    <summary>\r\n    Retrieve the list of project GUIDs that are aggregated together to make this project.\r\n    </summary>\r\n    <param name=\"projectTypeGuids\">Semi colon separated list of Guids. Typically, the last GUID would be the GUID of the base project factory</param>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetAggregateProjectTypeGuids(System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAggregateProjectTypeGuids(System.String@)\">\r\n    <summary>\r\n    Retrieve the list of project GUIDs that are aggregated together to make this project.\r\n    </summary>\r\n    <param name=\"projectTypeGuids\">Semi colon separated list of Guids. Typically, the last GUID would be the GUID of the base project factory</param>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual string GetOutputGroupDescription(string canonicalName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupDescription(System.String)\">\r\n    <summary>\r\n    Get the description of the given output group.\r\n    </summary>\r\n    <param name=\"canonicalName\">Canonical name of the output group</param>\r\n    <returns>Description</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupDescription(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupDescription(System.String)\">\r\n    <summary>\r\n    Get the description of the given output group.\r\n    </summary>\r\n    <param name=\"canonicalName\">Canonical name of the output group</param>\r\n    <returns>Description</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument\">\r\n    <summary>\r\n    Gets the moniker for the project node. That is the full path of the project file.\r\n    </summary>\r\n    <returns>The moniker for the project file.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument\">\r\n    <summary>\r\n    Gets the moniker for the project node. That is the full path of the project file.\r\n    </summary>\r\n    <returns>The moniker for the project file.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OnDropNotify(int fDropped, uint dwEffects)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnDropNotify(System.Int32,System.UInt32)\">\r\n    <summary>\r\n    Notifies clients that the dragged item was dropped. \r\n    </summary>\r\n    <param name=\"fDropped\">If true, then the dragged item was dropped on the target. If false, then the drop did not occur.</param>\r\n    <param name=\"dwEffects\">Visual effects associated with the drag-and-drop operation, such as cursors, bitmaps, and so on. \r\n    The value of dwEffects passed to the source object via OnDropNotify method is the value of pdwEffects returned by Drop method.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnDropNotify(System.Int32,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnDropNotify(System.Int32,System.UInt32)\">\r\n    <summary>\r\n    Notifies clients that the dragged item was dropped. \r\n    </summary>\r\n    <param name=\"fDropped\">If true, then the dragged item was dropped on the target. If false, then the drop did not occur.</param>\r\n    <param name=\"dwEffects\">Visual effects associated with the drag-and-drop operation, such as cursors, bitmaps, and so on. \r\n    The value of dwEffects passed to the source object via OnDropNotify method is the value of pdwEffects returned by Drop method.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SaveCompleted(string filename)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SaveCompleted(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal override int CopyToClipboard()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CopyToClipboard\">\r\n    <summary>\r\n    Handle the Copy operation to the clipboard\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CopyToClipboard",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CopyToClipboard\">\r\n    <summary>\r\n    Handle the Copy operation to the clipboard\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static DropDataType QueryDropDataType(IOleDataObject pDataObject)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryDropDataType(Microsoft.VisualStudio.OLE.Interop.IDataObject)\">\r\n    <summary>\r\n    Get the dropdatatype from the dataobject\r\n    </summary>\r\n    <param name=\"pDataObject\">The dataobject to be analysed for its format</param>\r\n    <returns>dropdatatype or none if dataobject does not contain known format</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.QueryDropDataType(Microsoft.VisualStudio.OLE.Interop.IDataObject)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryDropDataType(Microsoft.VisualStudio.OLE.Interop.IDataObject)\">\r\n    <summary>\r\n    Get the dropdatatype from the dataobject\r\n    </summary>\r\n    <param name=\"pDataObject\">The dataobject to be analysed for its format</param>\r\n    <returns>dropdatatype or none if dataobject does not contain known format</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetOutputPath(string config)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputPath(System.String)\">\r\n    <summary>\r\n    Get the output path for a specific configuration name\r\n    </summary>\r\n    <param name=\"config\">name of configuration</param>\r\n    <returns>Output path</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputPath(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputPath(System.String)\">\r\n    <summary>\r\n    Get the output path for a specific configuration name\r\n    </summary>\r\n    <param name=\"config\">name of configuration</param>\r\n    <returns>Output path</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GenerateUniqueItemName(uint itemIdLoc, string ext, string suggestedRoot, out string itemName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)\">\r\n    <summary>\r\n    for now used by add folder. Called on the ROOT, as only the project should need\r\n    to implement this.\r\n    for folders, called with parent folder, blank extension and blank suggested root\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GenerateUniqueItemName(System.UInt32,System.String,System.String,System.String@)\">\r\n    <summary>\r\n    for now used by add folder. Called on the ROOT, as only the project should need\r\n    to implement this.\r\n    for folders, called with parent folder, blank extension and blank suggested root\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetProperty(int propId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Gets the properties of the project node. \r\n    </summary>\r\n    <param name=\"propId\">The __VSHPROPID of the property.</param>\r\n    <returns>A property dependent value. See: <see cref=\"T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID\"/> for details.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProperty(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Gets the properties of the project node. \r\n    </summary>\r\n    <param name=\"propId\">The __VSHPROPID of the property.</param>\r\n    <returns>A property dependent value. See: <see cref=\"T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID\"/> for details.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int InitNew(uint formatIndex)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.InitNew(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void ProcessDependentFileNodes(IList<String> subitemsKeys, Dictionary<String, MSBuild.ProjectItem> subitems)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessDependentFileNodes(System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.String,Microsoft.Build.Evaluation.ProjectItem})\">\r\n    <summary>\r\n    Processes dependent filenodes from list of subitems. Multi level supported, but not circular dependencies.\r\n    </summary>\r\n    <param name=\"subitemsKeys\">List of sub item keys </param>\r\n    <param name=\"subitems\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ProcessDependentFileNodes(System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.String,Microsoft.Build.Evaluation.ProjectItem})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessDependentFileNodes(System.Collections.Generic.IList{System.String},System.Collections.Generic.Dictionary{System.String,Microsoft.Build.Evaluation.ProjectItem})\">\r\n    <summary>\r\n    Processes dependent filenodes from list of subitems. Multi level supported, but not circular dependencies.\r\n    </summary>\r\n    <param name=\"subitemsKeys\">List of sub item keys </param>\r\n    <param name=\"subitems\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool IsCodeFile(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsCodeFile(System.String)\">\r\n    <summary>\r\n    Determines whether a file is a code file.\r\n    </summary>\r\n    <param name=\"fileName\">Name of the file to be evaluated</param>\r\n    <returns>false by default for any fileName</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsCodeFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsCodeFile(System.String)\">\r\n    <summary>\r\n    Determines whether a file is a code file.\r\n    </summary>\r\n    <param name=\"fileName\">Name of the file to be evaluated</param>\r\n    <returns>false by default for any fileName</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual Guid[] GetConfigurationDependentPropertyPages()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationDependentPropertyPages\">\r\n    <summary>\r\n    Returns a list of Guids of the configuration dependent property pages. It is called by the GetProperty for VSHPROPID_CfgPropertyPagesCLSIDList property.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationDependentPropertyPages",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationDependentPropertyPages\">\r\n    <summary>\r\n    Returns a list of Guids of the configuration dependent property pages. It is called by the GetProperty for VSHPROPID_CfgPropertyPagesCLSIDList property.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetSccFiles(uint itemid, CALPOLESTR[] stringsOut, CADWORD[] flagsOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])\">\r\n    <summary>\r\n    This method is called to determine which files should be placed under source control for a given VSITEMID within this hierarchy.\r\n    </summary>\r\n    <param name=\"itemid\">Identifier for the VSITEMID being queried.</param>\r\n    <param name=\"stringsOut\">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>\r\n    <param name=\"flagsOut\">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSccFiles(System.UInt32,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])\">\r\n    <summary>\r\n    This method is called to determine which files should be placed under source control for a given VSITEMID within this hierarchy.\r\n    </summary>\r\n    <param name=\"itemid\">Identifier for the VSITEMID being queried.</param>\r\n    <param name=\"stringsOut\">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>\r\n    <param name=\"flagsOut\">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult CallMSBuild(string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. Does not log and uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. Does not log and uses current configuration. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ReferenceContainerNode CreateReferenceContainerNode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateReferenceContainerNode\">\r\n    <summary>\r\n    Factory method for reference container node\r\n    </summary>\r\n    <returns>ReferenceContainerNode created</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateReferenceContainerNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateReferenceContainerNode\">\r\n    <summary>\r\n    Factory method for reference container node\r\n    </summary>\r\n    <returns>ReferenceContainerNode created</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual HierarchyNode CreateFolderNodes(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNodes(System.String)\">\r\n    <summary>\r\n    Walks the subpaths of a project relative path and checks if the folder nodes hierarchy is already there, if not creates it.\r\n    </summary>\r\n    <param name=\"strPath\">Path of the folder, can be relative to project or absolute</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNodes(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNodes(System.String)\">\r\n    <summary>\r\n    Walks the subpaths of a project relative path and checks if the folder nodes hierarchy is already there, if not creates it.\r\n    </summary>\r\n    <param name=\"strPath\">Path of the folder, can be relative to project or absolute</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SetHostObject(string targetName, string taskName, object hostObject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetHostObject(System.String,System.String,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int DragOver(uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called when one or more items are dragged over the target hierarchy or hierarchy window. \r\n    </summary>\r\n    <param name=\"grfKeyState\">Current state of the keyboard keys and the mouse modifier buttons. See <seealso cref=\"T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget\"/></param>\r\n    <param name=\"itemid\">Item identifier of the drop data target over which the item is being dragged</param>\r\n    <param name=\"pdwEffect\"> On entry, reference to the value of the pdwEffect parameter of the IVsHierarchy object, identifying all effects that the hierarchy supports. \r\n    On return, the pdwEffect parameter must contain one of the effect flags that indicate the result of the drop operation. For a list of pwdEffects values, see <seealso cref=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\"/></param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragOver(System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called when one or more items are dragged over the target hierarchy or hierarchy window. \r\n    </summary>\r\n    <param name=\"grfKeyState\">Current state of the keyboard keys and the mouse modifier buttons. See <seealso cref=\"T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget\"/></param>\r\n    <param name=\"itemid\">Item identifier of the drop data target over which the item is being dragged</param>\r\n    <param name=\"pdwEffect\"> On entry, reference to the value of the pdwEffect parameter of the IVsHierarchy object, identifying all effects that the hierarchy supports. \r\n    On return, the pdwEffect parameter must contain one of the effect flags that indicate the result of the drop operation. For a list of pwdEffects values, see <seealso cref=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\"/></param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private bool PerformTargetFrameworkCheck()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.PerformTargetFrameworkCheck",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private HierarchyNode AddDependentFileNodeToNode(MSBuild.ProjectItem item, HierarchyNode parentNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNodeToNode(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Add a dependent file node to the hierarchy\r\n    </summary>\r\n    <param name=\"item\">msbuild item to add</param>\r\n    <param name=\"parentNode\">Parent Node</param>\r\n    <returns>Added node</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNodeToNode(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNodeToNode(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Add a dependent file node to the hierarchy\r\n    </summary>\r\n    <param name=\"item\">msbuild item to add</param>\r\n    <param name=\"parentNode\">Parent Node</param>\r\n    <returns>Added node</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void OnOpenItem(string fullPathToSourceFile)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnOpenItem(System.String)\">\r\n    <summary>\r\n    Called when the project opens an editor window for the given file\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnOpenItem(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnOpenItem(System.String)\">\r\n    <summary>\r\n    Called when the project opens an editor window for the given file\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgProvider(out IVsCfgProvider p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int AddComponent(VSADDCOMPOPERATION dwAddCompOperation, uint cComponents, System.IntPtr[] rgpcsdComponents, System.IntPtr hwndDialog, VSADDCOMPRESULT[] pResult)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])\">\r\n    <summary>\r\n    Add Components to the Project.\r\n    Used by the environment to add components specified by the user in the Component Selector dialog \r\n    to the specified project\r\n    </summary>\r\n    <param name=\"dwAddCompOperation\">The component operation to be performed.</param>\r\n    <param name=\"cComponents\">Number of components to be added</param>\r\n    <param name=\"rgpcsdComponents\">array of component selector data</param>\r\n    <param name=\"hwndDialog\">Handle to the component picker dialog</param>\r\n    <param name=\"pResult\">Result to be returned to the caller</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddComponent(Microsoft.VisualStudio.Shell.Interop.VSADDCOMPOPERATION,System.UInt32,System.IntPtr[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDCOMPRESULT[])\">\r\n    <summary>\r\n    Add Components to the Project.\r\n    Used by the environment to add components specified by the user in the Component Selector dialog \r\n    to the specified project\r\n    </summary>\r\n    <param name=\"dwAddCompOperation\">The component operation to be performed.</param>\r\n    <param name=\"cComponents\">Number of components to be added</param>\r\n    <param name=\"rgpcsdComponents\">array of component selector data</param>\r\n    <param name=\"hwndDialog\">Handle to the component picker dialog</param>\r\n    <param name=\"pResult\">Result to be returned to the caller</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public ProjectElement GetProjectElement(MSBuild.ProjectItem item)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectElement(Microsoft.Build.Evaluation.ProjectItem)\">\r\n    <summary>\r\n    This method returns new project element based on existing MSBuild item. It does not modify/add project/build hierarchy at all.\r\n    </summary>\r\n    <param name=\"item\">MSBuild item instance</param>\r\n    <returns>wrapping project element</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectElement(Microsoft.Build.Evaluation.ProjectItem)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectElement(Microsoft.Build.Evaluation.ProjectItem)\">\r\n    <summary>\r\n    This method returns new project element based on existing MSBuild item. It does not modify/add project/build hierarchy at all.\r\n    </summary>\r\n    <param name=\"item\">MSBuild item instance</param>\r\n    <returns>wrapping project element</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual FileNode CreateFileNode(ProjectElement item)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Create a file node based on an msbuild item.\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>FileNode added</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFileNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Create a file node based on an msbuild item.\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>FileNode added</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual IList<KeyValuePair<string, string>> GetOutputGroupNames()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupNames\">\r\n    <summary>\r\n    This is the list of output groups that the configuration object should\r\n    provide.\r\n    The first string is the name of the group.\r\n    The second string is the target name (MSBuild) for that group.\r\n    \r\n    To add/remove OutputGroups, simply override this method and edit the list.\r\n    \r\n    To get nice display names and description for your groups, override:\r\n           - GetOutputGroupDisplayName\r\n           - GetOutputGroupDescription\r\n    </summary>\r\n    <returns>List of output group name and corresponding MSBuild target</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupNames",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupNames\">\r\n    <summary>\r\n    This is the list of output groups that the configuration object should\r\n    provide.\r\n    The first string is the name of the group.\r\n    The second string is the target name (MSBuild) for that group.\r\n    \r\n    To add/remove OutputGroups, simply override this method and edit the list.\r\n    \r\n    To get nice display names and description for your groups, override:\r\n           - GetOutputGroupDisplayName\r\n           - GetOutputGroupDescription\r\n    </summary>\r\n    <returns>List of output group name and corresponding MSBuild target</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int GetClassID(out Guid clsid)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetClassID(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1506:AvoidExcessiveClassCoupling\"), System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Maintainability\", \"CA1502:AvoidExcessiveComplexity\")]\r\npublic virtual int AddItemWithSpecific(uint itemIdLoc, VSADDITEMOPERATION op, string itemName, uint filesToOpen, string[] files, IntPtr dlgOwner, uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, VSADDRESULT[] result)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])\">\r\n    <summary>\r\n    Creates new items in a project, adds existing files to a project, or causes Add Item wizards to be run\r\n    </summary>\r\n    <param name=\"itemIdLoc\"></param>\r\n    <param name=\"op\"></param>\r\n    <param name=\"itemName\"></param>\r\n    <param name=\"filesToOpen\"></param>\r\n    <param name=\"files\">Array of file names. \r\n    If dwAddItemOperation is VSADDITEMOP_CLONEFILE the first item in the array is the name of the file to clone. \r\n    If dwAddItemOperation is VSADDITEMOP_OPENDIRECTORY, the first item in the array is the directory to open. \r\n    If dwAddItemOperation is VSADDITEMOP_RUNWIZARD, the first item is the name of the wizard to run, \r\n    and the second item is the file name the user supplied (same as itemName).</param>\r\n    <param name=\"dlgOwner\"></param>\r\n    <param name=\"editorFlags\"></param>\r\n    <param name=\"editorType\"></param>\r\n    <param name=\"physicalView\"></param>\r\n    <param name=\"logicalView\"></param>\r\n    <param name=\"result\"></param>\r\n    <returns>S_OK if it succeeds </returns>\r\n    <remarks>The result array is initalized to failure.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddItemWithSpecific(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,System.UInt32,System.Guid@,System.String,System.Guid@,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])\">\r\n    <summary>\r\n    Creates new items in a project, adds existing files to a project, or causes Add Item wizards to be run\r\n    </summary>\r\n    <param name=\"itemIdLoc\"></param>\r\n    <param name=\"op\"></param>\r\n    <param name=\"itemName\"></param>\r\n    <param name=\"filesToOpen\"></param>\r\n    <param name=\"files\">Array of file names. \r\n    If dwAddItemOperation is VSADDITEMOP_CLONEFILE the first item in the array is the name of the file to clone. \r\n    If dwAddItemOperation is VSADDITEMOP_OPENDIRECTORY, the first item in the array is the directory to open. \r\n    If dwAddItemOperation is VSADDITEMOP_RUNWIZARD, the first item is the name of the wizard to run, \r\n    and the second item is the file name the user supplied (same as itemName).</param>\r\n    <param name=\"dlgOwner\"></param>\r\n    <param name=\"editorFlags\"></param>\r\n    <param name=\"editorType\"></param>\r\n    <param name=\"physicalView\"></param>\r\n    <param name=\"logicalView\"></param>\r\n    <param name=\"result\"></param>\r\n    <returns>S_OK if it succeeds </returns>\r\n    <remarks>The result array is initalized to failure.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "int IVsBuildPropertyStorage.SetItemAttribute(uint item, string attributeName, string attributeValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetItemAttribute(System.UInt32,System.String,System.String)\">\r\n    <summary>\r\n    Set a property on an item\r\n    </summary>\r\n    <param name=\"item\">ItemID</param>\r\n    <param name=\"attributeName\">Name of the property</param>\r\n    <param name=\"attributeValue\">New value for the property</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetItemAttribute(System.UInt32,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetItemAttribute(System.UInt32,System.String,System.String)\">\r\n    <summary>\r\n    Set a property on an item\r\n    </summary>\r\n    <param name=\"item\">ItemID</param>\r\n    <param name=\"attributeName\">Name of the property</param>\r\n    <param name=\"attributeValue\">New value for the property</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal string GetBaseDirectoryForAddingFiles(HierarchyNode nodeToAddFile)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetBaseDirectoryForAddingFiles(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Given a node determines what is the directory that can accept files.\r\n    If the node is a FoldeNode than it is the Url of the Folder.\r\n    If the node is a ProjectNode it is the project folder.\r\n    Otherwise (such as FileNode subitem) it delegate the resolution to the parent node.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetBaseDirectoryForAddingFiles(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetBaseDirectoryForAddingFiles(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Given a node determines what is the directory that can accept files.\r\n    If the node is a FoldeNode than it is the Url of the Folder.\r\n    If the node is a ProjectNode it is the project folder.\r\n    Otherwise (such as FileNode subitem) it delegate the resolution to the parent node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\"), SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"dlg\")]\r\npublic virtual VSADDRESULT RunWizard(HierarchyNode parentNode, string itemName, string wizardToRun, IntPtr dlgOwner)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RunWizard(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String,System.IntPtr)\">\r\n    <summary>\r\n    Executes a wizard.\r\n    </summary>\r\n    <param name=\"parentNode\">The node to which the wizard should add item(s).</param>\r\n    <param name=\"itemName\">The name of the file that the user typed in.</param>\r\n    <param name=\"wizardToRun\">The name of the wizard to run.</param>\r\n    <param name=\"dlgOwner\">The owner of the dialog box.</param>\r\n    <returns>A VSADDRESULT enum value describing success or failure.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RunWizard(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RunWizard(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String,System.IntPtr)\">\r\n    <summary>\r\n    Executes a wizard.\r\n    </summary>\r\n    <param name=\"parentNode\">The node to which the wizard should add item(s).</param>\r\n    <param name=\"itemName\">The name of the file that the user typed in.</param>\r\n    <param name=\"wizardToRun\">The name of the wizard to run.</param>\r\n    <param name=\"dlgOwner\">The owner of the dialog box.</param>\r\n    <returns>A VSADDRESULT enum value describing success or failure.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual int CompareNodes(HierarchyNode node1, HierarchyNode node2)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CompareNodes(Microsoft.VisualStudio.Project.HierarchyNode,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Used to sort nodes in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CompareNodes(Microsoft.VisualStudio.Project.HierarchyNode,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CompareNodes(Microsoft.VisualStudio.Project.HierarchyNode,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Used to sort nodes in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetFormatList(out string formatlist)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetFormatList(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual BuildSubmission DoMSBuildSubmission(BuildKind buildKind, string target, Action<MSBuildResult, string> uiThreadCallback)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DoMSBuildSubmission(Microsoft.VisualStudio.Project.BuildKind,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})\">\r\n    <summary>\r\n    Start MSBuild build submission\r\n    </summary>\r\n    If buildKind is ASync, this method starts the submission and returns. uiThreadCallback will be called on UI thread once submissions completes.\r\n    if buildKind is Sync, this method executes the submission and runs uiThreadCallback\r\n    <param name=\"buildKind\">Is it a Sync or ASync build</param>\r\n    <param name=\"target\">target to build</param>\r\n    <param name=\"projectInstance\">project instance to build; if null, this.BuildProject.CreateProjectInstance() is used to populate</param>\r\n    <param name=\"uiThreadCallback\">callback to be run UI thread </param>\r\n    <returns>A Build submission instance.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.DoMSBuildSubmission(Microsoft.VisualStudio.Project.BuildKind,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DoMSBuildSubmission(Microsoft.VisualStudio.Project.BuildKind,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})\">\r\n    <summary>\r\n    Start MSBuild build submission\r\n    </summary>\r\n    If buildKind is ASync, this method starts the submission and returns. uiThreadCallback will be called on UI thread once submissions completes.\r\n    if buildKind is Sync, this method executes the submission and runs uiThreadCallback\r\n    <param name=\"buildKind\">Is it a Sync or ASync build</param>\r\n    <param name=\"target\">target to build</param>\r\n    <param name=\"projectInstance\">project instance to build; if null, this.BuildProject.CreateProjectInstance() is used to populate</param>\r\n    <param name=\"uiThreadCallback\">callback to be run UI thread </param>\r\n    <returns>A Build submission instance.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private HierarchyNode AddFileNodeToNode(MSBuild.ProjectItem item, HierarchyNode parentNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileNodeToNode(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Add a file node to the hierarchy\r\n    </summary>\r\n    <param name=\"item\">msbuild item to add</param>\r\n    <param name=\"parentNode\">Parent Node</param>\r\n    <returns>Added node</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddFileNodeToNode(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileNodeToNode(Microsoft.Build.Evaluation.ProjectItem,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Add a file node to the hierarchy\r\n    </summary>\r\n    <param name=\"item\">msbuild item to add</param>\r\n    <param name=\"parentNode\">Parent Node</param>\r\n    <returns>Added node</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void CleanAndFlushClipboard()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CleanAndFlushClipboard\">\r\n    <summary>\r\n    Empties all the data structures added to the clipboard and flushes the clipboard.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CleanAndFlushClipboard",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CleanAndFlushClipboard\">\r\n    <summary>\r\n    Empties all the data structures added to the clipboard and flushes the clipboard.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenItem(uint itemId, ref Guid logicalView, IntPtr punkDocDataExisting, out IVsWindowFrame frame)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OpenItem(System.UInt32,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void OverwriteExistingItem(HierarchyNode existingNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OverwriteExistingItem(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Handle owerwriting of an existing item in the hierarchy.\r\n    </summary>\r\n    <param name=\"existingNode\">The node that exists.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OverwriteExistingItem(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OverwriteExistingItem(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Handle owerwriting of an existing item in the hierarchy.\r\n    </summary>\r\n    <param name=\"existingNode\">The node that exists.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void SetProjectProperty(string propertyName, string propertyValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectProperty(System.String,System.String)\">\r\n    <summary>\r\n    Set value of project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of property</param>\r\n    <param name=\"propertyValue\">Value of property</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectProperty(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectProperty(System.String,System.String)\">\r\n    <summary>\r\n    Set value of project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of property</param>\r\n    <param name=\"propertyValue\">Value of property</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int SetAggregateProjectTypeGuids(string projectTypeGuids)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetAggregateProjectTypeGuids(System.String)\">\r\n    <summary>\r\n    Set the list of GUIDs that are aggregated together to create this project.\r\n    </summary>\r\n    <param name=\"projectTypeGuids\">Semi-colon separated list of GUIDs, the last one is usually the project factory of the base project factory</param>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetAggregateProjectTypeGuids(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetAggregateProjectTypeGuids(System.String)\">\r\n    <summary>\r\n    Set the list of GUIDs that are aggregated together to create this project.\r\n    </summary>\r\n    <param name=\"projectTypeGuids\">Semi-colon separated list of GUIDs, the last one is usually the project factory of the base project factory</param>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void RenameProjectFile(string newFile)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RenameProjectFile(System.String)\">\r\n    <summary>\r\n    Renames the project file\r\n    </summary>\r\n    <param name=\"newFile\">The full path of the new project file.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RenameProjectFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RenameProjectFile(System.String)\">\r\n    <summary>\r\n    Renames the project file\r\n    </summary>\r\n    <param name=\"newFile\">The full path of the new project file.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static void CloseAllNodes(HierarchyNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CloseAllNodes(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Recusively parses the tree and closes all nodes.\r\n    </summary>\r\n    <param name=\"node\">The subtree to close.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CloseAllNodes(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CloseAllNodes(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Recusively parses the tree and closes all nodes.\r\n    </summary>\r\n    <param name=\"node\">The subtree to close.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetSccSpecialFiles(uint itemid, string sccFile, CALPOLESTR[] stringsOut, CADWORD[] flagsOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])\">\r\n    <summary>\r\n    This method is called to discover special (hidden files) associated with a given VSITEMID within this hierarchy. \r\n    </summary>\r\n    <param name=\"itemid\">Identifier for the VSITEMID being queried.</param>\r\n    <param name=\"sccFile\">One of the files associated with the node</param>\r\n    <param name=\"stringsOut\">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>\r\n    <param name=\"flagsOut\">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n    <remarks>This method is called to discover any special or hidden files associated with an item in the project hierarchy. It is called when GetSccFiles returns with the SFF_HasSpecialFiles flag set for any of the files associated with the node.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSccSpecialFiles(System.UInt32,System.String,Microsoft.VisualStudio.OLE.Interop.CALPOLESTR[],Microsoft.VisualStudio.OLE.Interop.CADWORD[])\">\r\n    <summary>\r\n    This method is called to discover special (hidden files) associated with a given VSITEMID within this hierarchy. \r\n    </summary>\r\n    <param name=\"itemid\">Identifier for the VSITEMID being queried.</param>\r\n    <param name=\"sccFile\">One of the files associated with the node</param>\r\n    <param name=\"stringsOut\">Pointer to an array of CALPOLESTR strings containing the file names for this item.</param>\r\n    <param name=\"flagsOut\">Pointer to a CADWORD array of flags stored in DWORDs indicating that some of the files have special behaviors.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n    <remarks>This method is called to discover any special or hidden files associated with an item in the project hierarchy. It is called when GetSccFiles returns with the SFF_HasSpecialFiles flag set for any of the files associated with the node.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int GetDropInfo(out uint pdwOKEffects, out IOleDataObject ppDataObject, out IDropSource ppDropSource)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)\">\r\n    <summary>\r\n    Returns information about one or more of the items being dragged\r\n    </summary>\r\n    <param name=\"pdwOKEffects\">Pointer to a DWORD value describing the effects displayed while the item is being dragged, \r\n    such as cursor icons that change during the drag-and-drop operation. \r\n    For example, if the item is dragged over an invalid target point \r\n    (such as the item's original location), the cursor icon changes to a circle with a line through it. \r\n    Similarly, if the item is dragged over a valid target point, the cursor icon changes to a file or folder.</param>\r\n    <param name=\"ppDataObject\">Pointer to the IDataObject interface on the item being dragged. \r\n    This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>\r\n    <param name=\"ppDropSource\">Pointer to the IDropSource interface of the item being dragged.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetDropInfo(System.UInt32@,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.IDropSource@)\">\r\n    <summary>\r\n    Returns information about one or more of the items being dragged\r\n    </summary>\r\n    <param name=\"pdwOKEffects\">Pointer to a DWORD value describing the effects displayed while the item is being dragged, \r\n    such as cursor icons that change during the drag-and-drop operation. \r\n    For example, if the item is dragged over an invalid target point \r\n    (such as the item's original location), the cursor icon changes to a circle with a line through it. \r\n    Similarly, if the item is dragged over a valid target point, the cursor icon changes to a file or folder.</param>\r\n    <param name=\"ppDataObject\">Pointer to the IDataObject interface on the item being dragged. \r\n    This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>\r\n    <param name=\"ppDropSource\">Pointer to the IDropSource interface of the item being dragged.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int DragEnter(IOleDataObject pDataObject, uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called as soon as the mouse drags an item over a new hierarchy or hierarchy window\r\n    </summary>\r\n    <param name=\"pDataObject\">reference to interface IDataObject of the item being dragged</param>\r\n    <param name=\"grfKeyState\">Current state of the keyboard and the mouse modifier keys. See docs for a list of possible values</param>\r\n    <param name=\"itemid\">Item identifier for the item currently being dragged</param>\r\n    <param name=\"pdwEffect\">On entry, a pointer to the current DropEffect. On return, must contain the new valid DropEffect</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragEnter(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called as soon as the mouse drags an item over a new hierarchy or hierarchy window\r\n    </summary>\r\n    <param name=\"pDataObject\">reference to interface IDataObject of the item being dragged</param>\r\n    <param name=\"grfKeyState\">Current state of the keyboard and the mouse modifier keys. See docs for a list of possible values</param>\r\n    <param name=\"itemid\">Item identifier for the item currently being dragged</param>\r\n    <param name=\"pdwEffect\">On entry, a pointer to the current DropEffect. On return, must contain the new valid DropEffect</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override void RegisterClipboardNotifications(bool register)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RegisterClipboardNotifications(System.Boolean)\">\r\n    <summary>\r\n    Register/Unregister for Clipboard events for the UiHierarchyWindow (solution explorer)\r\n    </summary>\r\n    <param name=\"register\">true for register, false for unregister</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RegisterClipboardNotifications(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RegisterClipboardNotifications(System.Boolean)\">\r\n    <summary>\r\n    Register/Unregister for Clipboard events for the UiHierarchyWindow (solution explorer)\r\n    </summary>\r\n    <param name=\"register\">true for register, false for unregister</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Handles command execution.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"nCmdexecopt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"pvaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"pvaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)\">\r\n    <summary>\r\n    Handles command execution.\r\n    </summary>\r\n    <param name=\"cmdGroup\">Unique identifier of the command group</param>\r\n    <param name=\"cmd\">The command to be executed.</param>\r\n    <param name=\"nCmdexecopt\">Values describe how the object should execute the command.</param>\r\n    <param name=\"pvaIn\">Pointer to a VARIANTARG structure containing input arguments. Can be NULL</param>\r\n    <param name=\"pvaOut\">VARIANTARG structure to receive command output. Can be NULL.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void SetProjectGuidFromProjectFile()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectGuidFromProjectFile\">\r\n    <summary>\r\n    Sets the project guid from the project file. If no guid is found a new one is created and assigne for the instance project guid.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectGuidFromProjectFile",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectGuidFromProjectFile\">\r\n    <summary>\r\n    Sets the project guid from the project file. If no guid is found a new one is created and assigne for the instance project guid.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void SaveMSBuildProjectFileAs(string newFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SaveMSBuildProjectFileAs(System.String)\">\r\n    <summary>\r\n    Saves project file related information to the new file name. It also calls msbuild API to save the project file.\r\n    It is called by the SaveAs method and the SetEditLabel before the project file rename related events are triggered. \r\n    An implementer can override this method to provide specialized semantics on how the project file is renamed in the msbuild file.\r\n    </summary>\r\n    <param name=\"newFileName\">The new full path of the project file</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SaveMSBuildProjectFileAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SaveMSBuildProjectFileAs(System.String)\">\r\n    <summary>\r\n    Saves project file related information to the new file name. It also calls msbuild API to save the project file.\r\n    It is called by the SaveAs method and the SetEditLabel before the project file rename related events are triggered. \r\n    An implementer can override this method to provide specialized semantics on how the project file is renamed in the msbuild file.\r\n    </summary>\r\n    <param name=\"newFileName\">The new full path of the project file</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override int PasteFromClipboard(HierarchyNode targetNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PasteFromClipboard(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Handle the Paste operation to a targetNode\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.PasteFromClipboard(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PasteFromClipboard(Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Handle the Paste operation to a targetNode\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void SetBuildProject(MSBuild.Project project)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildProject(Microsoft.Build.Evaluation.Project)\">\r\n    <summary>\r\n    Set the build project with the new project instance value\r\n    </summary>\r\n    <param name=\"project\">The new build project instance</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildProject(Microsoft.Build.Evaluation.Project)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildProject(Microsoft.Build.Evaluation.Project)\">\r\n    <summary>\r\n    Set the build project with the new project instance value\r\n    </summary>\r\n    <param name=\"project\">The new build project instance</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"ToMs\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\nprotected virtual ProjectElement AddFileToMsBuild(string file)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileToMsBuild(System.String)\">\r\n    <summary>\r\n    Adds a file to the msbuild project.\r\n    </summary>\r\n    <param name=\"file\">The file to be added.</param>\r\n    <returns>A ProjectElement describing the newly added file.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddFileToMsBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileToMsBuild(System.String)\">\r\n    <summary>\r\n    Adds a file to the msbuild project.\r\n    </summary>\r\n    <param name=\"file\">The file to be added.</param>\r\n    <returns>A ProjectElement describing the newly added file.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetProjectProperty(string propertyName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String)\">\r\n    <summary>\r\n    Get value of Project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of Property to retrieve</param>\r\n    <returns>Evaluated value of property.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectProperty(System.String)\">\r\n    <summary>\r\n    Get value of Project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of Property to retrieve</param>\r\n    <returns>Evaluated value of property.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected int IsFlavorDirty()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsFlavorDirty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int GetGuidProperty(int propid, out Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Gets the GUID value of the node. \r\n    </summary>\r\n    <param name=\"propid\">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>\r\n    <param name=\"guid\">The guid to return for the property.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Gets the GUID value of the node. \r\n    </summary>\r\n    <param name=\"propid\">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>\r\n    <param name=\"guid\">The guid to return for the property.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string GetAssemblyName(string config)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAssemblyName(System.String)\">\r\n    <summary>\r\n    Get the assembly name for a give configuration\r\n    </summary>\r\n    <param name=\"config\">the matching configuration in the msbuild file</param>\r\n    <returns>assembly name</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetAssemblyName(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAssemblyName(System.String)\">\r\n    <summary>\r\n    Get the assembly name for a give configuration\r\n    </summary>\r\n    <param name=\"config\">the matching configuration in the msbuild file</param>\r\n    <returns>assembly name</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"UnRegister\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Un\")]\r\nprotected void UnRegisterProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.UnRegisterProject\">\r\n    <summary>\r\n     Unregisters us from the SCC manager\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.UnRegisterProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.UnRegisterProject\">\r\n    <summary>\r\n     Unregisters us from the SCC manager\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public void ResumeMSBuild(string config, IVsOutputWindowPane output, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "int IVsBuildPropertyStorage.GetPropertyValue(string propertyName, string configName, uint storage, out string propertyValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetPropertyValue(System.String,System.String,System.UInt32,System.String@)\">\r\n    <summary>\r\n    Get the value of the property in the project file\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to remove</param>\r\n    <param name=\"configName\">Configuration for which to remove the property</param>\r\n    <param name=\"storage\">Project or user file (_PersistStorageType)</param>\r\n    <param name=\"propertyValue\">Value of the property (out parameter)</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetPropertyValue(System.String,System.String,System.UInt32,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetPropertyValue(System.String,System.String,System.UInt32,System.String@)\">\r\n    <summary>\r\n    Get the value of the property in the project file\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to remove</param>\r\n    <param name=\"configName\">Configuration for which to remove the property</param>\r\n    <param name=\"storage\">Project or user file (_PersistStorageType)</param>\r\n    <param name=\"propertyValue\">Value of the property (out parameter)</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static XmlElement WrapXmlFragment(XmlDocument document, XmlElement root, Guid flavor, string configuration, string fragment)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.WrapXmlFragment(System.Xml.XmlDocument,System.Xml.XmlElement,System.Guid,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int Drop(IOleDataObject pDataObject, uint grfKeyState, uint itemid, ref uint pdwEffect)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called when one or more items are dropped into the target hierarchy or hierarchy window when the mouse button is released.\r\n    </summary>\r\n    <param name=\"pDataObject\">Reference to the IDataObject interface on the item being dragged. This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>\r\n    <param name=\"grfKeyState\">Current state of the keyboard and the mouse modifier keys. See <seealso cref=\"T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget\"/></param>\r\n    <param name=\"itemid\">Item identifier of the drop data target over which the item is being dragged</param>\r\n    <param name=\"pdwEffect\">Visual effects associated with the drag-and drop-operation, such as a cursor, bitmap, and so on. \r\n    The value of dwEffects passed to the source object via the OnDropNotify method is the value of pdwEffects returned by the Drop method</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Drop(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.UInt32,System.UInt32@)\">\r\n    <summary>\r\n    Called when one or more items are dropped into the target hierarchy or hierarchy window when the mouse button is released.\r\n    </summary>\r\n    <param name=\"pDataObject\">Reference to the IDataObject interface on the item being dragged. This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the target hierarchy or hierarchy window.</param>\r\n    <param name=\"grfKeyState\">Current state of the keyboard and the mouse modifier keys. See <seealso cref=\"T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchyDropDataTarget\"/></param>\r\n    <param name=\"itemid\">Item identifier of the drop data target over which the item is being dragged</param>\r\n    <param name=\"pdwEffect\">Visual effects associated with the drag-and drop-operation, such as a cursor, bitmap, and so on. \r\n    The value of dwEffects passed to the source object via the OnDropNotify method is the value of pdwEffects returned by the Drop method</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private MSBuildExecution.ProjectPropertyInstance GetMsBuildProperty(string propertyName, bool resetCache)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetMsBuildProperty(System.String,System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int OnBeforeDropNotify(IOleDataObject o, uint dwEffect, out int fCancelDrop)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Allows the drag source to prompt to save unsaved items being dropped. \r\n    Notifies the source hierarchy that information dragged from it is about to be dropped on a target. \r\n    This method is called immediately after the mouse button is released on a drop. \r\n    </summary>\r\n    <param name=\"o\">Reference to the IDataObject interface on the item being dragged. \r\n    This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the hierarchy window of the new hierarchy.</param>\r\n    <param name=\"dwEffect\">Current state of the keyboard and the mouse modifier keys.</param>\r\n    <param name=\"fCancelDrop\">If true, then the drop is cancelled by the source hierarchy. If false, then the drop can continue.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnBeforeDropNotify(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.UInt32,System.Int32@)\">\r\n    <summary>\r\n    Allows the drag source to prompt to save unsaved items being dropped. \r\n    Notifies the source hierarchy that information dragged from it is about to be dropped on a target. \r\n    This method is called immediately after the mouse button is released on a drop. \r\n    </summary>\r\n    <param name=\"o\">Reference to the IDataObject interface on the item being dragged. \r\n    This data object contains the data being transferred in the drag-and-drop operation. \r\n    If the drop occurs, then this data object (item) is incorporated into the hierarchy window of the new hierarchy.</param>\r\n    <param name=\"dwEffect\">Current state of the keyboard and the mouse modifier keys.</param>\r\n    <param name=\"fCancelDrop\">If true, then the drop is cancelled by the source hierarchy. If false, then the drop can continue.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetItemContext(uint itemId, out Microsoft.VisualStudio.OLE.Interop.IServiceProvider psp)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetItemContext(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal DropEffect QueryDropEffect(DropDataType dropDataType, uint grfKeyState)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryDropEffect(Microsoft.VisualStudio.Project.DropDataType,System.UInt32)\">\r\n    <summary>\r\n    Returns the drop effect.\r\n    </summary>\r\n    <remarks>\r\n    // A directory based project should perform as follow:\r\n    \tNO MODIFIER \r\n    \t\t- COPY if not from current hierarchy, \r\n    \t\t- MOVE if from current hierarchy\r\n    \tSHIFT DRAG - MOVE\r\n    \tCTRL DRAG - COPY\r\n    \tCTRL-SHIFT DRAG - NO DROP (used for reference based projects only)\r\n    </remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.QueryDropEffect(Microsoft.VisualStudio.Project.DropDataType,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryDropEffect(Microsoft.VisualStudio.Project.DropDataType,System.UInt32)\">\r\n    <summary>\r\n    Returns the drop effect.\r\n    </summary>\r\n    <remarks>\r\n    // A directory based project should perform as follow:\r\n    \tNO MODIFIER \r\n    \t\t- COPY if not from current hierarchy, \r\n    \t\t- MOVE if from current hierarchy\r\n    \tSHIFT DRAG - MOVE\r\n    \tCTRL DRAG - COPY\r\n    \tCTRL-SHIFT DRAG - NO DROP (used for reference based projects only)\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"vsopts\")]\r\ninternal virtual void BuildAsync(uint vsopts, string config, IVsOutputWindowPane output, string target, Action<MSBuildResult, string> uiThreadCallback)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.BuildAsync(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})\">\r\n    <summary>\r\n    Do the build by invoking msbuild\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.BuildAsync(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.BuildAsync(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String,System.Action{Microsoft.VisualStudio.Project.MSBuildResult,System.String})\">\r\n    <summary>\r\n    Do the build by invoking msbuild\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private bool BuildPrelude(IVsOutputWindowPane output)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.BuildPrelude(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Helper for sharing common code between Build() and BuildAsync()\r\n    </summary>\r\n    <param name=\"output\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.BuildPrelude(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.BuildPrelude(Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane)\">\r\n    <summary>\r\n    Helper for sharing common code between Build() and BuildAsync()\r\n    </summary>\r\n    <param name=\"output\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AddItem(uint itemIdLoc, VSADDITEMOPERATION op, string itemName, uint filesToOpen, string[] files, IntPtr dlgOwner, VSADDRESULT[] result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.UInt32,System.String[],System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"XML\")]\r\nprotected void PersistXMLFragments()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PersistXMLFragments\">\r\n    <summary>\r\n    Retrieve all XML fragments that need to be saved from the flavors and store the information in msbuild.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.PersistXMLFragments",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PersistXMLFragments\">\r\n    <summary>\r\n    Retrieve all XML fragments that need to be saved from the flavors and store the information in msbuild.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void AddNewFileNodeToHierarchy(HierarchyNode parentNode, string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddNewFileNodeToHierarchy(Microsoft.VisualStudio.Project.HierarchyNode,System.String)\">\r\n    <summary>\r\n    Adds a new file node to the hierarchy.\r\n    </summary>\r\n    <param name=\"parentNode\">The parent of the new fileNode</param>\r\n    <param name=\"fileName\">The file name</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddNewFileNodeToHierarchy(Microsoft.VisualStudio.Project.HierarchyNode,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddNewFileNodeToHierarchy(Microsoft.VisualStudio.Project.HierarchyNode,System.String)\">\r\n    <summary>\r\n    Adds a new file node to the hierarchy.\r\n    </summary>\r\n    <param name=\"parentNode\">The parent of the new fileNode</param>\r\n    <param name=\"fileName\">The file name</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Globalization\", \"CA1308:NormalizeStringsToUppercase\")]\r\nprivate string GetAssemblyName(MSBuildExecution.ProjectInstance properties)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetAssemblyName(Microsoft.Build.Execution.ProjectInstance)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual bool FilterItemTypeToBeAddedToHierarchy(string itemType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.FilterItemTypeToBeAddedToHierarchy(System.String)\">\r\n    <summary>\r\n    Filter items that should not be processed as file items. Example: Folders and References.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.FilterItemTypeToBeAddedToHierarchy(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.FilterItemTypeToBeAddedToHierarchy(System.String)\">\r\n    <summary>\r\n    Filter items that should not be processed as file items. Example: Folders and References.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private bool ShowRetargetingDialog()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ShowRetargetingDialog\">\r\n    <summary>\r\n    \r\n    </summary>\r\n    <returns>\r\n    <c>true</c> if the project will be retargeted.  <c>false</c> to load project in unloaded state.\r\n    </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ShowRetargetingDialog",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ShowRetargetingDialog\">\r\n    <summary>\r\n    \r\n    </summary>\r\n    <returns>\r\n    <c>true</c> if the project will be retargeted.  <c>false</c> to load project in unloaded state.\r\n    </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int IsDirty(out int isDirty)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsDirty(System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void EndBuild(BuildSubmission submission, bool designTime, bool requiresUIThread = false)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.EndBuild(Microsoft.Build.Execution.BuildSubmission,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Lets Visual Studio know that we're done with our design-time build so others can use the build manager.\r\n    </summary>\r\n    <param name=\"submission\">The build submission that built, if any.</param>\r\n    <param name=\"designTime\">This must be the same value as the one passed to <see cref=\"M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)\"/>.</param>\r\n    <param name=\"requiresUIThread\">This must be the same value as the one passed to <see cref=\"M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)\"/>.</param>\r\n    <remarks>\r\n    This method must be called on the UI thread.\r\n    </remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.EndBuild(Microsoft.Build.Execution.BuildSubmission,System.Boolean,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.EndBuild(Microsoft.Build.Execution.BuildSubmission,System.Boolean,System.Boolean)\">\r\n    <summary>\r\n    Lets Visual Studio know that we're done with our design-time build so others can use the build manager.\r\n    </summary>\r\n    <param name=\"submission\">The build submission that built, if any.</param>\r\n    <param name=\"designTime\">This must be the same value as the one passed to <see cref=\"M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)\"/>.</param>\r\n    <param name=\"requiresUIThread\">This must be the same value as the one passed to <see cref=\"M:Microsoft.VisualStudio.Project.ProjectNode.TryBeginBuild(System.Boolean,System.Boolean)\"/>.</param>\r\n    <remarks>\r\n    This method must be called on the UI thread.\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal bool QueryEditProjectFile(bool suppressUI)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryEditProjectFile(System.Boolean)\">\r\n    <summary>\r\n    Verify if the file can be written to.\r\n    Return false if the file is read only and/or not checked out\r\n    and the user did not give permission to change it.\r\n    Note that exact behavior can also be affected based on the SCC\r\n    settings under Tools->Options.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.QueryEditProjectFile(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.QueryEditProjectFile(System.Boolean)\">\r\n    <summary>\r\n    Verify if the file can be written to.\r\n    Return false if the file is read only and/or not checked out\r\n    and the user did not give permission to change it.\r\n    Note that exact behavior can also be affected based on the SCC\r\n    settings under Tools->Options.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAutomationObject\">\r\n    <summary>\r\n    Gets the automation object for the project node.\r\n    </summary>\r\n    <returns>An instance of an EnvDTE.Project implementation object representing the automation object for the project.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetAutomationObject\">\r\n    <summary>\r\n    Gets the automation object for the project node.\r\n    </summary>\r\n    <returns>An instance of an EnvDTE.Project implementation object representing the automation object for the project.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void AddFolderFromOtherProject(string folderToAdd, HierarchyNode targetNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderFromOtherProject(System.String,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    This is used to recursively add a folder from an other project.\r\n    Note that while we copy the folder content completely, we only\r\n    add to the project items which are part of the source project.\r\n    </summary>\r\n    <param name=\"folderToAdd\">Project reference (from data object) using the format: {Guid}|project|folderPath</param>\r\n    <param name=\"targetNode\">Node to add the new folder to</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderFromOtherProject(System.String,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderFromOtherProject(System.String,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    This is used to recursively add a folder from an other project.\r\n    Note that while we copy the folder content completely, we only\r\n    add to the project items which are part of the source project.\r\n    </summary>\r\n    <param name=\"folderToAdd\">Project reference (from data object) using the format: {Guid}|project|folderPath</param>\r\n    <param name=\"targetNode\">Node to add the new folder to</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"ToMs\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\nprotected virtual ProjectElement AddFolderToMsBuild(string folder)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderToMsBuild(System.String)\">\r\n    <summary>\r\n    Adds a folder to the msbuild project.\r\n    </summary>\r\n    <param name=\"folder\">The folder to be added.</param>\r\n    <returns>A Projectelement describing the newly added folder.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderToMsBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFolderToMsBuild(System.String)\">\r\n    <summary>\r\n    Adds a folder to the msbuild project.\r\n    </summary>\r\n    <param name=\"folder\">The folder to be added.</param>\r\n    <returns>A Projectelement describing the newly added folder.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int BuildTarget(string targetName, out bool success)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.BuildTarget(System.String,System.Boolean@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual int ShowAllFiles()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ShowAllFiles\">\r\n    <summary>\r\n    Handles the shows all objects command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ShowAllFiles",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ShowAllFiles\">\r\n    <summary>\r\n    Handles the shows all objects command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void WalkSourceProjectAndAdd(IVsHierarchy sourceHierarchy, uint itemId, HierarchyNode targetNode, bool addSiblings)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.ProjectNode.WalkSourceProjectAndAdd(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Project.HierarchyNode,System.Boolean)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.WalkSourceProjectAndAdd(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Project.HierarchyNode,System.Boolean)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.ProjectNode.WalkSourceProjectAndAdd(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.Project.HierarchyNode,System.Boolean)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "int IPersistFileFormat.GetClassID(out Guid clsid)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IPersistFileFormat#GetClassID(System.Guid@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override void Remove(bool removeFromStorage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Removes items from the hierarchy. \r\n    </summary>\r\n    <devdoc>Project overwrites this.</devdoc>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Remove(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Remove(System.Boolean)\">\r\n    <summary>\r\n    Removes items from the hierarchy. \r\n    </summary>\r\n    <devdoc>Project overwrites this.</devdoc>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool NodeHasDesigner(string itemPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.NodeHasDesigner(System.String)\">\r\n    <summary>\r\n    Defines if Node has Designer. By default we do not support designers for nodes\r\n    </summary>\r\n    <param name=\"itemPath\">Path to item to query for designer support</param>\r\n    <returns>true if node has designer</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.NodeHasDesigner(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.NodeHasDesigner(System.String)\">\r\n    <summary>\r\n    Defines if Node has Designer. By default we do not support designers for nodes\r\n    </summary>\r\n    <param name=\"itemPath\">Path to item to query for designer support</param>\r\n    <returns>true if node has designer</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1030:UseEventsWhereAppropriate\")]\r\nprotected void RaiseProjectPropertyChanged(string propertyName, string oldValue, string newValue)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RaiseProjectPropertyChanged(System.String,System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual Guid[] GetConfigurationIndependentPropertyPages()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationIndependentPropertyPages\">\r\n    <summary>\r\n    List of Guids of the config independent property pages. It is called by the GetProperty for VSHPROPID_PropertyPagesCLSIDList property.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationIndependentPropertyPages",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetConfigurationIndependentPropertyPages\">\r\n    <summary>\r\n    List of Guids of the config independent property pages. It is called by the GetProperty for VSHPROPID_PropertyPagesCLSIDList property.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int RemoveItem(uint reserved, uint itemId, out int result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RemoveItem(System.UInt32,System.UInt32,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual IList<HierarchyNode> GetSelectedNodes()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSelectedNodes\">\r\n    <summary>\r\n    Gets the list of selected HierarchyNode objects\r\n    </summary>\r\n    <returns>A list of HierarchyNode objects</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetSelectedNodes",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetSelectedNodes\">\r\n    <summary>\r\n    Gets the list of selected HierarchyNode objects\r\n    </summary>\r\n    <returns>A list of HierarchyNode objects</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual HierarchyNode AddDependentFileNode(IDictionary<String, MSBuild.ProjectItem> subitems, string key)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNode(System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItem},System.String)\">\r\n    <summary>\r\n    This add methos adds the \"key\" item to the hierarchy, potentially adding other subitems in the process\r\n    This method may recurse if the parent is an other subitem\r\n    \r\n    </summary>\r\n    <param name=\"subitems\">List of subitems not yet added to the hierarchy</param>\r\n    <param name=\"key\">Key to retrieve the target item from the subitems list</param>\r\n    <returns>Newly added node</returns>\r\n    <remarks>If the parent node was found we add the dependent item to it otherwise we add the item ignoring the \"DependentUpon\" metatdata</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNode(System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItem},System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddDependentFileNode(System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItem},System.String)\">\r\n    <summary>\r\n    This add methos adds the \"key\" item to the hierarchy, potentially adding other subitems in the process\r\n    This method may recurse if the parent is an other subitem\r\n    \r\n    </summary>\r\n    <param name=\"subitems\">List of subitems not yet added to the hierarchy</param>\r\n    <param name=\"key\">Key to retrieve the target item from the subitems list</param>\r\n    <returns>Newly added node</returns>\r\n    <remarks>If the parent node was found we add the dependent item to it otherwise we add the item ignoring the \"DependentUpon\" metatdata</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void Reload()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Reload\">\r\n    <summary>\r\n    Reload project from project file\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Reload",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Reload\">\r\n    <summary>\r\n    Reload project from project file\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void SetProjectExtensions(string id, string xmlText)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectExtensions(System.String,System.String)\">\r\n    <summary>\r\n    Set the xmlText as a project extension element with the id passed.\r\n    </summary>\r\n    <param name=\"id\">The id of the project extension element.</param>\r\n    <param name=\"xmlText\">The value to set for a project extension.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectExtensions(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectExtensions(System.String,System.String)\">\r\n    <summary>\r\n    Set the xmlText as a project extension element with the id passed.\r\n    </summary>\r\n    <param name=\"id\">The id of the project extension element.</param>\r\n    <param name=\"xmlText\">The value to set for a project extension.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void ProcessFolders()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessFolders\">\r\n    <summary>\r\n    Loads folders from the project file into the hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ProcessFolders",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessFolders\">\r\n    <summary>\r\n    Loads folders from the project file into the hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void ProcessReferences()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessReferences\">\r\n    <summary>\r\n    Loads reference items from the project file into the hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ProcessReferences",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessReferences\">\r\n    <summary>\r\n    Loads reference items from the project file into the hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual HierarchyNode GetInner()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetInner\">\r\n    <summary>\r\n    Get the inner object of an aggregated hierarchy\r\n    </summary>\r\n    <returns>A HierarchyNode</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetInner",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetInner\">\r\n    <summary>\r\n    Get the inner object of an aggregated hierarchy\r\n    </summary>\r\n    <returns>A HierarchyNode</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void OnTargetFrameworkMonikerChanged(ProjectOptions options, FrameworkName currentTargetFramework, FrameworkName newTargetFramework)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnTargetFrameworkMonikerChanged(Microsoft.VisualStudio.Project.ProjectOptions,System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int GetTargetFramework(out string ppTargetFramework)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetTargetFramework(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult Build(string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String)\">\r\n    <summary>\r\n    Overloaded method. Invokes MSBuild using the default configuration and does without logging on the output window pane.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String)\">\r\n    <summary>\r\n    Overloaded method. Invokes MSBuild using the default configuration and does without logging on the output window pane.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual FolderNode CreateFolderNode(string path, ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNode(System.String,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    To support virtual folders, override this method to return your own folder nodes\r\n    </summary>\r\n    <param name=\"path\">Path to store for this folder</param>\r\n    <param name=\"element\">Element corresponding to the folder</param>\r\n    <returns>A FolderNode that can then be added to the hierarchy</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNode(System.String,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateFolderNode(System.String,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    To support virtual folders, override this method to return your own folder nodes\r\n    </summary>\r\n    <param name=\"path\">Path to store for this folder</param>\r\n    <param name=\"element\">Element corresponding to the folder</param>\r\n    <returns>A FolderNode that can then be added to the hierarchy</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCurFile(out string name, out uint formatIndex)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetCurFile(System.String@,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ICodeCompiler GetCompiler()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetCompiler\">\r\n    <summary>\r\n    Returns the Compiler associated to the project \r\n    </summary>\r\n    <returns>Null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetCompiler",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetCompiler\">\r\n    <summary>\r\n    Returns the Compiler associated to the project \r\n    </summary>\r\n    <returns>Null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void PrepareBuild(string config, bool cleanBuild)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PrepareBuild(System.String,System.Boolean)\">\r\n    <summary>\r\n    This is called from the main thread before the background build starts.\r\n     cleanBuild is not part of the vsopts, but passed down as the callpath is differently\r\n     PrepareBuild mainly creates directories and cleans house if cleanBuild is true\r\n    </summary>\r\n    <param name=\"config\"></param>\r\n    <param name=\"cleanBuild\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.PrepareBuild(System.String,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.PrepareBuild(System.String,System.Boolean)\">\r\n    <summary>\r\n    This is called from the main thread before the background build starts.\r\n     cleanBuild is not part of the vsopts, but passed down as the callpath is differently\r\n     PrepareBuild mainly creates directories and cleans house if cleanBuild is true\r\n    </summary>\r\n    <param name=\"config\"></param>\r\n    <param name=\"cleanBuild\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void SetBuildConfigurationProperties(string config)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildConfigurationProperties(System.String)\">\r\n    <summary>\r\n    Set configuration properties for a specific configuration\r\n    </summary>\r\n    <param name=\"config\">configuration name</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildConfigurationProperties(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetBuildConfigurationProperties(System.String)\">\r\n    <summary>\r\n    Set configuration properties for a specific configuration\r\n    </summary>\r\n    <param name=\"config\">configuration name</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int SetInnerProject(object innerProject)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetInnerProject(System.Object)\">\r\n    <summary>\r\n    We are always the inner most part of the aggregation\r\n    and as such we don't support setting an inner project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetInnerProject(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetInnerProject(System.Object)\">\r\n    <summary>\r\n    We are always the inner most part of the aggregation\r\n    and as such we don't support setting an inner project\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void SetConfiguration(string config)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetConfiguration(System.String)\">\r\n    <summary>\r\n    Set the configuration property in MSBuild.\r\n    This does not get persisted and is used to evaluate msbuild conditions\r\n    which are based on the $(Configuration) property.\r\n    </summary>\r\n    <param name=\"config\">Configuration name</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetConfiguration(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetConfiguration(System.String)\">\r\n    <summary>\r\n    Set the configuration property in MSBuild.\r\n    This does not get persisted and is used to evaluate msbuild conditions\r\n    which are based on the $(Configuration) property.\r\n    </summary>\r\n    <param name=\"config\">Configuration name</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int IsDocumentInProject(string mkDoc, out int found, VSDOCUMENTPRIORITY[] pri, out uint itemId)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsDocumentInProject(System.String,System.Int32@,Microsoft.VisualStudio.Shell.Interop.VSDOCUMENTPRIORITY[],System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void LoadNonBuildInformation()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.LoadNonBuildInformation\">\r\n    <summary>\r\n    For flavored projects which implement IPersistXMLFragment, load the information now\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.LoadNonBuildInformation",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.LoadNonBuildInformation\">\r\n    <summary>\r\n    For flavored projects which implement IPersistXMLFragment, load the information now\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override int CutToClipboard()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CutToClipboard\">\r\n    <summary>\r\n    Handle the Cut operation to the clipboard\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CutToClipboard",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CutToClipboard\">\r\n    <summary>\r\n    Handle the Cut operation to the clipboard\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual HierarchyNode AddNodeIfTargetExistInStorage(HierarchyNode parentNode, string name, string targetPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddNodeIfTargetExistInStorage(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String)\">\r\n    <summary>\r\n    Add an existing item (file/folder) to the project if it already exist in our storage.\r\n    </summary>\r\n    <param name=\"parentNode\">Node to that this item to</param>\r\n    <param name=\"name\">Name of the item being added</param>\r\n    <param name=\"targetPath\">Path of the item being added</param>\r\n    <returns>Node that was added</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddNodeIfTargetExistInStorage(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddNodeIfTargetExistInStorage(Microsoft.VisualStudio.Project.HierarchyNode,System.String,System.String)\">\r\n    <summary>\r\n    Add an existing item (file/folder) to the project if it already exist in our storage.\r\n    </summary>\r\n    <param name=\"parentNode\">Node to that this item to</param>\r\n    <param name=\"name\">Name of the item being added</param>\r\n    <param name=\"targetPath\">Path of the item being added</param>\r\n    <returns>Node that was added</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "int IVsBuildPropertyStorage.SetPropertyValue(string propertyName, string configName, uint storage, string propertyValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetPropertyValue(System.String,System.String,System.UInt32,System.String)\">\r\n    <summary>\r\n    Set a project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to set</param>\r\n    <param name=\"configName\">Configuration for which to set the property</param>\r\n    <param name=\"storage\">Project file or user file (_PersistStorageType)</param>\r\n    <param name=\"propertyValue\">New value for that property</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetPropertyValue(System.String,System.String,System.UInt32,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#SetPropertyValue(System.String,System.String,System.UInt32,System.String)\">\r\n    <summary>\r\n    Set a project property\r\n    </summary>\r\n    <param name=\"propertyName\">Name of the property to set</param>\r\n    <param name=\"configName\">Configuration for which to set the property</param>\r\n    <param name=\"storage\">Project file or user file (_PersistStorageType)</param>\r\n    <param name=\"propertyValue\">New value for that property</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "int IVsBuildPropertyStorage.GetItemAttribute(uint item, string attributeName, out string attributeValue)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetItemAttribute(System.UInt32,System.String,System.String@)\">\r\n    <summary>\r\n    Get the property of an item\r\n    </summary>\r\n    <param name=\"item\">ItemID</param>\r\n    <param name=\"attributeName\">Name of the property</param>\r\n    <param name=\"attributeValue\">Value of the property (out parameter)</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetItemAttribute(System.UInt32,System.String,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Shell#Interop#IVsBuildPropertyStorage#GetItemAttribute(System.UInt32,System.String,System.String@)\">\r\n    <summary>\r\n    Get the property of an item\r\n    </summary>\r\n    <param name=\"item\">ItemID</param>\r\n    <param name=\"attributeName\">Name of the property</param>\r\n    <param name=\"attributeValue\">Value of the property (out parameter)</param>\r\n    <returns>HRESULT</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void RemoveBuildDependency(IVsBuildDependency dependency)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RemoveBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int UpgradeProject(uint grfUpgradeFlags)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.UpgradeProject(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"iid\")]\r\npublic virtual void Load(string fileName, string location, string name, uint flags, ref Guid iidProject, out int canceled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Load(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Int32@)\">\r\n    <summary>\r\n    Loads a project file. Called from the factory CreateProject to load the project.\r\n    </summary>\r\n    <param name=\"fileName\">File name of the project that will be created. </param>\r\n    <param name=\"location\">Location where the project will be created.</param>\r\n    <param name=\"name\">If applicable, the name of the template to use when cloning a new project.</param>\r\n    <param name=\"flags\">Set of flag values taken from the VSCREATEPROJFLAGS enumeration.</param>\r\n    <param name=\"iidProject\">Identifier of the interface that the caller wants returned. </param>\r\n    <param name=\"canceled\">An out parameter specifying if the project creation was canceled</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Load(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Load(System.String,System.String,System.String,System.UInt32,System.Guid@,System.Int32@)\">\r\n    <summary>\r\n    Loads a project file. Called from the factory CreateProject to load the project.\r\n    </summary>\r\n    <param name=\"fileName\">File name of the project that will be created. </param>\r\n    <param name=\"location\">Location where the project will be created.</param>\r\n    <param name=\"name\">If applicable, the name of the template to use when cloning a new project.</param>\r\n    <param name=\"flags\">Set of flag values taken from the VSCREATEPROJFLAGS enumeration.</param>\r\n    <param name=\"iidProject\">Identifier of the interface that the caller wants returned. </param>\r\n    <param name=\"canceled\">An out parameter specifying if the project creation was canceled</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual bool IsEmbeddedResource(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsEmbeddedResource(System.String)\">\r\n    <summary>\r\n    Determines whether the given file is a resource file (resx file).\r\n    </summary>\r\n    <param name=\"fileName\">Name of the file to be evaluated.</param>\r\n    <returns>true if the file is a resx file, otherwise false.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsEmbeddedResource(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsEmbeddedResource(System.String)\">\r\n    <summary>\r\n    Determines whether the given file is a resource file (resx file).\r\n    </summary>\r\n    <param name=\"fileName\">Name of the file to be evaluated.</param>\r\n    <returns>true if the file is a resx file, otherwise false.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal NestedProjectNode GetNestedProjectForHierarchy(IVsHierarchy hierarchy)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetNestedProjectForHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Checks whether a hierarchy is a nested project.\r\n    </summary>\r\n    <param name=\"hierarchy\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetNestedProjectForHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetNestedProjectForHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)\">\r\n    <summary>\r\n    Checks whether a hierarchy is a nested project.\r\n    </summary>\r\n    <param name=\"hierarchy\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\npublic ProjectElement CreateMsBuildFileItem(string file, string itemType)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateMsBuildFileItem(System.String,System.String)\">\r\n    <summary>\r\n    This method return new project element, and add new MSBuild item to the project/build hierarchy\r\n    </summary>\r\n    <param name=\"file\">file name</param>\r\n    <param name=\"itemType\">MSBuild item type</param>\r\n    <returns>new project element</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateMsBuildFileItem(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateMsBuildFileItem(System.String,System.String)\">\r\n    <summary>\r\n    This method return new project element, and add new MSBuild item to the project/build hierarchy\r\n    </summary>\r\n    <param name=\"file\">file name</param>\r\n    <param name=\"itemType\">MSBuild item type</param>\r\n    <returns>new project element</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetMkDocument(uint itemId, out string mkDoc)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument(System.UInt32,System.String@)\">\r\n    <summary>\r\n    Callback from the additem dialog. Deals with adding new and existing items\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument(System.UInt32,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetMkDocument(System.UInt32,System.String@)\">\r\n    <summary>\r\n    Callback from the additem dialog. Deals with adding new and existing items\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void InitializeProjectProperties()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitializeProjectProperties\">\r\n    <summary>\r\n    Initialize common project properties with default value if they are empty\r\n    </summary>\r\n    <remarks>The following common project properties are defaulted to projectName (if empty):\r\n       AssemblyName, Name and RootNamespace.\r\n    If the project filename is not set then no properties are set</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.InitializeProjectProperties",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InitializeProjectProperties\">\r\n    <summary>\r\n    Initialize common project properties with default value if they are empty\r\n    </summary>\r\n    <remarks>The following common project properties are defaulted to projectName (if empty):\r\n       AssemblyName, Name and RootNamespace.\r\n    If the project filename is not set then no properties are set</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override DocumentManager GetDocumentManager()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetDocumentManager\">\r\n    <summary>\r\n    Returns a specific Document manager to handle opening and closing of the Project(Application) Designer if projectdesigner is supported.\r\n    </summary>\r\n    <returns>Document manager object</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetDocumentManager",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetDocumentManager\">\r\n    <summary>\r\n    Returns a specific Document manager to handle opening and closing of the Project(Application) Designer if projectdesigner is supported.\r\n    </summary>\r\n    <returns>Document manager object</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"catid\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"CATID\")]\r\nprotected void AddCATIDMapping(Type type, Guid catid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddCATIDMapping(System.Type,System.Guid)\">\r\n    <summary>\r\n    This is used to specify a CATID corresponding to a BrowseObject or an ExtObject.\r\n    The CATID can be any GUID you choose. For types which are your owns, you could use\r\n    their type GUID, while for other types (such as those provided in the MPF) you should\r\n    provide a different GUID.\r\n    </summary>\r\n    <param name=\"type\">Type of the extensible object</param>\r\n    <param name=\"catid\">GUID that extender can use to uniquely identify your object type</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddCATIDMapping(System.Type,System.Guid)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddCATIDMapping(System.Type,System.Guid)\">\r\n    <summary>\r\n    This is used to specify a CATID corresponding to a BrowseObject or an ExtObject.\r\n    The CATID can be any GUID you choose. For types which are your owns, you could use\r\n    their type GUID, while for other types (such as those provided in the MPF) you should\r\n    provide a different GUID.\r\n    </summary>\r\n    <param name=\"type\">Type of the extensible object</param>\r\n    <param name=\"catid\">GUID that extender can use to uniquely identify your object type</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string GetProjectPropertyUnevaluated(string propertyName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectPropertyUnevaluated(System.String)\">\r\n    <summary>\r\n    Gets the unevaluated value of a project property.\r\n    </summary>\r\n    <param name=\"propertyName\">The name of the property to retrieve.</param>\r\n    <returns>Unevaluated value of the property.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectPropertyUnevaluated(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectPropertyUnevaluated(System.String)\">\r\n    <summary>\r\n    Gets the unevaluated value of a project property.\r\n    </summary>\r\n    <param name=\"propertyName\">The name of the property to retrieve.</param>\r\n    <returns>Unevaluated value of the property.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual DependentFileNode CreateDependentFileNode(ProjectElement item)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Create dependent file node based on an msbuild item\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>dependent file node</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Create dependent file node based on an msbuild item\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>dependent file node</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal MSBuildConstruction.ProjectPropertyGroupElement ClonePropertyGroup(MSBuildConstruction.ProjectPropertyGroupElement group)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ClonePropertyGroup(Microsoft.Build.Construction.ProjectPropertyGroupElement)\">\r\n    <summary>\r\n    For internal use only.\r\n    This creates a copy of an existing configuration and add it to the project.\r\n    Caller should change the condition on the PropertyGroup.\r\n    If derived class want to accomplish this, they should call ConfigProvider.AddCfgsOfCfgName()\r\n    It is expected that in the future MSBuild will have support for this so we don't have to\r\n    do it manually.\r\n    </summary>\r\n    <param name=\"group\">PropertyGroup to clone</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ClonePropertyGroup(Microsoft.Build.Construction.ProjectPropertyGroupElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ClonePropertyGroup(Microsoft.Build.Construction.ProjectPropertyGroupElement)\">\r\n    <summary>\r\n    For internal use only.\r\n    This creates a copy of an existing configuration and add it to the project.\r\n    Caller should change the condition on the PropertyGroup.\r\n    If derived class want to accomplish this, they should call ConfigProvider.AddCfgsOfCfgName()\r\n    It is expected that in the future MSBuild will have support for this so we don't have to\r\n    do it manually.\r\n    </summary>\r\n    <param name=\"group\">PropertyGroup to clone</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal DropDataType ProcessSelectionDataObject(IOleDataObject dataObject, HierarchyNode targetNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessSelectionDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Process dataobject from Drag/Drop/Cut/Copy/Paste operation\r\n    </summary>\r\n    <remarks>The targetNode is set if the method is called from a drop operation, otherwise it is null</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ProcessSelectionDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ProcessSelectionDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Process dataobject from Drag/Drop/Cut/Copy/Paste operation\r\n    </summary>\r\n    <remarks>The targetNode is set if the method is called from a drop operation, otherwise it is null</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual int CanOverwriteExistingItem(string originalFileName, string computedNewFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanOverwriteExistingItem(System.String,System.String)\">\r\n    <summary>\r\n    Determines whether an item can be owerwritten in the hierarchy.\r\n    </summary>\r\n    <param name=\"originalFileName\">The orginal filname.</param>\r\n    <param name=\"computedNewFileName\">The computed new file name, that will be copied to the project directory or into the folder .</param>\r\n    <returns>S_OK for success, or an error message</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CanOverwriteExistingItem(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanOverwriteExistingItem(System.String,System.String)\">\r\n    <summary>\r\n    Determines whether an item can be owerwritten in the hierarchy.\r\n    </summary>\r\n    <param name=\"originalFileName\">The orginal filname.</param>\r\n    <param name=\"computedNewFileName\">The computed new file name, that will be copied to the project directory or into the folder .</param>\r\n    <returns>S_OK for success, or an error message</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private string GetOutputPath(MSBuildExecution.ProjectInstance properties)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputPath(Microsoft.Build.Execution.ProjectInstance)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult CallMSBuild(string config, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,System.String)\">\r\n    <summary>\r\n    Overloaded method. Calls MSBuild if it is not suspended. Does not log on the outputwindow. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,System.String)\">\r\n    <summary>\r\n    Overloaded method. Calls MSBuild if it is not suspended. Does not log on the outputwindow. If it is suspended then it will remeber to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void CleanupSelectionDataObject(bool dropped, bool cut, bool moved)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CleanupSelectionDataObject(System.Boolean,System.Boolean,System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int OnAggregationComplete()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnAggregationComplete\">\r\n    <summary>\r\n    This is called after the project is done initializing the different layer of the aggregations\r\n    </summary>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnAggregationComplete",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnAggregationComplete\">\r\n    <summary>\r\n    This is called after the project is done initializing the different layer of the aggregations\r\n    </summary>\r\n    <returns>HResult</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetEditLabel(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Renames the project node.\r\n    </summary>\r\n    <param name=\"label\">The new name</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Renames the project node.\r\n    </summary>\r\n    <param name=\"label\">The new name</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"vsopts\")]\r\npublic virtual MSBuildResult Build(uint vsopts, string config, IVsOutputWindowPane output, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Do the build by invoking msbuild\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Do the build by invoking msbuild\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int DragLeave()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragLeave\">\r\n    <summary>\r\n    Called when one or more items are dragged out of the hierarchy or hierarchy window, or when the drag-and-drop operation is cancelled or completed.\r\n    </summary>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.DragLeave",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.DragLeave\">\r\n    <summary>\r\n    Called when one or more items are dragged out of the hierarchy or hierarchy window, or when the drag-and-drop operation is cancelled or completed.\r\n    </summary>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void Initialize()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Initialize\">\r\n    <summary>\r\n    Initialize projectNode\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Initialize",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Initialize\">\r\n    <summary>\r\n    Initialize projectNode\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private bool SetSccSettings(string sccProjectName, string sccLocalPath, string sccAuxPath, string sccProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSccSettings(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    Updates our scc project settings. \r\n    </summary>\r\n    <param name=\"sccProjectName\">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>\r\n    <param name=\"sccLocalPath\">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>\r\n    <param name=\"sccAuxPath\">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>\r\n    <param name=\"sccProvider\">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>\r\n    <returns>Returns true if something changed.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetSccSettings(System.String,System.String,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSccSettings(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    Updates our scc project settings. \r\n    </summary>\r\n    <param name=\"sccProjectName\">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>\r\n    <param name=\"sccLocalPath\">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>\r\n    <param name=\"sccAuxPath\">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>\r\n    <param name=\"sccProvider\">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>\r\n    <returns>Returns true if something changed.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddFileFromTemplate(string source, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Called to add a file to the project from a template.\r\n    Override to do it yourself if you want to customize the file\r\n    </summary>\r\n    <param name=\"source\">Full path of template file</param>\r\n    <param name=\"target\">Full path of file once added to the project</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddFileFromTemplate(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFileFromTemplate(System.String,System.String)\">\r\n    <summary>\r\n    Called to add a file to the project from a template.\r\n    Override to do it yourself if you want to customize the file\r\n    </summary>\r\n    <param name=\"source\">Full path of template file</param>\r\n    <param name=\"target\">Full path of file once added to the project</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void FlushBuildLoggerContent()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.FlushBuildLoggerContent\">\r\n    <summary>\r\n    Flush any remaining content from build logger.\r\n    This method is called as part of the callback method passed to the buildsubmission during async build\r\n    so that results can be printed the the build is finished.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.FlushBuildLoggerContent",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.FlushBuildLoggerContent\">\r\n    <summary>\r\n    Flush any remaining content from build logger.\r\n    This method is called as part of the callback method passed to the buildsubmission during async build\r\n    so that results can be printed the the build is finished.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetProperty(int propid, object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProperty(System.Int32,System.Object)\">\r\n    <summary>\r\n    Sets the properties for the project node.\r\n    </summary>\r\n    <param name=\"propid\">Identifier of the hierarchy property. For a list of propid values, <see cref=\"T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID\"/> </param>\r\n    <param name=\"value\">The value to set. </param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetProperty(System.Int32,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProperty(System.Int32,System.Object)\">\r\n    <summary>\r\n    Sets the properties for the project node.\r\n    </summary>\r\n    <param name=\"propid\">Identifier of the hierarchy property. For a list of propid values, <see cref=\"T:Microsoft.VisualStudio.Shell.Interop.__VSHPROPID\"/> </param>\r\n    <param name=\"value\">The value to set. </param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Save(string fileToBeSaved, int remember, uint formatIndex)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Save(System.String,System.Int32,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual ProjectOptions CreateProjectOptions()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateProjectOptions\">\r\n    <summary>\r\n    Override this method if you have your own project specific\r\n    subclass of ProjectOptions\r\n    </summary>\r\n    <returns>This method returns a new instance of the ProjectOptions base class.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateProjectOptions",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateProjectOptions\">\r\n    <summary>\r\n    Override this method if you have your own project specific\r\n    subclass of ProjectOptions\r\n    </summary>\r\n    <returns>This method returns a new instance of the ProjectOptions base class.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult CallMSBuild(string config, IVsOutputWindowPane output, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. If it is suspended then it will remember to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CallMSBuild(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Calls MSBuild if it is not suspended. If it is suspended then it will remember to call when msbuild is resumed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int SetSccLocation(string sccProjectName, string sccAuxPath, string sccLocalPath, string sccProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSccLocation(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    This method is called by the source control portion of the environment when a project is initially added to source control, or to change some of the project's settings.\r\n    </summary>\r\n    <param name=\"sccProjectName\">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>\r\n    <param name=\"sccLocalPath\">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>\r\n    <param name=\"sccAuxPath\">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>\r\n    <param name=\"sccProvider\">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetSccLocation(System.String,System.String,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetSccLocation(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    This method is called by the source control portion of the environment when a project is initially added to source control, or to change some of the project's settings.\r\n    </summary>\r\n    <param name=\"sccProjectName\">String, opaque to the project, that identifies the project location on the server. Persist this string in the project file. </param>\r\n    <param name=\"sccLocalPath\">String, opaque to the project, that identifies the path to the server. Persist this string in the project file.</param>\r\n    <param name=\"sccAuxPath\">String, opaque to the project, that identifies the local path to the project. Persist this string in the project file.</param>\r\n    <param name=\"sccProvider\">String, opaque to the project, that identifies the source control package. Persist this string in the project file.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public MSBuildResult Build(string config, IVsOutputWindowPane output, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Overloaded method to invoke MSBuild\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Build(System.String,Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane,System.String)\">\r\n    <summary>\r\n    Overloaded method to invoke MSBuild\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual DependentFileNode CreateDependentFileNode(string file)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(System.String)\">\r\n    <summary>\r\n    Create a dependent file node based on a string.\r\n    </summary>\r\n    <param name=\"file\">filename of the new dependent file node</param>\r\n    <returns>Dependent node added</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateDependentFileNode(System.String)\">\r\n    <summary>\r\n    Create a dependent file node based on a string.\r\n    </summary>\r\n    <param name=\"file\">filename of the new dependent file node</param>\r\n    <returns>Dependent node added</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual int AddWebReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddWebReference\">\r\n    <summary>\r\n    Handles the Add web reference command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddWebReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddWebReference\">\r\n    <summary>\r\n    Handles the Add web reference command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override void UpdateSccStateIcons()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.UpdateSccStateIcons\">\r\n    <summary>\r\n    Recursevily walks the hierarchy nodes and redraws the state icons\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.UpdateSccStateIcons",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.UpdateSccStateIcons\">\r\n    <summary>\r\n    Recursevily walks the hierarchy nodes and redraws the state icons\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal MSBuildConstruction.ProjectExtensionsElement GetProjectExtensions()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectExtensions\">\r\n    <summary>\r\n    Get the project extensions\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectExtensions",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetProjectExtensions\">\r\n    <summary>\r\n    Get the project extensions\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual bool IsCurrentStateASuppressCommandsMode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsCurrentStateASuppressCommandsMode\">\r\n    <summary>\r\n    Defines whther the current mode of the project is in a supress command mode.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.IsCurrentStateASuppressCommandsMode",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.IsCurrentStateASuppressCommandsMode\">\r\n    <summary>\r\n    Defines whther the current mode of the project is in a supress command mode.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int AddProjectReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddProjectReference\">\r\n    <summary>\r\n    Override this method if you want to modify the behavior of the Add Reference dialog\r\n    By example you could change which pages are visible and which is visible by default.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddProjectReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddProjectReference\">\r\n    <summary>\r\n    Override this method if you want to modify the behavior of the Add Reference dialog\r\n    By example you could change which pages are visible and which is visible by default.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual int SaveAs(string newFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project file on a new name.\r\n    </summary>\r\n    <param name=\"newFileName\">The new name of the project file.</param>\r\n    <returns>Success value or an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SaveAs(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SaveAs(System.String)\">\r\n    <summary>\r\n    Saves the project file on a new name.\r\n    </summary>\r\n    <param name=\"newFileName\">The new name of the project file.</param>\r\n    <returns>Success value or an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual bool CanTargetNodeAcceptDrop(uint itemId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanTargetNodeAcceptDrop(System.UInt32)\">\r\n    <summary>\r\n    Determines if a node can accept drop opertaion.\r\n    </summary>\r\n    <param name=\"itemid\">The id of the node.</param>\r\n    <returns>true if the node acceots drag operation.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CanTargetNodeAcceptDrop(System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanTargetNodeAcceptDrop(System.UInt32)\">\r\n    <summary>\r\n    Determines if a node can accept drop opertaion.\r\n    </summary>\r\n    <param name=\"itemid\">The id of the node.</param>\r\n    <returns>true if the node acceots drag operation.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\nprotected virtual MSBuildResult InvokeMsBuild(string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InvokeMsBuild(System.String)\">\r\n    <summary>\r\n    This execute an MSBuild target for a design-time build.\r\n    </summary>\r\n    <param name=\"target\">Name of the MSBuild target to execute</param>\r\n    <returns>Result from executing the target (success/failure)</returns>\r\n    <remarks>\r\n    If you depend on the items/properties generated by the target\r\n    you should be aware that any call to BuildTarget on any project\r\n    will reset the list of generated items/properties\r\n    </remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.InvokeMsBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.InvokeMsBuild(System.String)\">\r\n    <summary>\r\n    This execute an MSBuild target for a design-time build.\r\n    </summary>\r\n    <param name=\"target\">Name of the MSBuild target to execute</param>\r\n    <returns>Result from executing the target (success/failure)</returns>\r\n    <remarks>\r\n    If you depend on the items/properties generated by the target\r\n    you should be aware that any call to BuildTarget on any project\r\n    will reset the list of generated items/properties\r\n    </remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual Guid[] GetPriorityProjectDesignerPages()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetPriorityProjectDesignerPages\">\r\n    <summary>\r\n    An ordered list of guids of the prefered property pages. See <see cref=\"!:__VSHPROPID.VSHPROPID_PriorityPropertyPagesCLSIDList\"/>\r\n    </summary>\r\n    <returns>An array of guids.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetPriorityProjectDesignerPages",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetPriorityProjectDesignerPages\">\r\n    <summary>\r\n    An ordered list of guids of the prefered property pages. See <see cref=\"!:__VSHPROPID.VSHPROPID_PriorityPropertyPagesCLSIDList\"/>\r\n    </summary>\r\n    <returns>An array of guids.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private HierarchyNode AddIndependentFileNode(MSBuild.ProjectItem item)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddIndependentFileNode(Microsoft.Build.Evaluation.ProjectItem)\">\r\n    <summary>\r\n    Add an item to the hierarchy based on the item path\r\n    </summary>\r\n    <param name=\"item\">Item to add</param>\r\n    <returns>Added node</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddIndependentFileNode(Microsoft.Build.Evaluation.ProjectItem)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddIndependentFileNode(Microsoft.Build.Evaluation.ProjectItem)\">\r\n    <summary>\r\n    Add an item to the hierarchy based on the item path\r\n    </summary>\r\n    <param name=\"item\">Item to add</param>\r\n    <returns>Added node</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IReferenceContainer GetReferenceContainer()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetReferenceContainer\">\r\n    <summary>\r\n    Returns the reference container node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetReferenceContainer",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetReferenceContainer\">\r\n    <summary>\r\n    Returns the reference container node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int OpenDependency(string szDependencyCanonicalName, out IVsDependency dependency)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OpenDependency(System.String,Microsoft.VisualStudio.Shell.Interop.IVsDependency@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual string GetOutputGroupDisplayName(string canonicalName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupDisplayName(System.String)\">\r\n    <summary>\r\n    Get the display name of the given output group.\r\n    </summary>\r\n    <param name=\"canonicalName\">Canonical name of the output group</param>\r\n    <returns>Display name</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupDisplayName(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetOutputGroupDisplayName(System.String)\">\r\n    <summary>\r\n    Get the display name of the given output group.\r\n    </summary>\r\n    <param name=\"canonicalName\">Canonical name of the output group</param>\r\n    <returns>Display name</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int CancelBatchEdit()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CancelBatchEdit",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void ResumeMSBuild(string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private IntPtr PackageSelectionData(StringBuilder sb, bool addEndFormatDelimiter)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.PackageSelectionData(System.Text.StringBuilder,System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int SetGuidProperty(int propid, ref Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Sets Guid properties for the project node.\r\n    </summary>\r\n    <param name=\"propid\">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>\r\n    <param name=\"guid\">The guid value to set.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Sets Guid properties for the project node.\r\n    </summary>\r\n    <param name=\"propid\">A __VSHPROPID or __VSHPROPID2 value of the guid property</param>\r\n    <param name=\"guid\">The guid value to set.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Scc\")]\r\nprotected void RegisterSccProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RegisterSccProject\">\r\n    <summary>\r\n    Register the project with the Scc manager.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.RegisterSccProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.RegisterSccProject\">\r\n    <summary>\r\n    Register the project with the Scc manager.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private string GetComponentPickerDirectories()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetComponentPickerDirectories",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void SetupProjectGlobalPropertiesThatAllProjectSystemsMustSet()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetupProjectGlobalPropertiesThatAllProjectSystemsMustSet\">\r\n    <summary>\r\n    Setup the global properties for project instance.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetupProjectGlobalPropertiesThatAllProjectSystemsMustSet",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetupProjectGlobalPropertiesThatAllProjectSystemsMustSet\">\r\n    <summary>\r\n    Setup the global properties for project instance.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int TransferItem(string oldMkDoc, string newMkDoc, IVsWindowFrame frame)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)\">\r\n    <summary>\r\n    Implements IVsProject3::TransferItem\r\n    This function is called when an open miscellaneous file is being transferred\r\n    to our project. The sequence is for the shell to call AddItemWithSpecific and\r\n    then use TransferItem to transfer the open document to our project.\r\n    </summary>\r\n    <param name=\"oldMkDoc\">Old document name</param>\r\n    <param name=\"newMkDoc\">New document name</param>\r\n    <param name=\"frame\">Optional frame if the document is open</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.TransferItem(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame)\">\r\n    <summary>\r\n    Implements IVsProject3::TransferItem\r\n    This function is called when an open miscellaneous file is being transferred\r\n    to our project. The sequence is for the shell to call AddItemWithSpecific and\r\n    then use TransferItem to transfer the open document to our project.\r\n    </summary>\r\n    <param name=\"oldMkDoc\">Old document name</param>\r\n    <param name=\"newMkDoc\">New document name</param>\r\n    <param name=\"frame\">Optional frame if the document is open</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int EnumDependencies(out IVsEnumDependencies enumDependencies)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.EnumDependencies(Microsoft.VisualStudio.Shell.Interop.IVsEnumDependencies@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void ResumeMSBuild(string config, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.ResumeMSBuild(System.String,System.String)\">\r\n    <summary>\r\n    Resumes MSBuild.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetFile(int fileId, uint flags, out uint itemid, out string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)\">\r\n    <summary>\r\n    Allows you to query the project for special files and optionally create them. \r\n    </summary>\r\n    <param name=\"fileId\">__PSFFILEID of the file</param>\r\n    <param name=\"flags\">__PSFFLAGS flags for the file</param>\r\n    <param name=\"itemid\">The itemid of the node in the hierarchy</param>\r\n    <param name=\"fileName\">The file name of the special file.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetFile(System.Int32,System.UInt32,System.UInt32@,System.String@)\">\r\n    <summary>\r\n    Allows you to query the project for special files and optionally create them. \r\n    </summary>\r\n    <param name=\"fileId\">__PSFFILEID of the file</param>\r\n    <param name=\"flags\">__PSFFLAGS flags for the file</param>\r\n    <param name=\"itemid\">The itemid of the node in the hierarchy</param>\r\n    <param name=\"fileName\">The file name of the special file.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void OnAfterProjectOpen(object sender, AfterProjectFileOpenedEventArgs e)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnAfterProjectOpen(System.Object,Microsoft.VisualStudio.Project.AfterProjectFileOpenedEventArgs)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal bool AddFilesFromProjectReferences(HierarchyNode targetNode, string[] projectReferences)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFilesFromProjectReferences(Microsoft.VisualStudio.Project.HierarchyNode,System.String[])\">\r\n    <summary>\r\n    Moves files from one part of our project to another.\r\n    </summary>\r\n    <param name=\"targetNode\">the targetHandler node</param>\r\n    <param name=\"projectReferences\">List of projectref string</param>\r\n    <returns>true if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.AddFilesFromProjectReferences(Microsoft.VisualStudio.Project.HierarchyNode,System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.AddFilesFromProjectReferences(Microsoft.VisualStudio.Project.HierarchyNode,System.String[])\">\r\n    <summary>\r\n    Moves files from one part of our project to another.\r\n    </summary>\r\n    <param name=\"targetNode\">the targetHandler node</param>\r\n    <param name=\"projectReferences\">List of projectref string</param>\r\n    <returns>true if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OnClear(int wasCut)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnClear(System.Int32)\">\r\n    <summary>\r\n    Called when your cut/copied operation is canceled\r\n    </summary>\r\n    <param name=\"wasCut\">This flag informs the source that the Cut method was called (true), \r\n    rather than Copy (false), so the source knows whether to \"un-cut-highlight\" the items that were cut.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnClear(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnClear(System.Int32)\">\r\n    <summary>\r\n    Called when your cut/copied operation is canceled\r\n    </summary>\r\n    <param name=\"wasCut\">This flag informs the source that the Cut method was called (true), \r\n    rather than Copy (false), so the source knows whether to \"un-cut-highlight\" the items that were cut.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenItemWithSpecific(uint itemId, uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame frame)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OpenItemWithSpecific(System.UInt32,System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public void SetProjectFileDirty(bool value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectFileDirty(System.Boolean)\">\r\n    <summary>\r\n    Set dirty state of project\r\n    </summary>\r\n    <param name=\"value\">boolean value indicating dirty state</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectFileDirty(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.SetProjectFileDirty(System.Boolean)\">\r\n    <summary>\r\n    Set dirty state of project\r\n    </summary>\r\n    <param name=\"value\">boolean value indicating dirty state</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual int CleanProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CleanProject\">\r\n    <summary>\r\n    Handles the clean project command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CleanProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CleanProject\">\r\n    <summary>\r\n    Handles the clean project command.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1702:CompoundWordsShouldBeCasedCorrectly\", MessageId = \"SubFolder\")]\r\nprotected virtual FolderNode VerifySubFolderExists(string path, HierarchyNode parent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.VerifySubFolderExists(System.String,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Takes a path and verifies that we have a node with that name.\r\n    It is meant to be a helper method for CreateFolderNodes().\r\n    For some scenario it may be useful to override.\r\n    </summary>\r\n    <param name=\"path\">full path to the subfolder we want to verify.</param>\r\n    <param name=\"parent\">the parent node where to add the subfolder if it does not exist.</param>\r\n    <returns>the foldernode correcsponding to the path.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.VerifySubFolderExists(System.String,Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.VerifySubFolderExists(System.String,Microsoft.VisualStudio.Project.HierarchyNode)\">\r\n    <summary>\r\n    Takes a path and verifies that we have a node with that name.\r\n    It is meant to be a helper method for CreateFolderNodes().\r\n    For some scenario it may be useful to override.\r\n    </summary>\r\n    <param name=\"path\">full path to the subfolder we want to verify.</param>\r\n    <param name=\"parent\">the parent node where to add the subfolder if it does not exist.</param>\r\n    <returns>the foldernode correcsponding to the path.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Security\", \"CA2109:ReviewVisibleEventHandlers\", Justification = \"This method will give the opportunity to update global properties based on active configuration change. \" + \"There is no security threat that could otherwise not be reached by listening to configuration chnage events.\")]\r\nprotected virtual void OnHandleConfigurationRelatedGlobalProperties(object sender, ActiveConfigurationChangedEventArgs eventArgs)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnHandleConfigurationRelatedGlobalProperties(System.Object,Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs)\">\r\n    <summary>\r\n    Handles global properties related to configuration and platform changes invoked by a change in the active configuration.\r\n    </summary>\r\n    <param name=\"sender\">The sender of the event.</param>\r\n    <param name=\"eventArgs\">The event args</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.OnHandleConfigurationRelatedGlobalProperties(System.Object,Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.OnHandleConfigurationRelatedGlobalProperties(System.Object,Microsoft.VisualStudio.Project.ActiveConfigurationChangedEventArgs)\">\r\n    <summary>\r\n    Handles global properties related to configuration and platform changes invoked by a change in the active configuration.\r\n    </summary>\r\n    <param name=\"sender\">The sender of the event.</param>\r\n    <param name=\"eventArgs\">The event args</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int Close()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Close\">\r\n    <summary>\r\n    Closes the project node.\r\n    </summary>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Close",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.Close\">\r\n    <summary>\r\n    Closes the project node.\r\n    </summary>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)\">\r\n    <summary>\r\n    Get the boolean value for the deletion of a project item\r\n    </summary>\r\n    <param name=\"deleteOperation\">A flag that specifies the type of delete operation (delete from storage or remove from project)</param>\r\n    <returns>true if item can be deleted from project</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)\">\r\n    <summary>\r\n    Get the boolean value for the deletion of a project item\r\n    </summary>\r\n    <param name=\"deleteOperation\">A flag that specifies the type of delete operation (delete from storage or remove from project)</param>\r\n    <returns>true if item can be deleted from project</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private HierarchyNode GetItemParentNode(MSBuild.ProjectItem item)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetItemParentNode(Microsoft.Build.Evaluation.ProjectItem)\">\r\n    <summary>\r\n    Get the parent node of an msbuild item\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>parent node</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetItemParentNode(Microsoft.Build.Evaluation.ProjectItem)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetItemParentNode(Microsoft.Build.Evaluation.ProjectItem)\">\r\n    <summary>\r\n    Get the parent node of an msbuild item\r\n    </summary>\r\n    <param name=\"item\">msbuild item</param>\r\n    <returns>parent node</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ConfigProvider CreateConfigProvider()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateConfigProvider\">\r\n    <summary>\r\n    Factory method for configuration provider\r\n    </summary>\r\n    <returns>Configuration provider created</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.CreateConfigProvider",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.CreateConfigProvider\">\r\n    <summary>\r\n    Factory method for configuration provider\r\n    </summary>\r\n    <returns>Configuration provider created</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetBuildSystemKind(out uint kind)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetBuildSystemKind(System.UInt32@)\">\r\n    <summary>\r\n    Used to determine the kind of build system, in VS 2005 there's only one defined kind: MSBuild \r\n    </summary>\r\n    <param name=\"kind\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.GetBuildSystemKind(System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectNode.GetBuildSystemKind(System.UInt32@)\">\r\n    <summary>\r\n    Used to determine the kind of build system, in VS 2005 there's only one defined kind: MSBuild \r\n    </summary>\r\n    <param name=\"kind\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Load(string fileName, uint mode, int readOnly)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.Load(System.String,System.UInt32,System.Int32)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "errorString",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.errorString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "options",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.options\">\r\n    <summary>\r\n    A cached copy of project options.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.options",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.options\">\r\n    <summary>\r\n    A cached copy of project options.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "filename",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.filename",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "sccAuxPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.sccAuxPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "addComponentDialogSizeY",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.addComponentDialogSizeY",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "canProjectDeleteItems",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.canProjectDeleteItems\">\r\n    <summary>\r\n    Control if command with potential destructive behavior such as delete should\r\n    be enabled for nodes of this project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.canProjectDeleteItems",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.canProjectDeleteItems\">\r\n    <summary>\r\n    Control if command with potential destructive behavior such as delete should\r\n    be enabled for nodes of this project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "imageHandler",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.imageHandler",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "tracker",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.tracker",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isRegisteredWithScc",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.isRegisteredWithScc\">\r\n    <summary>\r\n    Flag for controling how many times we register with the Scc manager.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.isRegisteredWithScc",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.isRegisteredWithScc\">\r\n    <summary>\r\n    Flag for controling how many times we register with the Scc manager.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "isProjectEventsListener",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.isProjectEventsListener",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "eventTriggeringFlag",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.eventTriggeringFlag",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "lastModifiedTime",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.lastModifiedTime\">\r\n    <summary>\r\n    This property returns the time of the last change made to this project.\r\n    It is not the time of the last change on the project file, but actually of\r\n    the in memory project settings.  In other words, it is the last time that \r\n    SetProjectDirty was called.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.lastModifiedTime",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.lastModifiedTime\">\r\n    <summary>\r\n    This property returns the time of the last change made to this project.\r\n    It is not the time of the last change on the project file, but actually of\r\n    the in memory project settings.  In other words, it is the last time that \r\n    SetProjectDirty was called.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.isDisposed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "invokeMSBuildWhenResumed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.invokeMSBuildWhenResumed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "package",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.package\">\r\n    <summary>\r\n    The internal package implementation.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.package",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.package\">\r\n    <summary>\r\n    The internal package implementation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "BuildLock",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.BuildLock\">\r\n    <summary>A project will only try to build if it can obtain a lock on this object</summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.BuildLock",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.BuildLock\">\r\n    <summary>A project will only try to build if it can obtain a lock on this object</summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "showProjectInSolutionPage",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.showProjectInSolutionPage",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectEventsProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.projectEventsProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "warningString",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.warningString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "addComponentLastActiveTab",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.addComponentLastActiveTab",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "outputBaseRelativePath",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.outputBaseRelativePath\">\r\n    <summary>\r\n    Member to store output base relative path. Used by OutputBaseRelativePath property\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.outputBaseRelativePath",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.outputBaseRelativePath\">\r\n    <summary>\r\n    Member to store output base relative path. Used by OutputBaseRelativePath property\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "disableQueryEdit",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.disableQueryEdit\">\r\n    <summary>\r\n    Flag for controling query edit should communicate with the scc manager.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.disableQueryEdit",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.disableQueryEdit\">\r\n    <summary>\r\n    Flag for controling query edit should communicate with the scc manager.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "projectOpened",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.projectOpened",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "catidMapping",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.catidMapping\">\r\n    <summary>\r\n    Used to map types to CATID. This provide a generic way for us to do this\r\n    and make it simpler for a project to provide it's CATIDs for the different type of objects\r\n    for which it wants to support extensibility. This also enables us to have multiple\r\n    type mapping to the same CATID if we choose to.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.catidMapping",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.catidMapping\">\r\n    <summary>\r\n    Used to map types to CATID. This provide a generic way for us to do this\r\n    and make it simpler for a project to provide it's CATIDs for the different type of objects\r\n    for which it wants to support extensibility. This also enables us to have multiple\r\n    type mapping to the same CATID if we choose to.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "canFileNodesHaveChilds",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.canFileNodesHaveChilds",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "addComponentDialogSizeX",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.addComponentDialogSizeX",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "useProvidedLogger",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.useProvidedLogger",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "xmlFragments",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.xmlFragments\">\r\n    <summary>\r\n    Used for flavoring to hold the XML fragments\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.xmlFragments",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.xmlFragments\">\r\n    <summary>\r\n    Used for flavoring to hold the XML fragments\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "dropDataType",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.dropDataType",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "disableScc",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.disableScc\">\r\n    <summary>\r\n    Field for determining whether sourcecontrol should be disabled.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.disableScc",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.disableScc\">\r\n    <summary>\r\n    Field for determining whether sourcecontrol should be disabled.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "isDirty",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.isDirty",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "configProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.configProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "buildIsPrepared",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.buildIsPrepared",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "suspendMSBuildCounter",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.suspendMSBuildCounter",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "currentConfig",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.currentConfig",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "buildDependencyList",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.buildDependencyList\">\r\n    <summary>\r\n    The build dependency list passed to IVsDependencyProvider::EnumDependencies \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.buildDependencyList",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.buildDependencyList\">\r\n    <summary>\r\n    The build dependency list passed to IVsDependencyProvider::EnumDependencies \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "ExploreFolderInWindowsCommand",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.ExploreFolderInWindowsCommand\">\r\n    <summary>\r\n    The VS command that allows projects to open Windows Explorer to the project directory.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.ExploreFolderInWindowsCommand",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.ExploreFolderInWindowsCommand\">\r\n    <summary>\r\n    The VS command that allows projects to open Windows Explorer to the project directory.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "buildProject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.buildProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "GUID_MruPage",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.GUID_MruPage",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isNewProject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.isNewProject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "sccProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.sccProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "baseUri",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.baseUri",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DefaultTargetFrameworkMoniker",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.DefaultTargetFrameworkMoniker",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectPropertiesListeners",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.projectPropertiesListeners",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "buildInProcess",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.buildInProcess",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "buildLogger",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.buildLogger",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "itemIdMap",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.itemIdMap\">\r\n    <summary>Maps integer ids to project item instances</summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.itemIdMap",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.itemIdMap\">\r\n    <summary>Maps integer ids to project item instances</summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "site",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.site\">\r\n    <summary>A service provider call back object provided by the IDE hosting the project manager</summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.site",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.site\">\r\n    <summary>A service provider call back object provided by the IDE hosting the project manager</summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "buildEngine",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.buildEngine\">\r\n    <summary>\r\n    MSBuild engine we are going to use \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.buildEngine",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.buildEngine\">\r\n    <summary>\r\n    MSBuild engine we are going to use \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "PerUserFileExtension",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.PerUserFileExtension\">\r\n    <summary>\r\n    The user file extension.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.PerUserFileExtension",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.PerUserFileExtension\">\r\n    <summary>\r\n    The user file extension.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "copyPasteCookie",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.copyPasteCookie",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "sccLocalPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.sccLocalPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "designTimeAssemblyResolution",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.designTimeAssemblyResolution",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "outputGroupNames",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.outputGroupNames\">\r\n    <summary>\r\n    List of output groups names and their associated target\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.outputGroupNames",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.outputGroupNames\">\r\n    <summary>\r\n    List of output groups names and their associated target\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "tokenProcessor",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.tokenProcessor\">\r\n    <summary>\r\n    Token processor used by the project sample.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.tokenProcessor",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.tokenProcessor\">\r\n    <summary>\r\n    Token processor used by the project sample.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "taskProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.taskProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "supportsProjectDesigner",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.supportsProjectDesigner\">\r\n    <summary>\r\n    Defines if Project System supports Project Designer\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.supportsProjectDesigner",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectNode.supportsProjectDesigner\">\r\n    <summary>\r\n    Defines if Project System supports Project Designer\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "isClosed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.isClosed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectIdGuid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.projectIdGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "sccProjectName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectNode.sccProjectName",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected internal bool CanProjectDeleteItems",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.CanProjectDeleteItems\">\r\n    <summary>\r\n    Gets or set whether items can be deleted for this project.\r\n    Enabling this feature can have the potential destructive behavior such as deleting files from disk.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.CanProjectDeleteItems",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.CanProjectDeleteItems\">\r\n    <summary>\r\n    Gets or set whether items can be deleted for this project.\r\n    Enabling this feature can have the potential destructive behavior such as deleting files from disk.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual object ProjectObject",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectObject\">\r\n    <summary>\r\n    This is the object that will be returned by EnvDTE.Project.Object for this project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ProjectObject",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectObject\">\r\n    <summary>\r\n    This is the object that will be returned by EnvDTE.Project.Object for this project\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal EventTriggering EventTriggeringFlag",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.EventTriggeringFlag\">\r\n    <summary>\r\n    Gets or sets event triggering flags.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.EventTriggeringFlag",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.EventTriggeringFlag\">\r\n    <summary>\r\n    Gets or sets event triggering flags.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string ProjectFile",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectFile\">\r\n    <summary>\r\n    Gets or sets the project filename.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ProjectFile",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectFile\">\r\n    <summary>\r\n    Gets or sets the project filename.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string ErrorString",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ErrorString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual bool IsProjectFileDirty",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.IsProjectFileDirty\">\r\n    <summary>\r\n    Override this property to specify when the project file is dirty.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.IsProjectFileDirty",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.IsProjectFileDirty\">\r\n    <summary>\r\n    Override this property to specify when the project file is dirty.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IVsProject3 InteropSafeIVsProject3",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsProject3\">\r\n    <summary>\r\n    Version of this node as an IVsProject3 that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsProject3",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsProject3\">\r\n    <summary>\r\n    Version of this node as an IVsProject3 that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public abstract Guid ProjectGuid",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectGuid\">\r\n    <summary>\r\n    This Guid must match the Guid you registered under\r\n    HKLM\\Software\\Microsoft\\VisualStudio\\%version%\\Projects.\r\n    Among other things, the Project framework uses this \r\n    guid to find your project and item templates.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ProjectGuid",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectGuid\">\r\n    <summary>\r\n    This Guid must match the Guid you registered under\r\n    HKLM\\Software\\Microsoft\\VisualStudio\\%version%\\Projects.\r\n    Among other things, the Project framework uses this \r\n    guid to find your project and item templates.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected ConfigProvider ConfigProvider",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ConfigProvider\">\r\n    <summary>\r\n    Gets the configuration provider.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ConfigProvider",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ConfigProvider\">\r\n    <summary>\r\n    Gets the configuration provider.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected string FileName",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.FileName\">\r\n    <summary>\r\n    Gets the project file name.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.FileName",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.FileName\">\r\n    <summary>\r\n    Gets the project file name.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string ProjectFolder",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectFolder\">\r\n    <summary>\r\n    Gets the path to the folder containing the project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ProjectFolder",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectFolder\">\r\n    <summary>\r\n    Gets the path to the folder containing the project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool IsProjectEventsListener",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.IsProjectEventsListener",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public ImageHandler ImageHandler",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ImageHandler\">\r\n    <summary>\r\n    Gets an ImageHandler for the project node.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ImageHandler",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ImageHandler\">\r\n    <summary>\r\n    Gets an ImageHandler for the project node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected TaskProvider TaskProvider",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.TaskProvider\">\r\n    <summary>\r\n    Gets the taskprovider.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.TaskProvider",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.TaskProvider\">\r\n    <summary>\r\n    Gets the taskprovider.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal MSBuild.Project BuildProject",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BuildProject\">\r\n    <summary>\r\n    Defines the build project that has loaded the project file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.BuildProject",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BuildProject\">\r\n    <summary>\r\n    Defines the build project that has loaded the project file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IVsComponentUser InteropSafeIVsComponentUser",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsComponentUser",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual IVsBuildDependency[] BuildDependencies",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.BuildDependencies",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public abstract string ProjectType",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectType\">\r\n    <summary>\r\n    Returns a caption for VSHPROPID_TypeName.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ProjectType",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectType\">\r\n    <summary>\r\n    Returns a caption for VSHPROPID_TypeName.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IVsSccProject2 InteropSafeIVsSccProject2",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsSccProject2\">\r\n    <summary>\r\n    Version of this node as an IVsSccProject2 that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsSccProject2",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsSccProject2\">\r\n    <summary>\r\n    Version of this node as an IVsSccProject2 that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal TrackDocumentsHelper Tracker",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.Tracker\">\r\n    <summary>\r\n    Get the helper object that track document changes.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.Tracker",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.Tracker\">\r\n    <summary>\r\n    Get the helper object that track document changes.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal Microsoft.Build.Execution.ProjectInstance CurrentConfig",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.CurrentConfig\">\r\n    <summary>\r\n    Gets the current config.\r\n    </summary>\r\n    <value>The current config.</value>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.CurrentConfig",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.CurrentConfig\">\r\n    <summary>\r\n    Gets the current config.\r\n    </summary>\r\n    <value>The current config.</value>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public TokenProcessor FileTemplateProcessor",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.FileTemplateProcessor\">\r\n    <summary>\r\n    Get and set the Token processor.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.FileTemplateProcessor",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.FileTemplateProcessor\">\r\n    <summary>\r\n    Get and set the Token processor.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected bool IsIdeInCommandLineMode",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.IsIdeInCommandLineMode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected bool DisableQueryEdit",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.DisableQueryEdit\">\r\n    <summary>\r\n    Gets or sets the flag whether query edit should communicate with the scc manager.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.DisableQueryEdit",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.DisableQueryEdit\">\r\n    <summary>\r\n    Gets or sets the flag whether query edit should communicate with the scc manager.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public Microsoft.VisualStudio.Shell.Url BaseURI",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BaseURI\">\r\n    <summary>\r\n    Gets the Base Uniform Resource Identifier (URI).\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.BaseURI",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BaseURI\">\r\n    <summary>\r\n    Gets the Base Uniform Resource Identifier (URI).\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual string WarningString",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.WarningString",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool BuildInProgress",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BuildInProgress\">\r\n    <summary>\r\n    Gets whether or not the project is being built.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.BuildInProgress",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BuildInProgress\">\r\n    <summary>\r\n    Gets whether or not the project is being built.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int ImageIndex",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ImageIndex",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual Guid ProjectIDGuid",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectIDGuid\">\r\n    <summary>\r\n    This is the project instance guid that is peristed in the project file\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ProjectIDGuid",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ProjectIDGuid\">\r\n    <summary>\r\n    This is the project instance guid that is peristed in the project file\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public FrameworkName TargetFrameworkMoniker",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.TargetFrameworkMoniker",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public IVsUIHierWinClipboardHelperEvents InteropSafeIVsUIHierWinClipboardHelperEvents",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsUIHierWinClipboardHelperEvents\">\r\n    <summary>\r\n    Version of this node as an IVsUIHierWinClipboardHelperEvents that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsUIHierWinClipboardHelperEvents",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsUIHierWinClipboardHelperEvents\">\r\n    <summary>\r\n    Version of this node as an IVsUIHierWinClipboardHelperEvents that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool IsClosed",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.IsClosed\">\r\n    <summary>\r\n    Gets whether or not the project is closed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.IsClosed",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.IsClosed\">\r\n    <summary>\r\n    Gets whether or not the project is closed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IServiceProvider Site",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.Site\">\r\n    <summary>\r\n    Gets a service provider object provided by the IDE hosting the project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.Site",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.Site\">\r\n    <summary>\r\n    Gets a service provider object provided by the IDE hosting the project\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public IVsHierarchy InteropSafeIVsHierarchy",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsHierarchy\">\r\n    <summary>\r\n    Version of this node as an IVsHierarchy that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsHierarchy",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsHierarchy\">\r\n    <summary>\r\n    Version of this node as an IVsHierarchy that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "IProjectEvents IProjectEventsProvider.ProjectEventsProvider",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Project#IProjectEventsProvider#ProjectEventsProvider\">\r\n    <summary>\r\n    Defines the provider for the project events\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Project#IProjectEventsProvider#ProjectEventsProvider",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.Microsoft#VisualStudio#Project#IProjectEventsProvider#ProjectEventsProvider\">\r\n    <summary>\r\n    Defines the provider for the project events\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public DateTime LastModifiedTime",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.LastModifiedTime\">\r\n    <summary>\r\n    This property returns the time of the last change made to this project.\r\n    It is not the time of the last change on the project file, but actually of\r\n    the in memory project settings.  In other words, it is the last time that \r\n    SetProjectDirty was called.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.LastModifiedTime",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.LastModifiedTime\">\r\n    <summary>\r\n    This property returns the time of the last change made to this project.\r\n    It is not the time of the last change on the project file, but actually of\r\n    the in memory project settings.  In other words, it is the last time that \r\n    SetProjectDirty was called.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal MSBuild.ProjectCollection BuildEngine",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BuildEngine\">\r\n    <summary>\r\n    Defines the build engine that is used to build the project file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.BuildEngine",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BuildEngine\">\r\n    <summary>\r\n    Defines the build engine that is used to build the project file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override Guid ItemTypeGuid",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ItemTypeGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal EventSinkCollection ItemIdMap",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ItemIdMap\">\r\n    <summary>\r\n    Gets a collection of integer ids that maps to project item instances\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ItemIdMap",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ItemIdMap\">\r\n    <summary>\r\n    Gets a collection of integer ids that maps to project item instances\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string Caption",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.Caption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int MenuCommandId",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.MenuCommandId",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public static ServiceProvider ServiceProvider",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ServiceProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string OutputBaseRelativePath",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.OutputBaseRelativePath\">\r\n    <summary>\r\n    Gets or set the relative path to the folder containing the project ouput. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.OutputBaseRelativePath",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.OutputBaseRelativePath\">\r\n    <summary>\r\n    Gets or set the relative path to the folder containing the project ouput. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal ProjectPackage Package",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.Package\">\r\n    <summary>\r\n    The internal package implementation.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.Package",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.Package\">\r\n    <summary>\r\n    The internal package implementation.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected bool IsSccDisabled",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.IsSccDisabled\">\r\n    <summary>\r\n    Gets or sets whether or not source code control is disabled for this project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.IsSccDisabled",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.IsSccDisabled\">\r\n    <summary>\r\n    Gets or sets whether or not source code control is disabled for this project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual string ReEvaluateProjectFileTargetName",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ReEvaluateProjectFileTargetName\">\r\n    <summary>\r\n    The target name that will be used for evaluating the project file (i.e., pseudo-builds).\r\n    This target is used to trigger a build with when the project system changes. \r\n    Example: The language projrcts are triggering a build with the Compile target whenever \r\n    the project system changes.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ReEvaluateProjectFileTargetName",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ReEvaluateProjectFileTargetName\">\r\n    <summary>\r\n    The target name that will be used for evaluating the project file (i.e., pseudo-builds).\r\n    This target is used to trigger a build with when the project system changes. \r\n    Example: The language projrcts are triggering a build with the Compile target whenever \r\n    the project system changes.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string Url",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.Url",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public IVsUIHierarchy InteropSafeIVsUIHierarchy",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsUIHierarchy\">\r\n    <summary>\r\n    Version of this node as an IVsUIHierarchy that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsUIHierarchy",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.InteropSafeIVsUIHierarchy\">\r\n    <summary>\r\n    Version of this node as an IVsUIHierarchy that can be safely passed to native code from a background thread. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual Guid ProjectDesignerEditor",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ProjectDesignerEditor",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected Microsoft.Build.Utilities.Logger BuildLogger",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BuildLogger\">\r\n    <summary>\r\n    Gets or sets the build logger.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.BuildLogger",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.BuildLogger\">\r\n    <summary>\r\n    Gets or sets the build logger.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual bool SupportsProjectDesigner",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.SupportsProjectDesigner\">\r\n    <summary>\r\n    True if the project uses the Project Designer Editor instead of the property page frame to edit project properties.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.SupportsProjectDesigner",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.SupportsProjectDesigner\">\r\n    <summary>\r\n    True if the project uses the Project Designer Editor instead of the property page frame to edit project properties.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual bool ShowProjectInSolutionPage",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ShowProjectInSolutionPage\">\r\n    <summary>\r\n    Defines the flag that supports the VSHPROPID.ShowProjInSolutionPage\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.ShowProjectInSolutionPage",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.ShowProjectInSolutionPage\">\r\n    <summary>\r\n    Defines the flag that supports the VSHPROPID.ShowProjInSolutionPage\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal bool HasProjectOpened",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.HasProjectOpened\">\r\n    <summary>\r\n    Determines whether the project was fully opened. This is set when the OnAfterOpenProject has triggered.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.HasProjectOpened",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.HasProjectOpened\">\r\n    <summary>\r\n    Determines whether the project was fully opened. This is set when the OnAfterOpenProject has triggered.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public bool IsNewProject",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.IsNewProject\">\r\n    <summary>\r\n    Determines whether this project is a new project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.IsNewProject",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.IsNewProject\">\r\n    <summary>\r\n    Determines whether this project is a new project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal bool CanFileNodesHaveChilds",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.CanFileNodesHaveChilds\">\r\n    <summary>\r\n    Gets or sets the ability of a project filenode to have child nodes (sub items).\r\n    Example would be C#/VB forms having resx and designer files.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectNode.CanFileNodesHaveChilds",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectNode.CanFileNodesHaveChilds\">\r\n    <summary>\r\n    Gets or sets the ability of a project filenode to have child nodes (sub items).\r\n    Example would be C#/VB forms having resx and designer files.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected ProjectNode()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectNode.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract partial class ProjectNode",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectNode\">\r\n    <summary>\r\n    Manages the persistent state of the project (References, options, files, etc.) and deals with user interaction via a GUI in the form a hierarchy.\r\n    </summary>\r\n    <summary>\r\n    Manages the CopyPaste and Drag and Drop scenarios for a Project.\r\n    </summary>\r\n    <remarks>This is a partial class.</remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectNode\">\r\n    <summary>\r\n    Manages the persistent state of the project (References, options, files, etc.) and deals with user interaction via a GUI in the form a hierarchy.\r\n    </summary>\r\n    <summary>\r\n    Manages the CopyPaste and Drag and Drop scenarios for a Project.\r\n    </summary>\r\n    <remarks>This is a partial class.</remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"tokenid\")]\r\npublic virtual void AddReplaceBetween(string tokenid, string tokenStart, string tokenEnd, string replacement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplaceBetween(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    Add replace between entry\r\n    </summary>\r\n    <param name=\"tokenStart\">Start token</param>\r\n    <param name=\"tokenEnd\">End token</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplaceBetween(System.String,System.String,System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplaceBetween(System.String,System.String,System.String,System.String)\">\r\n    <summary>\r\n    Add replace between entry\r\n    </summary>\r\n    <param name=\"tokenStart\">Start token</param>\r\n    <param name=\"tokenEnd\">End token</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void ReplaceTokens(ref string buffer, ReplacePairToken tokenToReplace)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceTokens(System.String@,Microsoft.VisualStudio.Project.ReplacePairToken)\">\r\n    <summary>\r\n    Replaces the tokens in a buffer with the replacement string\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"tokenToReplace\">replacement data</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceTokens(System.String@,Microsoft.VisualStudio.Project.ReplacePairToken)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceTokens(System.String@,Microsoft.VisualStudio.Project.ReplacePairToken)\">\r\n    <summary>\r\n    Replaces the tokens in a buffer with the replacement string\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"tokenToReplace\">replacement data</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"c\")]\r\nprotected static bool IsValidIdentifierStartChar(char c)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierStartChar(System.Char)\">\r\n    <summary>\r\n    Verifies if the start character is valid\r\n    </summary>\r\n    <param name=\"c\">Start character</param>\r\n    <returns>true if successful false otherwise</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierStartChar(System.Char)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierStartChar(System.Char)\">\r\n    <summary>\r\n    Verifies if the start character is valid\r\n    </summary>\r\n    <param name=\"c\">Start character</param>\r\n    <returns>true if successful false otherwise</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddDelete(string tokenToDelete)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddDelete(System.String)\">\r\n    <summary>\r\n    Add a deletion entry\r\n    </summary>\r\n    <param name=\"tokenToDelete\">Token to delete</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.AddDelete(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddDelete(System.String)\">\r\n    <summary>\r\n    Add a deletion entry\r\n    </summary>\r\n    <param name=\"tokenToDelete\">Token to delete</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1800:DoNotCastUnnecessarily\"), SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Untoken\")]\r\npublic virtual void UntokenFile(string source, string destination)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.UntokenFile(System.String,System.String)\">\r\n    <summary>\r\n    For all known token, replace token with correct value\r\n    </summary>\r\n    <param name=\"source\">File of the source file</param>\r\n    <param name=\"destination\">File of the destination file</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.UntokenFile(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.UntokenFile(System.String,System.String)\">\r\n    <summary>\r\n    For all known token, replace token with correct value\r\n    </summary>\r\n    <param name=\"source\">File of the source file</param>\r\n    <param name=\"destination\">File of the destination file</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"c\")]\r\nprotected static bool IsValidIdentifierChar(char c)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierChar(System.Char)\">\r\n    <summary>\r\n    This function will accept a subset of the characters that can create an\r\n    identifier name: there are other unicode char that can be inside the name, but\r\n    this function will not allow. By now it can work this way, but when and if the\r\n    VSIP package will handle also languages different from english, this function\r\n    must be changed.\r\n    </summary>\r\n    <param name=\"c\">Character to validate</param>\r\n    <returns>true if successful false otherwise</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierChar(System.Char)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.IsValidIdentifierChar(System.Char)\">\r\n    <summary>\r\n    This function will accept a subset of the characters that can create an\r\n    identifier name: there are other unicode char that can be inside the name, but\r\n    this function will not allow. By now it can work this way, but when and if the\r\n    VSIP package will handle also languages different from english, this function\r\n    must be changed.\r\n    </summary>\r\n    <param name=\"c\">Character to validate</param>\r\n    <returns>true if successful false otherwise</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void DeleteTokens(ref string buffer, DeleteToken tokenToDelete)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.DeleteTokens(System.String@,Microsoft.VisualStudio.Project.DeleteToken)\">\r\n    <summary>\r\n    Deletes the token from the buffer\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"tokenToDelete\">token to delete</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.DeleteTokens(System.String@,Microsoft.VisualStudio.Project.DeleteToken)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.DeleteTokens(System.String@,Microsoft.VisualStudio.Project.DeleteToken)\">\r\n    <summary>\r\n    Deletes the token from the buffer\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"tokenToDelete\">token to delete</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1822:MarkMembersAsStatic\")]\r\npublic string GuidToForm1(Guid value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.GuidToForm1(System.Guid)\">\r\n    <summary>\r\n    Generates a string representation of a guid with the following format:\r\n    0x01020304, 0x0506, 0x0708, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10\r\n    </summary>\r\n    <param name=\"value\">Guid to be generated</param>\r\n    <returns>The guid as string</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.GuidToForm1(System.Guid)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.GuidToForm1(System.Guid)\">\r\n    <summary>\r\n    Generates a string representation of a guid with the following format:\r\n    0x01020304, 0x0506, 0x0708, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10\r\n    </summary>\r\n    <param name=\"value\">Guid to be generated</param>\r\n    <returns>The guid as string</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddReplace(string token, string replacement)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplace(System.String,System.String)\">\r\n    <summary>\r\n    Add a replacement type entry\r\n    </summary>\r\n    <param name=\"token\">token to replace</param>\r\n    <param name=\"replacement\">replacement string</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplace(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.AddReplace(System.String,System.String)\">\r\n    <summary>\r\n    Add a replacement type entry\r\n    </summary>\r\n    <param name=\"token\">token to replace</param>\r\n    <param name=\"replacement\">replacement string</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void ReplaceBetweenTokens(ref string buffer, ReplaceBetweenPairToken rpBetweenToken)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceBetweenTokens(System.String@,Microsoft.VisualStudio.Project.ReplaceBetweenPairToken)\">\r\n    <summary>\r\n    Replaces the token from the buffer between the provided tokens\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"rpBetweenToken\">replacement token</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceBetweenTokens(System.String@,Microsoft.VisualStudio.Project.ReplaceBetweenPairToken)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.ReplaceBetweenTokens(System.String@,Microsoft.VisualStudio.Project.ReplaceBetweenPairToken)\">\r\n    <summary>\r\n    Replaces the token from the buffer between the provided tokens\r\n    </summary>\r\n    <param name=\"buffer\">Buffer to update</param>\r\n    <param name=\"rpBetweenToken\">replacement token</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1822:MarkMembersAsStatic\")]\r\npublic string GetFileNamespace(string fileFullPath, ProjectNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.GetFileNamespace(System.String,Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    The goal here is to reduce the risk of name conflict between 2 classes\r\n    added in different directories. This code does NOT garanty uniqueness.\r\n    To garanty uniqueness, you should change this function to work with\r\n    the language service to verify that the namespace+class generated does\r\n    not conflict.\r\n    </summary>\r\n    <param name=\"fileFullPath\">Full path to the new file</param>\r\n    <returns>Namespace to use for the new file</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.GetFileNamespace(System.String,Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.GetFileNamespace(System.String,Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    The goal here is to reduce the risk of name conflict between 2 classes\r\n    added in different directories. This code does NOT garanty uniqueness.\r\n    To garanty uniqueness, you should change this function to work with\r\n    the language service to verify that the namespace+class generated does\r\n    not conflict.\r\n    </summary>\r\n    <param name=\"fileFullPath\">Full path to the new file</param>\r\n    <returns>Namespace to use for the new file</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Reset()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.Reset\">\r\n    <summary>\r\n    Reset list of TokenReplacer entries\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.Reset",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.Reset\">\r\n    <summary>\r\n    Reset list of TokenReplacer entries\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "tokenlist",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.TokenProcessor.tokenlist",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public TokenProcessor()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.#ctor\">\r\n    <summary>\r\n    Constructor\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.TokenProcessor.#ctor",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.TokenProcessor.#ctor\">\r\n    <summary>\r\n    Constructor\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class TokenProcessor\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.TokenProcessor\">\r\n    <summary>\r\n    Contain a number of functions that handle token replacement\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.TokenProcessor",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.TokenProcessor\">\r\n    <summary>\r\n    Contain a number of functions that handle token replacement\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override int OnAfterOpenProject(IVsHierarchy hierarchy, int added)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectOpen.OnAfterOpenProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.Int32)",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public SolutionListenerForProjectOpen(IServiceProvider serviceProvider): base (serviceProvider)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SolutionListenerForProjectOpen.#ctor(System.IServiceProvider)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class SolutionListenerForProjectOpen",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.SolutionListenerForProjectOpen",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string FolderName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FolderNodeProperties.FolderName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string FullPath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FolderNodeProperties.FullPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string FileName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FolderNodeProperties.FileName",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public FolderNodeProperties(HierarchyNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FolderNodeProperties.#ctor(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class FolderNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FolderNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "void IDataObject.DUnadvise(uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DUnadvise(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void IDataObject.SetData(FORMATETC[] fmt, STGMEDIUM[] m, int fRelease)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void IDataObject.GetDataHere(FORMATETC[] fmt, STGMEDIUM[] m)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IDataObject.EnumFormatEtc(uint direction, out IEnumFORMATETC penum)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#EnumFormatEtc(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IDataObject.EnumDAdvise(out IEnumSTATDATA e)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#EnumDAdvise(Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IDataObject.GetCanonicalFormatEtc(FORMATETC[] format, FORMATETC[] fmt)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetCanonicalFormatEtc(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.FORMATETC[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IDataObject.DAdvise(FORMATETC[] e, uint adv, IAdviseSink sink, out uint cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal void SetData(FORMATETC format, IntPtr data)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void IDataObject.GetData(FORMATETC[] fmt, STGMEDIUM[] m)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "int IDataObject.QueryGetData(FORMATETC[] fmt)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#QueryGetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[])",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "entries",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DataObject.entries",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "map",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DataObject.map",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DATA_S_SAMEFORMATETC",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DataObject.DATA_S_SAMEFORMATETC",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal DataObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DataObject.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal sealed class DataObject\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DataObject\">\r\n    <summary>\r\n    Unfortunately System.Windows.Forms.IDataObject and\r\n    Microsoft.VisualStudio.OLE.Interop.IDataObject are different...\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DataObject",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DataObject\">\r\n    <summary>\r\n    Unfortunately System.Windows.Forms.IDataObject and\r\n    Microsoft.VisualStudio.OLE.Interop.IDataObject are different...\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "added",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.AfterProjectFileOpenedEventArgs.added",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal bool Added",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.AfterProjectFileOpenedEventArgs.Added\">\r\n    <summary>\r\n    True if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.AfterProjectFileOpenedEventArgs.Added",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.AfterProjectFileOpenedEventArgs.Added\">\r\n    <summary>\r\n    True if the project is added to the solution after the solution is opened. false if the project is added to the solution while the solution is being opened.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal AfterProjectFileOpenedEventArgs(bool added)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.AfterProjectFileOpenedEventArgs.#ctor(System.Boolean)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class AfterProjectFileOpenedEventArgs\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.AfterProjectFileOpenedEventArgs",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "browsable",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute.browsable",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public bool Browsable",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute.Browsable",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public AutomationBrowsableAttribute(bool browsable)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute.#ctor(System.Boolean)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public sealed class AutomationBrowsableAttribute",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute\">\r\n    <summary>\r\n    All public properties on Nodeproperties or derived classes are assumed to be used by Automation by default.\r\n    Set this attribute to false on Properties that should not be visible for Automation.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.AutomationBrowsableAttribute\">\r\n    <summary>\r\n    All public properties on Nodeproperties or derived classes are assumed to be used by Automation by default.\r\n    Set this attribute to false on Properties that should not be visible for Automation.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Naming\", \"CA2204:Literals should be spelled correctly\", MessageId = \"GetFrameworkPaths\")]\r\npublic virtual void Initialize(ProjectNode projectNode)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.Initialize(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual VsResolvedAssemblyPath[] Resolve(IEnumerable<string> assemblies)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.Resolve(System.Collections.Generic.IEnumerable{System.String})",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private static IEnumerable<KeyValuePair<string, string>> FilterResults(IEnumerable<ITaskItem> resolvedFiles)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.FilterResults(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ITaskItem})",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private static void WriteLogFile(MockEngine engine, bool projectDtar, IEnumerable<string> assemblies)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.WriteLogFile(Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.MockEngine,System.Boolean,System.Collections.Generic.IEnumerable{System.String})",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "FoundAssemblyVersion",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.FoundAssemblyVersion",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OutOfRangeDependencies",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.OutOfRangeDependencies",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OriginalItemSpec",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.OriginalItemSpec",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "rarInputs",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.rarInputs",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "HighestVersionInRedistList",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.HighestVersionInRedistList",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public bool EnableLogging",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution.EnableLogging",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class DesignTimeAssemblyResolution",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.DesignTimeAssemblyResolution",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "projectConfig",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectConfigProperties.projectConfig",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual string OutputPath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectConfigProperties.OutputPath",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ProjectConfigProperties(ProjectConfig projectConfig)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectConfigProperties.#ctor(Microsoft.VisualStudio.Project.ProjectConfig)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ProjectConfigProperties\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectConfigProperties\">\r\n    <summary>\r\n    Implements the configuration dependent properties interface\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectConfigProperties",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectConfigProperties\">\r\n    <summary>\r\n    Implements the configuration dependent properties interface\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "converterType",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute.converterType",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public Type ConverterType",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute.ConverterType",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public PropertyPageTypeConverterAttribute(Type type)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute.#ctor(System.Type)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public sealed class PropertyPageTypeConverterAttribute\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute\">\r\n    <summary>\r\n    Defines a type converter.\r\n    </summary>\r\n    <remarks>This is needed to get rid of the type TypeConverter type that could not give back the Type we were passing to him.\r\n    We do not want to use reflection to get the type back from the  ConverterTypeName. Also the GetType methos does not spwan converters from other assemblies.</remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropertyPageTypeConverterAttribute\">\r\n    <summary>\r\n    Defines a type converter.\r\n    </summary>\r\n    <remarks>This is needed to get rid of the type TypeConverter type that could not give back the Type we were passing to him.\r\n    We do not want to use reflection to get the type back from the  ConverterTypeName. Also the GetType methos does not spwan converters from other assemblies.</remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual int CreateGeneratorInstance(string progId, out int generatesDesignTimeSource, out int generatesSharedDesignTimeSource, out int useTempPEFlag, out IVsSingleFileGenerator generate)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.CreateGeneratorInstance(System.String,System.Int32@,System.Int32@,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator@)\">\r\n    <summary>\r\n    Creates an instance of the single file generator requested\r\n    </summary>\r\n    <param name=\"progId\">prog id of the generator to be created. For e.g HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\9.0Exp\\Generators\\[prjfacguid]\\[wszProgId]</param>\r\n    <param name=\"generatesDesignTimeSource\">GeneratesDesignTimeSource key value</param>\r\n    <param name=\"generatesSharedDesignTimeSource\">GeneratesSharedDesignTimeSource key value</param>\r\n    <param name=\"useTempPEFlag\">UseDesignTimeCompilationFlag key value</param>\r\n    <param name=\"generate\">IVsSingleFileGenerator interface</param>\r\n    <returns>S_OK if succesful</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.CreateGeneratorInstance(System.String,System.Int32@,System.Int32@,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.CreateGeneratorInstance(System.String,System.Int32@,System.Int32@,System.Int32@,Microsoft.VisualStudio.Shell.Interop.IVsSingleFileGenerator@)\">\r\n    <summary>\r\n    Creates an instance of the single file generator requested\r\n    </summary>\r\n    <param name=\"progId\">prog id of the generator to be created. For e.g HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\9.0Exp\\Generators\\[prjfacguid]\\[wszProgId]</param>\r\n    <param name=\"generatesDesignTimeSource\">GeneratesDesignTimeSource key value</param>\r\n    <param name=\"generatesSharedDesignTimeSource\">GeneratesSharedDesignTimeSource key value</param>\r\n    <param name=\"useTempPEFlag\">UseDesignTimeCompilationFlag key value</param>\r\n    <param name=\"generate\">IVsSingleFileGenerator interface</param>\r\n    <returns>S_OK if succesful</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetDefaultGenerator(string filename, out string progID)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetDefaultGenerator(System.String,System.String@)\">\r\n    <summary>\r\n    Gets the default generator based on the file extension. HKLM\\Software\\Microsoft\\VS\\9.0\\Generators\\[prjfacguid]\\.extension\r\n    </summary>\r\n    <param name=\"filename\">File name with extension</param>\r\n    <param name=\"progID\">The generator prog ID</param>\r\n    <returns>S_OK if successful</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetDefaultGenerator(System.String,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetDefaultGenerator(System.String,System.String@)\">\r\n    <summary>\r\n    Gets the default generator based on the file extension. HKLM\\Software\\Microsoft\\VS\\9.0\\Generators\\[prjfacguid]\\.extension\r\n    </summary>\r\n    <param name=\"filename\">File name with extension</param>\r\n    <param name=\"progID\">The generator prog ID</param>\r\n    <returns>S_OK if successful</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetGeneratorInformation(string progId, out int generatesDesignTimeSource, out int generatesSharedDesignTimeSource, out int useTempPEFlag, out Guid guidGenerator)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetGeneratorInformation(System.String,System.Int32@,System.Int32@,System.Int32@,System.Guid@)\">\r\n    <summary>\r\n    Gets the generator information.\r\n    </summary>\r\n    <param name=\"progId\">prog id of the generator to be created. For e.g HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\9.0Exp\\Generators\\[prjfacguid]\\[wszProgId]</param>\r\n    <param name=\"generatesDesignTimeSource\">GeneratesDesignTimeSource key value</param>\r\n    <param name=\"generatesSharedDesignTimeSource\">GeneratesSharedDesignTimeSource key value</param>\r\n    <param name=\"useTempPEFlag\">UseDesignTimeCompilationFlag key value</param>\r\n    <param name=\"guiddGenerator\">CLSID key value</param>\r\n    <returns>S_OK if succesful</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetGeneratorInformation(System.String,System.Int32@,System.Int32@,System.Int32@,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GetGeneratorInformation(System.String,System.Int32@,System.Int32@,System.Int32@,System.Guid@)\">\r\n    <summary>\r\n    Gets the generator information.\r\n    </summary>\r\n    <param name=\"progId\">prog id of the generator to be created. For e.g HKLM\\SOFTWARE\\Microsoft\\VisualStudio\\9.0Exp\\Generators\\[prjfacguid]\\[wszProgId]</param>\r\n    <param name=\"generatesDesignTimeSource\">GeneratesDesignTimeSource key value</param>\r\n    <param name=\"generatesSharedDesignTimeSource\">GeneratesSharedDesignTimeSource key value</param>\r\n    <param name=\"useTempPEFlag\">UseDesignTimeCompilationFlag key value</param>\r\n    <param name=\"guiddGenerator\">CLSID key value</param>\r\n    <returns>S_OK if succesful</returns>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "serviceProvider",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.serviceProvider\">\r\n    <summary>\r\n    A service provider\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.serviceProvider",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.serviceProvider\">\r\n    <summary>\r\n    A service provider\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "GeneratesDesignTimeSource",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratesDesignTimeSource\">\r\n    <summary>\r\n    GeneratesDesignTimeSource reg value name under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\[VsVer]\\Generators\\[ProjFacGuid]\\[GeneratorProgId]\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratesDesignTimeSource",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratesDesignTimeSource\">\r\n    <summary>\r\n    GeneratesDesignTimeSource reg value name under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\[VsVer]\\Generators\\[ProjFacGuid]\\[GeneratorProgId]\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "GeneratorClsid",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorClsid\">\r\n    <summary>\r\n    CLSID reg value name under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\[VsVer]\\Generators\\[ProjFacGuid]\\[GeneratorProgId]\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorClsid",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratorClsid\">\r\n    <summary>\r\n    CLSID reg value name under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\[VsVer]\\Generators\\[ProjFacGuid]\\[GeneratorProgId]\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "GeneratesSharedDesignTimeSource",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratesSharedDesignTimeSource\">\r\n    <summary>\r\n    GeneratesSharedDesignTimeSource reg value name under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\[VsVer]\\Generators\\[ProjFacGuid]\\[GeneratorProgId]\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratesSharedDesignTimeSource",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.GeneratesSharedDesignTimeSource\">\r\n    <summary>\r\n    GeneratesSharedDesignTimeSource reg value name under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\[VsVer]\\Generators\\[ProjFacGuid]\\[GeneratorProgId]\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "projectType",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.projectType\">\r\n    <summary>\r\n    The project type guid of the associated project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.projectType",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.projectType\">\r\n    <summary>\r\n    The project type guid of the associated project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "generatorsMap",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.generatorsMap\">\r\n    <summary>\r\n    Caches all the generators registered for the project type.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.generatorsMap",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.generatorsMap\">\r\n    <summary>\r\n    Caches all the generators registered for the project type.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "baseGeneratorRegistryKey",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.baseGeneratorRegistryKey\">\r\n    <summary>\r\n    Base generator registry key for MPF based project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.baseGeneratorRegistryKey",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.baseGeneratorRegistryKey\">\r\n    <summary>\r\n    Base generator registry key for MPF based project\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "UseDesignTimeCompilationFlag",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.UseDesignTimeCompilationFlag\">\r\n    <summary>\r\n    UseDesignTimeCompilationFlag reg value name under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\[VsVer]\\Generators\\[ProjFacGuid]\\[GeneratorProgId]\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.UseDesignTimeCompilationFlag",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.UseDesignTimeCompilationFlag\">\r\n    <summary>\r\n    UseDesignTimeCompilationFlag reg value name under HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\VisualStudio\\[VsVer]\\Generators\\[ProjFacGuid]\\[GeneratorProgId]\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "private ILocalRegistry LocalRegistry",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.LocalRegistry\">\r\n    <summary>\r\n    Returns the local registry instance\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.LocalRegistry",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.LocalRegistry\">\r\n    <summary>\r\n    Returns the local registry instance\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public Guid ProjectGuid",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.ProjectGuid\">\r\n    <summary>\r\n    Defines the project type guid of the associated project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.ProjectGuid",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.ProjectGuid\">\r\n    <summary>\r\n    Defines the project type guid of the associated project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public System.IServiceProvider ServiceProvider",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.ServiceProvider\">\r\n    <summary>\r\n    Defines an associated service provider.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.ServiceProvider",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.ServiceProvider\">\r\n    <summary>\r\n    Defines an associated service provider.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private RegistryKey BaseGeneratorsKey",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.BaseGeneratorsKey\">\r\n    <summary>\r\n    Returns the project generator key under [VS-ConfigurationRoot]]\\Generators\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.BaseGeneratorsKey",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.BaseGeneratorsKey\">\r\n    <summary>\r\n    Returns the project generator key under [VS-ConfigurationRoot]]\\Generators\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public SingleFileGeneratorFactory(Guid projectType, System.IServiceProvider serviceProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.#ctor(System.Guid,System.IServiceProvider)\">\r\n    <summary>\r\n    Constructor for SingleFileGeneratorFactory\r\n    </summary>\r\n    <param name=\"projectGuid\">The project type guid of the associated project.</param>\r\n    <param name=\"serviceProvider\">A service provider.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.#ctor(System.Guid,System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory.#ctor(System.Guid,System.IServiceProvider)\">\r\n    <summary>\r\n    Constructor for SingleFileGeneratorFactory\r\n    </summary>\r\n    <param name=\"projectGuid\">The project type guid of the associated project.</param>\r\n    <param name=\"serviceProvider\">A service provider.</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class SingleFileGeneratorFactory\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory\">\r\n    <summary>\r\n    Provides implementation IVsSingleFileGeneratorFactory for\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SingleFileGeneratorFactory\">\r\n    <summary>\r\n    Provides implementation IVsSingleFileGeneratorFactory for\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public virtual EventDescriptorCollection GetEvents(System.Attribute[] attributes)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetEvents(System.Attribute[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetClassName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual PropertyDescriptorCollection GetProperties()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual AttributeCollection GetAttributes()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetAttributes",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual DesignPropertyDescriptor CreateDesignPropertyDescriptor(PropertyDescriptor propertyDescriptor)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.CreateDesignPropertyDescriptor(System.ComponentModel.PropertyDescriptor)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual PropertyDescriptorCollection GetProperties(System.Attribute[] attributes)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetProperties(System.Attribute[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EventDescriptor GetDefaultEvent()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetDefaultEvent",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string GetComponentName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetComponentName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual EventDescriptorCollection GetEvents()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetEvents",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual object GetEditor(Type editorBaseType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetEditor(System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual TypeConverter GetConverter()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetConverter",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual object GetPropertyOwner(PropertyDescriptor pd)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual PropertyDescriptor GetDefaultProperty()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.LocalizableProperties.GetDefaultProperty",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class LocalizableProperties\r\n\r\n#endregionICustomTypeDescriptor",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.LocalizableProperties\">\r\n    <summary>\r\n    Enables a managed object to expose properties and attributes for COM objects.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.LocalizableProperties",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.LocalizableProperties\">\r\n    <summary>\r\n    Enables a managed object to expose properties and attributes for COM objects.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "internal static bool TryGetActiveConfigurationAndPlatform(System.IServiceProvider serviceProvider, IVsHierarchy hierarchy, out string configuration, out string platform)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.TryGetActiveConfigurationAndPlatform(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@,System.String@)\">\r\n    <summary>\r\n    Retrives the configuration and the platform using the IVsSolutionBuildManager2 interface.\r\n    </summary>\r\n    <param name=\"serviceProvider\">A service provider.</param>\r\n    <param name=\"hierarchy\">The hierarchy whose configuration is requested.  This method calls into \r\n    native code and may be called on a background thread, so make sure the IVsHierarchy passed is \r\n    safe to use for that sort of interop.</param>\r\n    <param name=\"configuration\">The name of the active configuration.</param>\r\n    <param name=\"platform\">The name of the platform.</param>\r\n    <returns>true if successfull.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.TryGetActiveConfigurationAndPlatform(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@,System.String@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.TryGetActiveConfigurationAndPlatform(System.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String@,System.String@)\">\r\n    <summary>\r\n    Retrives the configuration and the platform using the IVsSolutionBuildManager2 interface.\r\n    </summary>\r\n    <param name=\"serviceProvider\">A service provider.</param>\r\n    <param name=\"hierarchy\">The hierarchy whose configuration is requested.  This method calls into \r\n    native code and may be called on a background thread, so make sure the IVsHierarchy passed is \r\n    safe to use for that sort of interop.</param>\r\n    <param name=\"configuration\">The name of the active configuration.</param>\r\n    <param name=\"platform\">The name of the platform.</param>\r\n    <returns>true if successfull.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]\r\ninternal static bool IsShellInCommandLineMode(System.IServiceProvider serviceProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsShellInCommandLineMode(System.IServiceProvider)\">\r\n    <summary>\r\n    Determines whether the shell is in command line mode.\r\n    </summary>\r\n    <param name=\"serviceProvider\">A reference to a Service Provider.</param>\r\n    <returns>true if the shell is in command line mode. false otherwise.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsShellInCommandLineMode(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsShellInCommandLineMode(System.IServiceProvider)\">\r\n    <summary>\r\n    Determines whether the shell is in command line mode.\r\n    </summary>\r\n    <param name=\"serviceProvider\">A reference to a Service Provider.</param>\r\n    <returns>true if the shell is in command line mode. false otherwise.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static MSBuild.Project InitializeMsBuildProject(MSBuild.ProjectCollection buildEngine, string fullProjectPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.InitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String)\">\r\n    <summary>\r\n    Initializes the in memory project. Sets BuildEnabled on the project to true.\r\n    </summary>\r\n    <param name=\"engine\">The build engine to use to create a build project.</param>\r\n    <param name=\"fullProjectPath\">The full path of the project.</param>\r\n    <returns>A loaded msbuild project.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.InitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.InitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String)\">\r\n    <summary>\r\n    Initializes the in memory project. Sets BuildEnabled on the project to true.\r\n    </summary>\r\n    <param name=\"engine\">The build engine to use to create a build project.</param>\r\n    <param name=\"fullProjectPath\">The full path of the project.</param>\r\n    <returns>A loaded msbuild project.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static MSBuild.ProjectCollection InitializeMsBuildEngine(MSBuild.ProjectCollection existingEngine, IServiceProvider serviceProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.InitializeMsBuildEngine(Microsoft.Build.Evaluation.ProjectCollection,System.IServiceProvider)\">\r\n    <summary>\r\n    Initialize the build engine. Sets the build enabled property to true. The engine is initialzed if the passed in engine is null or does not have its bin path set.\r\n    </summary>\r\n    <param name=\"engine\">An instance of MSBuild.ProjectCollection build engine, that will be checked if initialized.</param>\r\n    <param name=\"engine\">The service provider.</param>\r\n    <returns>The buildengine to use.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.InitializeMsBuildEngine(Microsoft.Build.Evaluation.ProjectCollection,System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.InitializeMsBuildEngine(Microsoft.Build.Evaluation.ProjectCollection,System.IServiceProvider)\">\r\n    <summary>\r\n    Initialize the build engine. Sets the build enabled property to true. The engine is initialzed if the passed in engine is null or does not have its bin path set.\r\n    </summary>\r\n    <param name=\"engine\">An instance of MSBuild.ProjectCollection build engine, that will be checked if initialized.</param>\r\n    <param name=\"engine\">The service provider.</param>\r\n    <returns>The buildengine to use.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static object ConvertToType<T>(T value, Type typeToConvert, CultureInfo culture)where T : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Helper method to call a converter explicitely to convert to an enum type\r\n    </summary>\r\n    <typeparam name=\"T\">THe enum to convert to</typeparam>\r\n    <typeparam name=\"V\">The converter that will be created</typeparam>\r\n    <param name=\"value\">The enum value to be converted to</param>\r\n    <param name=\"typeToConvert\">The type to convert</param>\r\n    <param name=\"culture\">The culture to use to read the localized strings</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ConvertToType``1(``0,System.Type,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Helper method to call a converter explicitely to convert to an enum type\r\n    </summary>\r\n    <typeparam name=\"T\">THe enum to convert to</typeparam>\r\n    <typeparam name=\"V\">The converter that will be created</typeparam>\r\n    <param name=\"value\">The enum value to be converted to</param>\r\n    <param name=\"typeToConvert\">The type to convert</param>\r\n    <param name=\"culture\">The culture to use to read the localized strings</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Design\", \"CA1062:Validate arguments of public methods\", MessageId = \"0\", Justification = \"The name is validated.\")]\r\npublic static bool ContainsInvalidFileNameChars(string name)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ContainsInvalidFileNameChars(System.String)\">\r\n    <summary>\r\n    Returns true if thename that can represent a path, absolut or relative, or a file name contains invalid filename characters.\r\n    </summary>\r\n    <param name=\"name\">File name</param>\r\n    <returns>true if file name is invalid</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.ContainsInvalidFileNameChars(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ContainsInvalidFileNameChars(System.String)\">\r\n    <summary>\r\n    Returns true if thename that can represent a path, absolut or relative, or a file name contains invalid filename characters.\r\n    </summary>\r\n    <param name=\"name\">File name</param>\r\n    <returns>true if file name is invalid</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static bool IsInAutomationFunction(IServiceProvider serviceProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsInAutomationFunction(System.IServiceProvider)\">\r\n    <include file='doc\\VsShellUtilities.uex' path='docs/doc[@for=\"Utilities.IsInAutomationFunction\"]/*' />\r\n    <devdoc>\r\n    Is an extensibility object executing an automation function.\r\n    </devdoc>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <returns>true if the extensiblity object is executing an automation function.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsInAutomationFunction(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsInAutomationFunction(System.IServiceProvider)\">\r\n    <include file='doc\\VsShellUtilities.uex' path='docs/doc[@for=\"Utilities.IsInAutomationFunction\"]/*' />\r\n    <devdoc>\r\n    Is an extensibility object executing an automation function.\r\n    </devdoc>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <returns>true if the extensiblity object is executing an automation function.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static void RecursivelyCopyDirectory(string source, string target)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.RecursivelyCopyDirectory(System.String,System.String)\">\r\n    <summary>\r\n    Copy a directory recursively to the specified non-existing directory\r\n    </summary>\r\n    <param name=\"source\">Directory to copy from</param>\r\n    <param name=\"target\">Directory to copy to</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.RecursivelyCopyDirectory(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.RecursivelyCopyDirectory(System.String,System.String)\">\r\n    <summary>\r\n    Copy a directory recursively to the specified non-existing directory\r\n    </summary>\r\n    <param name=\"source\">Directory to copy from</param>\r\n    <param name=\"target\">Directory to copy to</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"msbuild\")]\r\npublic static string GetMsBuildPath(IServiceProvider serviceProvider)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider)\">\r\n    <summary>\r\n    Look in the registry under the current hive for the path\r\n    of MSBuild\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider)\">\r\n    <summary>\r\n    Look in the registry under the current hive for the path\r\n    of MSBuild\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static void ValidateFileName(IServiceProvider serviceProvider, string filePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ValidateFileName(System.IServiceProvider,System.String)\">\r\n    <summary>\r\n    Validates a file path by validating all file parts. If the \r\n    the file name is invalid it throws an exception if the project is in automation. Otherwise it shows a dialog box with the error message.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider</param>\r\n    <param name=\"filePath\">A full path to a file name</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">In case of failure an InvalidOperationException is thrown.</exception>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.ValidateFileName(System.IServiceProvider,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ValidateFileName(System.IServiceProvider,System.String)\">\r\n    <summary>\r\n    Validates a file path by validating all file parts. If the \r\n    the file name is invalid it throws an exception if the project is in automation. Otherwise it shows a dialog box with the error message.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider</param>\r\n    <param name=\"filePath\">A full path to a file name</param>\r\n    <exception cref=\"T:System.InvalidOperationException\">In case of failure an InvalidOperationException is thrown.</exception>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"CALPOLESTR\")]\r\npublic static CALPOLESTR CreateCALPOLESTR(IList<string> strings)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateCALPOLESTR(System.Collections.Generic.IList{System.String})\">\r\n    <summary>\r\n    Creates a CALPOLESTR from a list of strings \r\n    It is the responsability of the caller to release this memory.\r\n    </summary>\r\n    <param name=\"guids\"></param>\r\n    <returns>A CALPOLESTR that was created from the the list of strings.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.CreateCALPOLESTR(System.Collections.Generic.IList{System.String})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateCALPOLESTR(System.Collections.Generic.IList{System.String})\">\r\n    <summary>\r\n    Creates a CALPOLESTR from a list of strings \r\n    It is the responsability of the caller to release this memory.\r\n    </summary>\r\n    <param name=\"guids\"></param>\r\n    <returns>A CALPOLESTR that was created from the the list of strings.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Ms\")]\r\npublic static string GetMsBuildPath(IServiceProvider serviceProvider, string version)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider,System.String)\">\r\n    <summary>\r\n    Search the registry for the tools path for MSBuild.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <param name=\"version\">Msbuild version.</param>\r\n    <returns>The msbuild tools path</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetMsBuildPath(System.IServiceProvider,System.String)\">\r\n    <summary>\r\n    Search the registry for the tools path for MSBuild.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <param name=\"version\">Msbuild version.</param>\r\n    <returns>The msbuild tools path</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1720:IdentifiersShouldNotContainTypeNames\", MessageId = \"obj\")]\r\npublic static bool IsSameComObject(object obj1, object obj2)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsSameComObject(System.Object,System.Object)\">\r\n    <summary>\r\n    Verifies that two objects represent the same instance of a COM object.\r\n    This essentially compares the IUnkown pointers of the 2 objects.\r\n    This is needed in scenario where aggregation is involved.\r\n    </summary>\r\n    <param name=\"obj1\">Can be an object, interface or IntPtr</param>\r\n    <param name=\"obj2\">Can be an object, interface or IntPtr</param>\r\n    <returns>True if the 2 items represent the same thing</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsSameComObject(System.Object,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsSameComObject(System.Object,System.Object)\">\r\n    <summary>\r\n    Verifies that two objects represent the same instance of a COM object.\r\n    This essentially compares the IUnkown pointers of the 2 objects.\r\n    This is needed in scenario where aggregation is involved.\r\n    </summary>\r\n    <param name=\"obj1\">Can be an object, interface or IntPtr</param>\r\n    <param name=\"obj2\">Can be an object, interface or IntPtr</param>\r\n    <returns>True if the 2 items represent the same thing</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static MSBuild.Project ReinitializeMsBuildProject(MSBuild.ProjectCollection buildEngine, string fullProjectPath, MSBuild.Project exitingBuildProject)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ReinitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String,Microsoft.Build.Evaluation.Project)\">\r\n    <summary>\r\n    Loads a project file for the file. If the build project exists and it was loaded with a different file then it is unloaded first. \r\n    </summary>\r\n    <param name=\"engine\">The build engine to use to create a build project.</param>\r\n    <param name=\"fullProjectPath\">The full path of the project.</param>\r\n    <param name=\"exitingBuildProject\">An Existing build project that will be reloaded.</param>\r\n    <returns>A loaded msbuild project.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.ReinitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String,Microsoft.Build.Evaluation.Project)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ReinitializeMsBuildProject(Microsoft.Build.Evaluation.ProjectCollection,System.String,Microsoft.Build.Evaluation.Project)\">\r\n    <summary>\r\n    Loads a project file for the file. If the build project exists and it was loaded with a different file then it is unloaded first. \r\n    </summary>\r\n    <param name=\"engine\">The build engine to use to create a build project.</param>\r\n    <param name=\"fullProjectPath\">The full path of the project.</param>\r\n    <param name=\"exitingBuildProject\">An Existing build project that will be reloaded.</param>\r\n    <returns>A loaded msbuild project.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"CADWORD\")]\r\npublic static CADWORD CreateCADWORD(IList<tagVsSccFilesFlags> flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateCADWORD(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    Creates a CADWORD from a list of tagVsSccFilesFlags. Memory is allocated for the elems. \r\n    It is the responsability of the caller to release this memory.\r\n    </summary>\r\n    <param name=\"guids\"></param>\r\n    <returns>A CADWORD created from the list of tagVsSccFilesFlags.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.CreateCADWORD(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateCADWORD(System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    Creates a CADWORD from a list of tagVsSccFilesFlags. Memory is allocated for the elems. \r\n    It is the responsability of the caller to release this memory.\r\n    </summary>\r\n    <param name=\"guids\"></param>\r\n    <returns>A CADWORD created from the list of tagVsSccFilesFlags.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static bool IsFilePartInValid(string filePart)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsFilePartInValid(System.String)\">\r\n    <summary>\r\n    Checks whether a file part contains valid characters. The file part can be any part of a non rooted path.\r\n    </summary>\r\n    <param name=\"filePart\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsFilePartInValid(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsFilePartInValid(System.String)\">\r\n    <summary>\r\n    Checks whether a file part contains valid characters. The file part can be any part of a non rooted path.\r\n    </summary>\r\n    <param name=\"filePart\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static string CreateSemicolonDelimitedListOfStringFromGuids(Guid[] guids)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateSemicolonDelimitedListOfStringFromGuids(System.Guid[])\">\r\n    <summary>\r\n    Creates a semicolon delinited list of strings. This can be used to provide the properties for VSHPROPID_CfgPropertyPagesCLSIDList, VSHPROPID_PropertyPagesCLSIDList, VSHPROPID_PriorityPropertyPagesCLSIDList\r\n    </summary>\r\n    <param name=\"guids\">An array of Guids.</param>\r\n    <returns>A semicolon delimited string, or null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.CreateSemicolonDelimitedListOfStringFromGuids(System.Guid[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CreateSemicolonDelimitedListOfStringFromGuids(System.Guid[])\">\r\n    <summary>\r\n    Creates a semicolon delinited list of strings. This can be used to provide the properties for VSHPROPID_CfgPropertyPagesCLSIDList, VSHPROPID_PropertyPagesCLSIDList, VSHPROPID_PriorityPropertyPagesCLSIDList\r\n    </summary>\r\n    <param name=\"guids\">An array of Guids.</param>\r\n    <returns>A semicolon delimited string, or null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static bool IsFileNameInvalid(string fileName)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Utilities.IsFileNameInvalid(System.String)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsFileNameInvalid(System.String)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.Utilities.IsFileNameInvalid(System.String)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static string GetActiveConfigurationName(EnvDTE.Project automationObject)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetActiveConfigurationName(EnvDTE.Project)\">\r\n    <summary>\r\n    Gets the active configuration name.\r\n    </summary>\r\n    <param name=\"automationObject\">The automation object.</param>\r\n    <returns>The name of the active configuartion.</returns>\t\t\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetActiveConfigurationName(EnvDTE.Project)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetActiveConfigurationName(EnvDTE.Project)\">\r\n    <summary>\r\n    Gets the active configuration name.\r\n    </summary>\r\n    <param name=\"automationObject\">The automation object.</param>\r\n    <returns>The name of the active configuartion.</returns>\t\t\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static bool IsTemplateFile(string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsTemplateFile(System.String)\">\r\n    <summary>\r\n    Determines if a file is a template.\r\n    </summary>\r\n    <param name=\"fileName\">The file to check whether it is a template file</param>\r\n    <returns>true if the file is a template file</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsTemplateFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsTemplateFile(System.String)\">\r\n    <summary>\r\n    Determines if a file is a template.\r\n    </summary>\r\n    <param name=\"fileName\">The file to check whether it is a template file</param>\r\n    <returns>true if the file is a template file</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\")]\r\npublic static ImageList GetImageList(Stream imageStream)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.IO.Stream)\">\r\n    <summary>\r\n    Splits a bitmap from a Stream into an ImageList\r\n    </summary>\r\n    <param name=\"imageStream\">A Stream representing a Bitmap</param>\r\n    <returns>An ImageList object representing the images from the given stream</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.IO.Stream)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.IO.Stream)\">\r\n    <summary>\r\n    Splits a bitmap from a Stream into an ImageList\r\n    </summary>\r\n    <param name=\"imageStream\">A Stream representing a Bitmap</param>\r\n    <returns>An ImageList object representing the images from the given stream</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Reliability\", \"CA2000:Dispose objects before losing scope\")]\r\npublic static ImageList GetImageList(object imageListAsPointer)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.Object)\">\r\n    <summary>\r\n    Splits a bitmap from a pointer to an ImageList\r\n    </summary>\r\n    <param name=\"imageListAsPointer\">A pointer to a bitmap of images to split</param>\r\n    <returns>An ImageList object representing the images from the given stream</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetImageList(System.Object)\">\r\n    <summary>\r\n    Splits a bitmap from a pointer to an ImageList\r\n    </summary>\r\n    <param name=\"imageListAsPointer\">A pointer to a bitmap of images to split</param>\r\n    <returns>An ImageList object representing the images from the given stream</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static IntPtr QueryInterfaceIUnknown(object objToQuery)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.QueryInterfaceIUnknown(System.Object)\">\r\n    <summary>\r\n    Retrieve the IUnknown for the managed or COM object passed in.\r\n    </summary>\r\n    <param name=\"objToQuery\">Managed or COM object.</param>\r\n    <returns>Pointer to the IUnknown interface of the object.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.QueryInterfaceIUnknown(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.QueryInterfaceIUnknown(System.Object)\">\r\n    <summary>\r\n    Retrieve the IUnknown for the managed or COM object passed in.\r\n    </summary>\r\n    <param name=\"objToQuery\">Managed or COM object.</param>\r\n    <returns>Pointer to the IUnknown interface of the object.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static string CanonicalizeFileName(string anyFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CanonicalizeFileName(System.String)\">\r\n    <summary>\r\n    Canonicalizes a file name, including:\r\n     - determines the full path to the file\r\n     - casts to upper case\r\n    Canonicalizing a file name makes it possible to compare file names using simple simple string comparison.\r\n    \r\n    Note: this method does not handle shared drives and UNC drives.\r\n    </summary>\r\n    <param name=\"anyFileName\">A file name, which can be relative/absolute and contain lower-case/upper-case characters.</param>\r\n    <returns>Canonicalized file name.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.CanonicalizeFileName(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.CanonicalizeFileName(System.String)\">\r\n    <summary>\r\n    Canonicalizes a file name, including:\r\n     - determines the full path to the file\r\n     - casts to upper case\r\n    Canonicalizing a file name makes it possible to compare file names using simple simple string comparison.\r\n    \r\n    Note: this method does not handle shared drives and UNC drives.\r\n    </summary>\r\n    <param name=\"anyFileName\">A file name, which can be relative/absolute and contain lower-case/upper-case characters.</param>\r\n    <returns>Canonicalized file name.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static string SetStringValueFromConvertedEnum<T>(T enumValue, CultureInfo culture)where T : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Sets a string value from an enum\r\n    </summary>\r\n    <typeparam name=\"T\">The enum type</typeparam>\r\n    <param name=\"enumValue\">The value of teh enum.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.SetStringValueFromConvertedEnum``1(``0,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Sets a string value from an enum\r\n    </summary>\r\n    <typeparam name=\"T\">The enum type</typeparam>\r\n    <param name=\"enumValue\">The value of teh enum.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal static T GetOuterAs<T>(object o)where T : class",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetOuterAs``1(System.Object)\">\r\n    <summary>\r\n    Get the outer T implementation\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetOuterAs``1(System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetOuterAs``1(System.Object)\">\r\n    <summary>\r\n    Get the outer T implementation\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static Nullable<T> ConvertFromType<T>(string value, CultureInfo culture)where T : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Helper method for converting from a string to an enum using a converter.\r\n    </summary>\r\n    <typeparam name=\"T\"></typeparam>\r\n    <param name=\"value\"></param>\r\n    <param name=\"culture\">The culture to use to read the localized strings</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.ConvertFromType``1(System.String,System.Globalization.CultureInfo)\">\r\n    <summary>\r\n    Helper method for converting from a string to an enum using a converter.\r\n    </summary>\r\n    <typeparam name=\"T\"></typeparam>\r\n    <param name=\"value\"></param>\r\n    <param name=\"culture\">The culture to use to read the localized strings</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public static bool IsVisualStudioInDesignMode(IServiceProvider site)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsVisualStudioInDesignMode(System.IServiceProvider)\">\r\n    <summary>\r\n    Is Visual Studio in design mode.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <returns>true if visual studio is in design mode</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsVisualStudioInDesignMode(System.IServiceProvider)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsVisualStudioInDesignMode(System.IServiceProvider)\">\r\n    <summary>\r\n    Is Visual Studio in design mode.\r\n    </summary>\r\n    <param name=\"serviceProvider\">The service provider.</param>\r\n    <returns>true if visual studio is in design mode</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static EnumConverter GetEnumConverter<T>()where T : struct",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetEnumConverter``1\">\r\n    <summary>\r\n    Gets an instance of an EnumConverter for enums that have PropertyPageTypeConverter attribute\r\n    </summary>\r\n    <typeparam name=\"T\">The type to search for the PropertyPageTypeConverter attribute.</typeparam>\r\n    <returns>An instance of an enum converter, or null if none found.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GetEnumConverter``1",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GetEnumConverter``1\">\r\n    <summary>\r\n    Gets an instance of an EnumConverter for enums that have PropertyPageTypeConverter attribute\r\n    </summary>\r\n    <typeparam name=\"T\">The type to search for the PropertyPageTypeConverter attribute.</typeparam>\r\n    <returns>An instance of an enum converter, or null if none found.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic static Guid[] GuidsArrayFromSemicolonDelimitedStringOfGuids(string guidList)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GuidsArrayFromSemicolonDelimitedStringOfGuids(System.String)\">\r\n    <summary>\r\n    Take list of guids as a single string and generate an array of Guids from it\r\n    </summary>\r\n    <param name=\"guidList\">Semi-colon separated list of Guids</param>\r\n    <returns>Array of Guids</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.GuidsArrayFromSemicolonDelimitedStringOfGuids(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.GuidsArrayFromSemicolonDelimitedStringOfGuids(System.String)\">\r\n    <summary>\r\n    Take list of guids as a single string and generate an array of Guids from it\r\n    </summary>\r\n    <param name=\"guidList\">Semi-colon separated list of Guids</param>\r\n    <returns>Array of Guids</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private static bool IsFileNameAllGivenCharacter(char c, string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsFileNameAllGivenCharacter(System.Char,System.String)\">\r\n    <summary>>\r\n    Checks if the file name is all the given character.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.Utilities.IsFileNameAllGivenCharacter(System.Char,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.Utilities.IsFileNameAllGivenCharacter(System.Char,System.String)\">\r\n    <summary>>\r\n    Checks if the file name is all the given character.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "curlyBraces",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Utilities.curlyBraces",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "defaultMSBuildVersion",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.Utilities.defaultMSBuildVersion",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public static class Utilities",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.Utilities",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual void Refresh()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.Refresh",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_DeployDependencies(uint celt, IVsDeployDependency[] rgpdpd, uint[] pcActual)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_DeployDependencies(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsDeployDependency[],System.UInt32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void OnProjectPropertyChanged(object sender, ProjectPropertyChangedArgs args)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.OnProjectPropertyChanged(System.Object,Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_CanonicalName(out string pbstrCanonicalName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_CanonicalName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Description(out string pbstrDescription)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_Description(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_KeyOutputObject(out IVsOutput2 ppKeyOutput)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_KeyOutputObject(Microsoft.VisualStudio.Shell.Interop.IVsOutput2@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_KeyOutput(out string pbstrCanonicalName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_KeyOutput(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_DisplayName(out string pbstrDisplayName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_DisplayName(System.String@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual void InvalidateGroup()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.InvalidateGroup",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Property(string pszProperty, out object pvar)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_Property(System.String,System.Object@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_Outputs(uint celt, IVsOutput2[] rgpcfg, uint[] pcActual)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_Outputs(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsOutput2[],System.UInt32[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int get_ProjectCfg(out IVsProjectCfg2 ppIVsProjectCfg2)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.get_ProjectCfg(Microsoft.VisualStudio.Shell.Interop.IVsProjectCfg2@)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "projectCfg",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.OutputGroup.projectCfg",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "name",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.OutputGroup.name",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "targetName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.OutputGroup.targetName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.OutputGroup.project",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "keyOutput",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.OutputGroup.keyOutput",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "outputs",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.OutputGroup.outputs",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "protected string TargetName",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.OutputGroup.TargetName\">\r\n    <summary>\r\n    Gets the msbuild target name which is assciated to the outputgroup.\r\n    ProjectNode defines a static collection of output group names and their associated MsBuild target\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.OutputGroup.TargetName",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.OutputGroup.TargetName\">\r\n    <summary>\r\n    Gets the msbuild target name which is assciated to the outputgroup.\r\n    ProjectNode defines a static collection of output group names and their associated MsBuild target\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected ProjectConfig ProjectCfg",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.OutputGroup.ProjectCfg\">\r\n    <summary>\r\n    Get the project configuration object associated with this output group\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.OutputGroup.ProjectCfg",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.OutputGroup.ProjectCfg\">\r\n    <summary>\r\n    Get the project configuration object associated with this output group\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected ProjectNode Project",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.OutputGroup.Project\">\r\n    <summary>\r\n    Get the project object that produces this output group.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.OutputGroup.Project",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.OutputGroup.Project\">\r\n    <summary>\r\n    Get the project object that produces this output group.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public OutputGroup(string outputName, string msBuildTargetName, ProjectNode projectManager, ProjectConfig configuration)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OutputGroup.#ctor(System.String,System.String,Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectConfig)\">\r\n    <summary>\r\n    Constructor for IVSOutputGroup2 implementation\r\n    </summary>\r\n    <param name=\"outputName\">Name of the output group. See VS_OUTPUTGROUP_CNAME_Build in vsshell.idl for the list of standard values</param>\r\n    <param name=\"msBuildTargetName\">MSBuild target name</param>\r\n    <param name=\"projectManager\">Project that produce this output</param>\r\n    <param name=\"configuration\">Configuration that produce this output</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.OutputGroup.#ctor(System.String,System.String,Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectConfig)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.OutputGroup.#ctor(System.String,System.String,Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectConfig)\">\r\n    <summary>\r\n    Constructor for IVSOutputGroup2 implementation\r\n    </summary>\r\n    <param name=\"outputName\">Name of the output group. See VS_OUTPUTGROUP_CNAME_Build in vsshell.idl for the list of standard values</param>\r\n    <param name=\"msBuildTargetName\">MSBuild target name</param>\r\n    <param name=\"projectManager\">Project that produce this output</param>\r\n    <param name=\"configuration\">Configuration that produce this output</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class OutputGroup\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.OutputGroup\">\r\n    <summary>\r\n    Allows projects to group outputs according to usage.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.OutputGroup",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.OutputGroup\">\r\n    <summary>\r\n    Allows projects to group outputs according to usage.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override string GetClassName()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNodeProperties.GetClassName",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string FileName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNodeProperties.FileName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string Extension",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNodeProperties.Extension",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string FullPath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNodeProperties.FullPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual BuildAction BuildAction",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNodeProperties.BuildAction",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public FileNodeProperties(HierarchyNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNodeProperties.#ctor(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class FileNodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FileNodeProperties",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "Shell32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Shell32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OciDll",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.OciDll",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mqrt",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Mqrt",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Advapi32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Advapi32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Gdiplus",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Gdiplus",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Comctl32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Comctl32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Msi",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Msi",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Version",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Version",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Odbc32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Odbc32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "PerfCounter",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.PerfCounter",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Ntdll",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Ntdll",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mscorwks",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Mscorwks",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Uxtheme",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Uxtheme",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mscoree",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Mscoree",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Crypt32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Crypt32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Activeds",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Activeds",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Shlwapi",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Shlwapi",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Winspool",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Winspool",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Powrprof",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Powrprof",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Oleaut32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Oleaut32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Oleacc",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Oleacc",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Wtsapi32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Wtsapi32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WinMM",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.WinMM",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Hhctrl",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Hhctrl",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OraMtsDll",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.OraMtsDll",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Kernel32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Kernel32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SNI",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.SNI",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Shfolder",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Shfolder",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "User32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.User32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Psapi",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Psapi",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Loadperf",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Loadperf",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Olepro32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Olepro32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Ole32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Ole32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Gdi32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Gdi32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Imm32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Imm32",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Vsassert",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Vsassert",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Comdlg32",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ExternDll.Comdlg32",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal static class ExternDll\r\n\r\n#endif //!FEATURE_PAL",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ExternDll",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void RenameChildNodes(FileNode parentNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameChildNodes(Microsoft.VisualStudio.Project.FileNode)\">\r\n    <summary>\r\n    Rename all childnodes\r\n    </summary>\r\n    <param name=\"newFileNode\">The newly added Parent node.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RenameChildNodes(Microsoft.VisualStudio.Project.FileNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameChildNodes(Microsoft.VisualStudio.Project.FileNode)\">\r\n    <summary>\r\n    Rename all childnodes\r\n    </summary>\r\n    <param name=\"newFileNode\">The newly added Parent node.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override DocumentManager GetDocumentManager()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.GetDocumentManager\">\r\n    <summary>\r\n    Returns a specific Document manager to handle files\r\n    </summary>\r\n    <returns>Document manager object</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetDocumentManager",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.GetDocumentManager\">\r\n    <summary>\r\n    Returns a specific Document manager to handle files\r\n    </summary>\r\n    <returns>Document manager object</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override int SetEditLabel(string label, string relativePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String,System.String)\">\r\n    <summary>\r\n    Rename the underlying document based on the change the user just made to the edit label.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String,System.String)\">\r\n    <summary>\r\n    Rename the underlying document based on the change the user just made to the edit label.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void RenameCaseOnlyChange(string newFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameCaseOnlyChange(System.String)\">\r\n    <summary>\r\n    Renames the file node for a case only change.\r\n    </summary>\r\n    <param name=\"newFileName\">The new file name.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RenameCaseOnlyChange(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameCaseOnlyChange(System.String)\">\r\n    <summary>\r\n    Renames the file node for a case only change.\r\n    </summary>\r\n    <param name=\"newFileName\">The new file name.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal virtual void OnCustomToolNameSpaceChanged(object sender, HierarchyNodeEventArgs e)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.OnCustomToolNameSpaceChanged(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)\">\r\n    <summary>\r\n    Event handler for the Custom tool namespce property changes\r\n    </summary>\r\n    <param name=\"sender\">FileNode sending it</param>\r\n    <param name=\"e\">Node event args</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.OnCustomToolNameSpaceChanged(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.OnCustomToolNameSpaceChanged(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)\">\r\n    <summary>\r\n    Event handler for the Custom tool namespce property changes\r\n    </summary>\r\n    <param name=\"sender\">FileNode sending it</param>\r\n    <param name=\"e\">Node event args</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual FileNode RenameFileNode(string oldFileName, string newFileName, uint newParentId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameFileNode(System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Renames the file in the hierarchy by removing old node and adding a new node in the hierarchy.\r\n    </summary>\r\n    <param name=\"oldFileName\">The old file name.</param>\r\n    <param name=\"newFileName\">The new file name</param>\r\n    <param name=\"newParentId\">The new parent id of the item.</param>\r\n    <returns>The newly added FileNode.</returns>\r\n    <remarks>While a new node will be used to represent the item, the underlying MSBuild item will be the same and as a result file properties saved in the project file will not be lost.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RenameFileNode(System.String,System.String,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameFileNode(System.String,System.String,System.UInt32)\">\r\n    <summary>\r\n    Renames the file in the hierarchy by removing old node and adding a new node in the hierarchy.\r\n    </summary>\r\n    <param name=\"oldFileName\">The old file name.</param>\r\n    <param name=\"newFileName\">The new file name</param>\r\n    <param name=\"newParentId\">The new parent id of the item.</param>\r\n    <returns>The newly added FileNode.</returns>\r\n    <remarks>While a new node will be used to represent the item, the underlying MSBuild item will be the same and as a result file properties saved in the project file will not be lost.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default file icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default file icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private FileNode RenameFileNode(string oldFileName, string newFileName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RenameFileNode(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Scc\")]\r\n[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"scc\")]\r\nprotected internal override void GetSccSpecialFiles(string sccFile, IList<string> files, IList<tagVsSccFilesFlags> flags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    This method should be overridden to provide the list of special files and associated flags for source control.\r\n    </summary>\r\n    <param name=\"sccFile\">One of the file associated to the node.</param>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.GetSccSpecialFiles(System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{Microsoft.VisualStudio.Shell.Interop.tagVsSccFilesFlags})\">\r\n    <summary>\r\n    This method should be overridden to provide the list of special files and associated flags for source control.\r\n    </summary>\r\n    <param name=\"sccFile\">One of the file associated to the node.</param>\r\n    <param name=\"files\">The list of files to be placed under source control.</param>\r\n    <param name=\"flags\">The flags that are associated to the files.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual ISingleFileGenerator CreateSingleFileGenerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.CreateSingleFileGenerator\">\r\n    <summary>\r\n    factory method for creating single file generators.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.CreateSingleFileGenerator",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.CreateSingleFileGenerator\">\r\n    <summary>\r\n    factory method for creating single file generators.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override HierarchyNode GetDragTargetHandlerNode()",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.FileNode.GetDragTargetHandlerNode\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetDragTargetHandlerNode",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.FileNode.GetDragTargetHandlerNode\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int AfterSaveItemAs(IntPtr docData, string newFilePath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.AfterSaveItemAs(System.IntPtr,System.String)\">\r\n    <summary>\r\n    Performs a SaveAs operation of an open document. Called from SaveItem after the running document table has been updated with the new doc data.\r\n    </summary>\r\n    <param name=\"docData\">A pointer to the document in the rdt</param>\r\n    <param name=\"newFilePath\">The new file path to the document</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.AfterSaveItemAs(System.IntPtr,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.AfterSaveItemAs(System.IntPtr,System.String)\">\r\n    <summary>\r\n    Performs a SaveAs operation of an open document. Called from SaveItem after the running document table has been updated with the new doc data.\r\n    </summary>\r\n    <param name=\"docData\">A pointer to the document in the rdt</param>\r\n    <param name=\"newFilePath\">The new file path to the document</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private List<HierarchyNode> GetChildNodes()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetChildNodes",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void SetNewParentOnChildNodes(FileNode newFileNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.SetNewParentOnChildNodes(Microsoft.VisualStudio.Project.FileNode)\">\r\n    <summary>\r\n    Update the ChildNodes after the parent node has been renamed\r\n    </summary>\r\n    <param name=\"newFileNode\">The new FileNode created as part of the rename of this node</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.SetNewParentOnChildNodes(Microsoft.VisualStudio.Project.FileNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.SetNewParentOnChildNodes(Microsoft.VisualStudio.Project.FileNode)\">\r\n    <summary>\r\n    Update the ChildNodes after the parent node has been renamed\r\n    </summary>\r\n    <param name=\"newFileNode\">The new FileNode created as part of the rename of this node</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal virtual void OnCustomToolChanged(object sender, HierarchyNodeEventArgs e)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.OnCustomToolChanged(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)\">\r\n    <summary>\r\n    Event handler for the Custom tool property changes\r\n    </summary>\r\n    <param name=\"sender\">FileNode sending it</param>\r\n    <param name=\"e\">Node event args</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.OnCustomToolChanged(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.OnCustomToolChanged(System.Object,Microsoft.VisualStudio.Project.HierarchyNodeEventArgs)\">\r\n    <summary>\r\n    Event handler for the Custom tool property changes\r\n    </summary>\r\n    <param name=\"sender\">FileNode sending it</param>\r\n    <param name=\"e\">Node event args</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal protected virtual bool IsFileOnDisk(bool showMessage)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.IsFileOnDisk(System.Boolean)\">\r\n    <summary>\r\n    Determine if this item is represented physical on disk and shows a messagebox in case that the file is not present and a UI is to be presented.\r\n    </summary>\r\n    <param name=\"showMessage\">true if user should be presented for UI in case the file is not present</param>\r\n    <returns>true if file is on disk</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.IsFileOnDisk(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.IsFileOnDisk(System.Boolean)\">\r\n    <summary>\r\n    Determine if this item is represented physical on disk and shows a messagebox in case that the file is not present and a UI is to be presented.\r\n    </summary>\r\n    <param name=\"showMessage\">true if user should be presented for UI in case the file is not present</param>\r\n    <returns>true if file is on disk</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void RenameInStorage(string oldName, string newName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameInStorage(System.String,System.String)\">\r\n    <summary>\r\n    This should be overriden for node that are not saved on disk\r\n    </summary>\r\n    <param name=\"oldName\">Previous name in storage</param>\r\n    <param name=\"newName\">New name in storage</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RenameInStorage(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameInStorage(System.String,System.String)\">\r\n    <summary>\r\n    This should be overriden for node that are not saved on disk\r\n    </summary>\r\n    <param name=\"oldName\">Previous name in storage</param>\r\n    <param name=\"newName\">New name in storage</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override void DeleteFromStorage(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.DeleteFromStorage(System.String)\">\r\n    <summary>\r\n    Delete the item corresponding to the specified path from storage.\r\n    </summary>\r\n    <param name=\"path\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.DeleteFromStorage(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.DeleteFromStorage(System.String)\">\r\n    <summary>\r\n    Delete the item corresponding to the specified path from storage.\r\n    </summary>\r\n    <param name=\"path\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void RunGenerator()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RunGenerator\">\r\n    <summary>\r\n    Runs a generator.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RunGenerator",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RunGenerator\">\r\n    <summary>\r\n    Runs a generator.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int SetEditLabel(string label)",
                "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String)\" -->\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<!-- Badly formed XML comment ignored for member \"M:Microsoft.VisualStudio.Project.FileNode.SetEditLabel(System.String)\" -->\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual void RecoverFromRenameFailure(string fileThatFailed, string originalFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RecoverFromRenameFailure(System.String,System.String)\">\r\n    <summary>\r\n    Tries recovering from a rename failure.\r\n    </summary>\r\n    <param name=\"fileThatFailed\"> The file that failed to be renamed.</param>\r\n    <param name=\"originalFileName\">The original filenamee</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RecoverFromRenameFailure(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RecoverFromRenameFailure(System.String,System.String)\">\r\n    <summary>\r\n    Tries recovering from a rename failure.\r\n    </summary>\r\n    <param name=\"fileThatFailed\"> The file that failed to be renamed.</param>\r\n    <param name=\"originalFileName\">The original filenamee</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal protected virtual bool IsFileOnDisk(string path)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.IsFileOnDisk(System.String)\">\r\n    <summary>\r\n    Determine if the file represented by \"path\" exist in storage.\r\n    Override this method if your files are not persisted on disk.\r\n    </summary>\r\n    <param name=\"path\">Url representing the file</param>\r\n    <returns>True if the file exist</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.IsFileOnDisk(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.IsFileOnDisk(System.String)\">\r\n    <summary>\r\n    Determine if the file represented by \"path\" exist in storage.\r\n    Override this method if your files are not persisted on disk.\r\n    </summary>\r\n    <param name=\"path\">Url representing the file</param>\r\n    <returns>True if the file exist</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void DoDefaultAction()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.DoDefaultAction",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.GetAutomationObject\">\r\n    <summary>\r\n    Get an instance of the automation object for a FileNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OAFileNode if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.GetAutomationObject\">\r\n    <summary>\r\n    Get an instance of the automation object for a FileNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OAFileNode if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal bool RenameDocument(string oldName, string newName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameDocument(System.String,System.String)\">\r\n    <summary>\r\n    Get's called to rename the eventually running document this hierarchyitem points to\r\n    </summary>\r\n    returns FALSE if the doc can not be renamed\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.RenameDocument(System.String,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.RenameDocument(System.String,System.String)\">\r\n    <summary>\r\n    Get's called to rename the eventually running document this hierarchyitem points to\r\n    </summary>\r\n    returns FALSE if the doc can not be renamed\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.GetMkDocument",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "extensionIcons",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.FileNode.extensionIcons",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override string Caption",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FileNode.Caption\">\r\n    <summary>\r\n    overwrites of the generic hierarchyitem.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNode.Caption",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.FileNode.Caption\">\r\n    <summary>\r\n    overwrites of the generic hierarchyitem.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int MenuCommandId",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNode.MenuCommandId",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int ImageIndex",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNode.ImageIndex",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override Guid ItemTypeGuid",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNode.ItemTypeGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string FileName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNode.FileName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Url",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.FileNode.Url",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public FileNode(ProjectNode root, ProjectElement element): base (root, element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the FileNode\r\n    </summary>\r\n    <param name=\"root\">Root of the hierarchy</param>\r\n    <param name=\"e\">Associated project element</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the FileNode\r\n    </summary>\r\n    <param name=\"root\">Root of the hierarchy</param>\r\n    <param name=\"e\">Associated project element</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Performance\", \"CA1810:InitializeReferenceTypeStaticFieldsInline\")]\r\nstatic FileNode()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileNode.#cctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class FileNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.FileNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public object Extender(string extenderName)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.Extender(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProjectDesignerPages(CAUUID[] pages)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration independent.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectDesignerPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Implementation of the IVsSpecifyProjectDesignerPages. It will retun the pages that are configuration independent.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "object EnvDTE80.IInternalExtenderProvider.GetExtender(string extenderCATID, string extenderName, object extendeeObject, EnvDTE.IExtenderSite extenderSite, int cookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.EnvDTE80#IInternalExtenderProvider#GetExtender(System.String,System.String,System.Object,EnvDTE.IExtenderSite,System.Int32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string GetComponentName()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetComponentName\">\r\n    <summary>\r\n    Get the Caption of the Hierarchy Node instance. If Caption is null or empty we delegate to base\r\n    </summary>\r\n    <returns>Caption of Hierarchy node instance</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetComponentName",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetComponentName\">\r\n    <summary>\r\n    Get the Caption of the Hierarchy Node instance. If Caption is null or empty we delegate to base\r\n    </summary>\r\n    <returns>Caption of Hierarchy node instance</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[Browsable(false)]\r\npublic object ExtenderNames()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.ExtenderNames",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected void SetProperty(string name, string value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.SetProperty(System.String,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "bool EnvDTE80.IInternalExtenderProvider.CanExtend(string extenderCATID, string extenderName, object extendeeObject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.EnvDTE80#IInternalExtenderProvider#CanExtend(System.String,System.String,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void GetCommonPropertyPages(CAUUID[] pages)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetCommonPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Retrieves the common property pages. The NodeProperties is the BrowseObject and that will be called to support \r\n    configuration independent properties.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetCommonPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetCommonPropertyPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])\">\r\n    <summary>\r\n    Retrieves the common property pages. The NodeProperties is the BrowseObject and that will be called to support \r\n    configuration independent properties.\r\n    </summary>\r\n    <param name=\"pages\">The pages to return.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GetCfgProvider(out IVsCfgProvider p)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetCfgProvider(Microsoft.VisualStudio.Shell.Interop.IVsCfgProvider@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int GetProjectItem(out IVsHierarchy hier, out uint itemid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)\">\r\n    <summary>\r\n    Maps back to the hierarchy or project item object corresponding to the browse object.\r\n    </summary>\r\n    <param name=\"hier\">Reference to the hierarchy object.</param>\r\n    <param name=\"itemid\">Reference to the project item.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NodeProperties.GetProjectItem(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@)\">\r\n    <summary>\r\n    Maps back to the hierarchy or project item object corresponding to the browse object.\r\n    </summary>\r\n    <param name=\"hier\">Reference to the hierarchy object.</param>\r\n    <param name=\"itemid\">Reference to the project item.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void GetPages(CAUUID[] pages)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetPages(Microsoft.VisualStudio.OLE.Interop.CAUUID[])",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "object EnvDTE80.IInternalExtenderProvider.GetExtenderNames(string extenderCATID, object extendeeObject)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.EnvDTE80#IInternalExtenderProvider#GetExtenderNames(System.String,System.Object)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected string GetProperty(string name, string def)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.GetProperty(System.String,System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "node",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NodeProperties.node",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual string ExtenderCATID",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.NodeProperties.ExtenderCATID",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual string Name",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NodeProperties.Name\">\r\n    <summary>\r\n    Used by Property Pages Frame to set it's title bar. The Caption of the Hierarchy Node is returned.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.NodeProperties.Name",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NodeProperties.Name\">\r\n    <summary>\r\n    Used by Property Pages Frame to set it's title bar. The Caption of the Hierarchy Node is returned.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public HierarchyNode Node",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.NodeProperties.Node",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public NodeProperties(HierarchyNode node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NodeProperties.#ctor(Microsoft.VisualStudio.Project.HierarchyNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class NodeProperties\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.NodeProperties\">\r\n    <summary>\r\n    To create your own localizable node properties, subclass this and add public properties\r\n    decorated with your own localized display name, category and description attributes.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.NodeProperties",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.NodeProperties\">\r\n    <summary>\r\n    To create your own localizable node properties, subclass this and add public properties\r\n    decorated with your own localized display name, category and description attributes.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues(System.ComponentModel.ITypeDescriptorContext context)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public BuildActionConverter(): base (typeof (BuildAction))",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BuildActionConverter.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class BuildActionConverter",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildActionConverter",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "oldValue",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs.oldValue",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "propertyName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs.propertyName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "newValue",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs.newValue",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public string NewValue",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs.NewValue",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string PropertyName",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs.PropertyName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string OldValue",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs.OldValue",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal ProjectPropertyChangedArgs(string propertyName, string oldValue, string newValue)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs.#ctor(System.String,System.String,System.String)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class ProjectPropertyChangedArgs",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs\">\r\n    <summary>\r\n    Argument of the event raised when a project property is changed.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectPropertyChangedArgs\">\r\n    <summary>\r\n    Argument of the event raised when a project property is changed.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "ReferenceContainerNode",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DefaultSortOrderNode.ReferenceContainerNode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "HierarchyNode",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DefaultSortOrderNode.HierarchyNode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FolderNode",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DefaultSortOrderNode.FolderNode",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "NestedProjectNode",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.DefaultSortOrderNode.NestedProjectNode",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public static class DefaultSortOrderNode",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DefaultSortOrderNode\">\r\n    <summary>\r\n    A set of constants that specify the default sort order for different types of hierarchy nodes.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DefaultSortOrderNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DefaultSortOrderNode\">\r\n    <summary>\r\n    A set of constants that specify the default sort order for different types of hierarchy nodes.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"RDT\")]\r\nprotected virtual void LockRDTEntry()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.LockRDTEntry\">\r\n    <summary>\r\n    Lock the RDT Entry for the nested project.\r\n    By default this document is marked as \"Dont Save as\". That means the menu File->SaveAs is disabled for the\r\n    nested project node.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.LockRDTEntry",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.LockRDTEntry\">\r\n    <summary>\r\n    Lock the RDT Entry for the nested project.\r\n    By default this document is marked as \"Dont Save as\". That means the menu File->SaveAs is disabled for the\r\n    nested project node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void SaveNestedProjectItemInProjectFile(string newFileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveNestedProjectItemInProjectFile(System.String)\">\r\n    <summary>\r\n    Saves the nested project information in the project file.\r\n    </summary>\r\n    <param name=\"newFileName\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveNestedProjectItemInProjectFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveNestedProjectItemInProjectFile(System.String)\">\r\n    <summary>\r\n    Saves the nested project information in the project file.\r\n    </summary>\r\n    <param name=\"newFileName\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int Close()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Close\">\r\n    <summary>\r\n    Return S_OK. Implementation of Closing a nested project is done in CloseNestedProject which is called by CloseChildren.\r\n    </summary>\r\n    <returns>S_OK</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.Close",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Close\">\r\n    <summary>\r\n    Return S_OK. Implementation of Closing a nested project is done in CloseNestedProject which is called by CloseChildren.\r\n    </summary>\r\n    <returns>S_OK</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int IsItemDirty(uint itemId, IntPtr punkDocData, out int pfDirty)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the hierarchy item changed.\r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of the hierarchy item contained in VSITEMID</param>\r\n    <param name=\"punkDocData\">Pointer to the IUnknown interface of the hierarchy item. </param>\r\n    <param name=\"pfDirty\">TRUE if the hierarchy item changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Determines whether the hierarchy item changed.\r\n    </summary>\r\n    <param name=\"itemId\">Item identifier of the hierarchy item contained in VSITEMID</param>\r\n    <param name=\"punkDocData\">Pointer to the IUnknown interface of the hierarchy item. </param>\r\n    <param name=\"pfDirty\">TRUE if the hierarchy item changed.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void InitImageHandler()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.InitImageHandler",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA1806:DoNotIgnoreMethodResults\", MessageId = \"Microsoft.VisualStudio.Shell.Interop.IVsHierarchy.GetProperty(System.UInt32,System.Int32,System.Object@)\")]\r\npublic override object GetIconHandle(bool open)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Gets the icon handle. It tries first the nested to get the icon handle. If that is not supported it will get it from\r\n    the image list of the nested if that is supported. If neither of these is supported a default image will be shown.\r\n    </summary>\r\n    <returns>An object representing the icon.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetIconHandle(System.Boolean)\">\r\n    <summary>\r\n    Gets the icon handle. It tries first the nested to get the icon handle. If that is not supported it will get it from\r\n    the image list of the nested if that is supported. If neither of these is supported a default image will be shown.\r\n    </summary>\r\n    <returns>An object representing the icon.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void ObserveNestedProjectFile()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.ObserveNestedProjectFile\">\r\n    <summary>\r\n    Starts observing changes on this file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.ObserveNestedProjectFile",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.ObserveNestedProjectFile\">\r\n    <summary>\r\n    Starts observing changes on this file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SetEditLabel(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Called by the shell when a node has been renamed from the GUI\r\n    </summary>\r\n    <param name=\"label\">The name of the new label.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.SetEditLabel(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SetEditLabel(System.String)\">\r\n    <summary>\r\n    Called by the shell when a node has been renamed from the GUI\r\n    </summary>\r\n    <param name=\"label\">The name of the new label.</param>\r\n    <returns>A success or failure value.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override VSREMOVEFILEFLAGS[] GetRemoveFileFlags(string[] files)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetRemoveFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnRemoveFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSREMOVEFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetRemoveFileFlags(System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetRemoveFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnRemoveFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSREMOVEFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void RenameNestedProjectInParentProject(string label)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.RenameNestedProjectInParentProject(System.String)\">\r\n    <summary>\r\n    Renames the project file in the parent project structure.\r\n    </summary>\r\n    <param name=\"label\">The new label.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.RenameNestedProjectInParentProject(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.RenameNestedProjectInParentProject(System.String)\">\r\n    <summary>\r\n    Renames the project file in the parent project structure.\r\n    </summary>\r\n    <param name=\"label\">The new label.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override VSQUERYREMOVEFILEFLAGS[] GetQueryRemoveFileFlags(string[] files)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetQueryRemoveFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSQUERYREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryRemoveFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSQUERYREMOVEFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetQueryRemoveFileFlags(System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetQueryRemoveFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSQUERYREMOVEFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryRemoveFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSQUERYREMOVEFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private IConnectionPoint GetConnectionPointFromPropertySink()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetConnectionPointFromPropertySink\">\r\n    <summary>\r\n    Gets a ConnectionPoint for the IPropertyNotifySink interface.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetConnectionPointFromPropertySink",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetConnectionPointFromPropertySink\">\r\n    <summary>\r\n    Gets a ConnectionPoint for the IPropertyNotifySink interface.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void ConnectPropertyNotifySink()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.ConnectPropertyNotifySink\">\r\n    <summary>\r\n    We need to advise property notify sink on project properties so that\r\n    we know when the project file is renamed through a property. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.ConnectPropertyNotifySink",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.ConnectPropertyNotifySink\">\r\n    <summary>\r\n    We need to advise property notify sink on project properties so that\r\n    we know when the project file is renamed through a property. \r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)\">\r\n    <summary>\r\n    This is temporary until we have support for re-adding a nested item\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)\">\r\n    <summary>\r\n    This is temporary until we have support for re-adding a nested item\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override void ReloadItem(uint reserved)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.ReloadItem(System.UInt32)\">\r\n    <summary>\r\n    Delegates the call to the inner hierarchy.\r\n    </summary>\r\n    <param name=\"reserved\">Reserved parameter defined at the IVsPersistHierarchyItem2::ReloadItem parameter.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.ReloadItem(System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.ReloadItem(System.UInt32)\">\r\n    <summary>\r\n    Delegates the call to the inner hierarchy.\r\n    </summary>\r\n    <param name=\"reserved\">Reserved parameter defined at the IVsPersistHierarchyItem2::ReloadItem parameter.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetEditLabel\">\r\n    <summary>\r\n    Called by the shell to get the node caption when the user tries to rename from the GUI\r\n    </summary>\r\n    <returns>the node cation</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetEditLabel\">\r\n    <summary>\r\n    Called by the shell to get the node caption when the user tries to rename from the GUI\r\n    </summary>\r\n    <returns>the node cation</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private object DelegateGetPropertyToNested(int propID)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.DelegateGetPropertyToNested(System.Int32)\">\r\n    <summary>\r\n    Delegates Getproperty calls to the inner nested.\r\n    </summary>\r\n    <param name=\"propID\">The property to delegate.</param>\r\n    <returns>The return of the GetProperty from nested.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.DelegateGetPropertyToNested(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.DelegateGetPropertyToNested(System.Int32)\">\r\n    <summary>\r\n    Delegates Getproperty calls to the inner nested.\r\n    </summary>\r\n    <param name=\"propID\">The property to delegate.</param>\r\n    <returns>The return of the GetProperty from nested.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void OnRequestEdit(int dispid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.OnRequestEdit(System.Int32)\">\r\n    <summary>\r\n    Notifies a sink that a [requestedit] property is about to change and that the object is asking the sink how to proceed.\r\n    </summary>\r\n    <param name=\"dispid\">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.OnRequestEdit(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.OnRequestEdit(System.Int32)\">\r\n    <summary>\r\n    Notifies a sink that a [requestedit] property is about to change and that the object is asking the sink how to proceed.\r\n    </summary>\r\n    <param name=\"dispid\">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void Init(string fileName, string destination, string projectName, __VSCREATEPROJFLAGS createFlags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Init(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    Initialize the nested hierarhy node.\r\n    </summary>\r\n    <param name=\"fileName\">The file name of the nested project.</param>\r\n    <param name=\"destination\">The location of the nested project.</param>\r\n    <param name=\"projectName\">The name of the project.</param>\r\n    <param name=\"createFlags\">The nested project creation flags </param>\r\n    <remarks>This methos should be called just after a NestedProjectNode object is created.</remarks>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.Init(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Init(System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    Initialize the nested hierarhy node.\r\n    </summary>\r\n    <param name=\"fileName\">The file name of the nested project.</param>\r\n    <param name=\"destination\">The location of the nested project.</param>\r\n    <param name=\"projectName\">The name of the project.</param>\r\n    <param name=\"createFlags\">The nested project creation flags </param>\r\n    <remarks>This methos should be called just after a NestedProjectNode object is created.</remarks>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void CreateProjectDirectory()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CreateProjectDirectory\">\r\n    <summary>\r\n    Creates the project directory if it does not exist.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.CreateProjectDirectory",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CreateProjectDirectory\">\r\n    <summary>\r\n    Creates the project directory if it does not exist.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAutomationObject\">\r\n    <summary>\r\n    Get the automation object for the NestedProjectNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OANestedProjectItem type if succeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAutomationObject\">\r\n    <summary>\r\n    Get the automation object for the NestedProjectNode\r\n    </summary>\r\n    <returns>An instance of the Automation.OANestedProjectItem type if succeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void OnChanged(int dispid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.OnChanged(System.Int32)\">\r\n    <summary>\r\n    Notifies a sink that the [bindable] property specified by dispID has changed. \r\n    If dispID is DISPID_UNKNOWN, then multiple properties have changed together. \r\n    The client (owner of the sink) should then retrieve the current value of each property of interest from the object that generated the notification.\r\n    In our case we will care about the  VSLangProj80.VsProjPropId.VBPROJPROPID_FileName and update the changes in the parent project file.\r\n    </summary>\r\n    <param name=\"dispid\">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.OnChanged(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.OnChanged(System.Int32)\">\r\n    <summary>\r\n    Notifies a sink that the [bindable] property specified by dispID has changed. \r\n    If dispID is DISPID_UNKNOWN, then multiple properties have changed together. \r\n    The client (owner of the sink) should then retrieve the current value of each property of interest from the object that generated the notification.\r\n    In our case we will care about the  VSLangProj80.VsProjPropId.VBPROJPROPID_FileName and update the changes in the parent project file.\r\n    </summary>\r\n    <param name=\"dispid\">Dispatch identifier of the property that is about to change or DISPID_UNKNOWN if multiple properties are about to change.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void StopObservingNestedProjectFile()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.StopObservingNestedProjectFile\">\r\n    <summary>\r\n    Stops observing changes on this file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.StopObservingNestedProjectFile",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.StopObservingNestedProjectFile\">\r\n    <summary>\r\n    Stops observing changes on this file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override VSQUERYADDFILEFLAGS[] GetQueryAddFileFlags(string[] files)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetQueryAddFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSQUERYADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryAddFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSADDFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetQueryAddFileFlags(System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetQueryAddFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSQUERYADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnQueryAddFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSADDFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override VSADDFILEFLAGS[] GetAddFileFlags(string[] files)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAddFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnAddFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSADDFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAddFileFlags(System.String[])",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetAddFileFlags(System.String[])\">\r\n    <summary>\r\n    Sets the VSADDFILEFLAGS that will be used to call the  IVsTrackProjectDocumentsEvents2 OnAddFiles\r\n    </summary>\r\n    <param name=\"files\">The files to which an array of VSADDFILEFLAGS has to be specified.</param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int GetGuidProperty(int propid, out Guid guid)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Gets properties whose values are GUIDs.\r\n    </summary>\r\n    <param name=\"propid\">Identifier of the hierarchy property</param>\r\n    <param name=\"guid\"> Pointer to a GUID property specified in propid</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetGuidProperty(System.Int32,System.Guid@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetGuidProperty(System.Int32,System.Guid@)\">\r\n    <summary>\r\n    Gets properties whose values are GUIDs.\r\n    </summary>\r\n    <param name=\"propid\">Identifier of the hierarchy property</param>\r\n    <param name=\"guid\"> Pointer to a GUID property specified in propid</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void IgnoreNestedProjectFile(bool ignoreFlag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.IgnoreNestedProjectFile(System.Boolean)\">\r\n    <summary>\r\n    Ignores observing changes on this file depending on the boolean flag.\r\n    </summary>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.IgnoreNestedProjectFile(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.IgnoreNestedProjectFile(System.Boolean)\">\r\n    <summary>\r\n    Ignores observing changes on this file depending on the boolean flag.\r\n    </summary>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void InitializeInstanceGuid()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.InitializeInstanceGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void DisconnectPropertyNotifySink()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.DisconnectPropertyNotifySink\">\r\n    <summary>\r\n    Disconnects the propertynotify sink\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.DisconnectPropertyNotifySink",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.DisconnectPropertyNotifySink\">\r\n    <summary>\r\n    Disconnects the propertynotify sink\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetProperty(int propId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Gets properties of a given node or of the hierarchy.\r\n    </summary>\r\n    <param name=\"propId\">Identifier of the hierarchy property</param>\r\n    <returns>It return an object which type is dependent on the propid.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetProperty(System.Int32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetProperty(System.Int32)\">\r\n    <summary>\r\n    Gets properties of a given node or of the hierarchy.\r\n    </summary>\r\n    <param name=\"propId\">Identifier of the hierarchy property</param>\r\n    <returns>It return an object which type is dependent on the propid.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetMkDocument\">\r\n    <summary>\r\n    Returns the moniker of the nested project.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.GetMkDocument",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.GetMkDocument\">\r\n    <summary>\r\n    Returns the moniker of the nested project.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SaveItem(VSSAVEFLAGS dwSave, string silentSaveAsName, uint itemid, IntPtr punkDocData, out int pfCancelled)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Saves the hierarchy item to disk.\r\n    </summary>\r\n    <param name=\"dwSave\">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>\r\n    <param name=\"silentSaveAsName\">File name to be applied when dwSave is set to VSSAVE_SilentSave. </param>\r\n    <param name=\"itemid\">Item identifier of the hierarchy item saved from VSITEMID. </param>\r\n    <param name=\"punkDocData\">Pointer to the IUnknown interface of the hierarchy item saved.</param>\r\n    <param name=\"pfCancelled\">TRUE if the save action was canceled. </param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)\">\r\n    <summary>\r\n    Saves the hierarchy item to disk.\r\n    </summary>\r\n    <param name=\"dwSave\">Flags whose values are taken from the VSSAVEFLAGS enumeration.</param>\r\n    <param name=\"silentSaveAsName\">File name to be applied when dwSave is set to VSSAVE_SilentSave. </param>\r\n    <param name=\"itemid\">Item identifier of the hierarchy item saved from VSITEMID. </param>\r\n    <param name=\"punkDocData\">Pointer to the IUnknown interface of the hierarchy item saved.</param>\r\n    <param name=\"pfCancelled\">TRUE if the save action was canceled. </param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"RDT\")]\r\nprotected virtual void UnlockRDTEntry()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.UnlockRDTEntry\">\r\n    <summary>\r\n    Unlock the RDT entry for the nested project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.UnlockRDTEntry",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.UnlockRDTEntry\">\r\n    <summary>\r\n    Unlock the RDT entry for the nested project\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override void IgnoreItemFileChanges(bool ignoreFlag)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.IgnoreItemFileChanges(System.Boolean)\">\r\n    <summary>\r\n    Flag indicating that changes to a file can be ignored when item is saved or reloaded. \r\n    </summary>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.IgnoreItemFileChanges(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.IgnoreItemFileChanges(System.Boolean)\">\r\n    <summary>\r\n    Flag indicating that changes to a file can be ignored when item is saved or reloaded. \r\n    </summary>\r\n    <param name=\"ignoreFlag\">Flag indicating whether or not to ignore changes (1 to ignore, 0 to stop ignoring).</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void AddVirtualProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.AddVirtualProject\">\r\n    <summary>\r\n    Links a nested project as a virtual project to the solution.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.AddVirtualProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.AddVirtualProject\">\r\n    <summary>\r\n    Links a nested project as a virtual project to the solution.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    The method that does the cleanup.\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void SetDocCookieOnNestedHier(uint itemDocCookie)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.SetDocCookieOnNestedHier(System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private int DelegateSetPropertyToNested(int propID, object value)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.DelegateSetPropertyToNested(System.Int32,System.Object)\">\r\n    <summary>\r\n    Delegates Setproperty calls to the inner nested.\r\n    </summary>\r\n    <param name=\"propID\">The property to delegate.</param>\r\n    <param name=\"value\">The property to set.</param>\r\n    <returns>The return of the SetProperty from nested.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.DelegateSetPropertyToNested(System.Int32,System.Object)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.DelegateSetPropertyToNested(System.Int32,System.Object)\">\r\n    <summary>\r\n    Delegates Setproperty calls to the inner nested.\r\n    </summary>\r\n    <param name=\"propID\">The property to delegate.</param>\r\n    <param name=\"value\">The property to set.</param>\r\n    <returns>The return of the SetProperty from nested.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal void CloseNestedProjectNode()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CloseNestedProjectNode\">\r\n    <summary>\r\n    Closes a nested project and releases the nested hierrachy pointer.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.CloseNestedProjectNode",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.NestedProjectNode.CloseNestedProjectNode\">\r\n    <summary>\r\n    Closes a nested project and releases the nested hierrachy pointer.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "imageHandler",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NestedProjectNode.imageHandler",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NestedProjectNode.projectName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectPropertyNotifySinkCookie",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NestedProjectNode.projectPropertyNotifySinkCookie",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "nestedHierarchy",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NestedProjectNode.nestedHierarchy",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NestedProjectNode.projectPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.NestedProjectNode.isDisposed\">\r\n    <summary>\r\n    Sets the dispose flag on the object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.NestedProjectNode.isDisposed",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.NestedProjectNode.isDisposed\">\r\n    <summary>\r\n    Sets the dispose flag on the object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "projectInstanceGuid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.NestedProjectNode.projectInstanceGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Mutex",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.NestedProjectNode.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.NestedProjectNode.Mutex",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.NestedProjectNode.Mutex\">\r\n    <summary>\r\n    Defines an object that will be a mutex for this object for synchronizing thread calls.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override string Url",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NestedProjectNode.Url\">\r\n    <summary>\r\n    The path of the nested project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.NestedProjectNode.Url",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NestedProjectNode.Url\">\r\n    <summary>\r\n    The path of the nested project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int SortPriority",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.NestedProjectNode.SortPriority",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected bool IsDisposed",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.NestedProjectNode.IsDisposed",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override bool CanExecuteCommand",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NestedProjectNode.CanExecuteCommand\">\r\n    <summary>\r\n    Defines whether a node can execute a command if in selection.\r\n    We do this in order to let the nested project to handle the execution of its own commands.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.NestedProjectNode.CanExecuteCommand",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NestedProjectNode.CanExecuteCommand\">\r\n    <summary>\r\n    Defines whether a node can execute a command if in selection.\r\n    We do this in order to let the nested project to handle the execution of its own commands.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override Guid ItemTypeGuid",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.NestedProjectNode.ItemTypeGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Caption",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NestedProjectNode.Caption\">\r\n    <summary>\r\n    The Caption of the nested project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.NestedProjectNode.Caption",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NestedProjectNode.Caption\">\r\n    <summary>\r\n    The Caption of the nested project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal IVsHierarchy NestedHierarchy",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.NestedProjectNode.NestedHierarchy",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual uint VirtualProjectFlags",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NestedProjectNode.VirtualProjectFlags\">\r\n    <summary>\r\n    Returns the __VSADDVPFLAGS that will be passed in when calling AddVirtualProjectEx\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.NestedProjectNode.VirtualProjectFlags",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.NestedProjectNode.VirtualProjectFlags\">\r\n    <summary>\r\n    Returns the __VSADDVPFLAGS that will be passed in when calling AddVirtualProjectEx\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected NestedProjectNode()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.#ctor",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public NestedProjectNode(ProjectNode root, ProjectElement element): base (root, element)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.NestedProjectNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class NestedProjectNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.NestedProjectNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual void ReloadNestedProjectNode(NestedProjectNode node)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadNestedProjectNode(Microsoft.VisualStudio.Project.NestedProjectNode)\">\r\n    <summary>\r\n    Reloads a nested project node by deleting it and readding it.\r\n    </summary>\r\n    <param name=\"node\">The node to reload.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadNestedProjectNode(Microsoft.VisualStudio.Project.NestedProjectNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadNestedProjectNode(Microsoft.VisualStudio.Project.NestedProjectNode)\">\r\n    <summary>\r\n    Reloads a nested project node by deleting it and readding it.\r\n    </summary>\r\n    <param name=\"node\">The node to reload.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int ReloadItem(uint itemId, uint reserved)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadItem(System.UInt32,System.UInt32)\">\r\n    <summary>\r\n    Called to reload a project item. \r\n    Reloads a project and its nested project nodes.\r\n    </summary>\r\n    <param name=\"itemId\">Specifies itemid from VSITEMID.</param>\r\n    <param name=\"reserved\">Reserved.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadItem(System.UInt32,System.UInt32)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.ReloadItem(System.UInt32,System.UInt32)\">\r\n    <summary>\r\n    Called to reload a project item. \r\n    Reloads a project and its nested project nodes.\r\n    </summary>\r\n    <param name=\"itemId\">Specifies itemid from VSITEMID.</param>\r\n    <param name=\"reserved\">Reserved.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. </returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual NestedProjectNode AddExistingNestedProject(ProjectElement element, __VSCREATEPROJFLAGS creationFlags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddExistingNestedProject(Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    Add an existing project as a nested node of our hierarchy.\r\n    This is used while loading the project and can also be used\r\n    to add an existing project to our hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddExistingNestedProject(Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddExistingNestedProject(Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    Add an existing project as a nested node of our hierarchy.\r\n    This is used while loading the project and can also be used\r\n    to add an existing project to our hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void OnNestedProjectFileChangedOnDisk(object sender, FileChangedOnDiskEventArgs e)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.OnNestedProjectFileChangedOnDisk(System.Object,Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs)\">\r\n    <summary>\r\n    Event callback. Called when one of the nested project files is changed.\r\n    </summary>\r\n    <param name=\"sender\">The FileChangeManager object.</param>\r\n    <param name=\"e\">Event args containing the file name that was updated.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.OnNestedProjectFileChangedOnDisk(System.Object,Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.OnNestedProjectFileChangedOnDisk(System.Object,Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs)\">\r\n    <summary>\r\n    Event callback. Called when one of the nested project files is changed.\r\n    </summary>\r\n    <param name=\"sender\">The FileChangeManager object.</param>\r\n    <param name=\"e\">Event args containing the file name that was updated.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal protected void RemoveNestedProjectNodes()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.RemoveNestedProjectNodes",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override bool FilterItemTypeToBeAddedToHierarchy(string itemType)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.FilterItemTypeToBeAddedToHierarchy(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "[CLSCompliant(false)]\r\npublic override int GetNestedHierarchy(UInt32 itemId, ref Guid iidHierarchyNested, out IntPtr ppHierarchyNested, out uint pItemId)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)\">\r\n    <summary>\r\n    Gets the nested hierarchy.\r\n    </summary>\r\n    <param name=\"itemId\">The item id.</param>\r\n    <param name=\"iidHierarchyNested\">Identifier of the interface to be returned in ppHierarchyNested.</param>\r\n    <param name=\"ppHierarchyNested\">Pointer to the interface whose identifier was passed in iidHierarchyNested.</param>\r\n    <param name=\"pItemId\">Pointer to an item identifier of the root node of the nested hierarchy.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. If ITEMID is not a nested hierarchy, this method returns E_FAIL.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetNestedHierarchy(System.UInt32,System.Guid@,System.IntPtr@,System.UInt32@)\">\r\n    <summary>\r\n    Gets the nested hierarchy.\r\n    </summary>\r\n    <param name=\"itemId\">The item id.</param>\r\n    <param name=\"iidHierarchyNested\">Identifier of the interface to be returned in ppHierarchyNested.</param>\r\n    <param name=\"ppHierarchyNested\">Pointer to the interface whose identifier was passed in iidHierarchyNested.</param>\r\n    <param name=\"pItemId\">Pointer to an item identifier of the root node of the nested hierarchy.</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code. If ITEMID is not a nested hierarchy, this method returns E_FAIL.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void Reload()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.Reload\">\r\n    <summary>\r\n    Reloads a project and its nested project nodes.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.Reload",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.Reload\">\r\n    <summary>\r\n    Reloads a project and its nested project nodes.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int CloseChildren()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.CloseChildren",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int IsItemDirty(uint itemId, IntPtr punkDocData, out int pfDirty)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.IsItemDirty(System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual NestedProjectNode AddNestedProjectFromTemplate(string fileName, string destination, string projectName, ProjectElement element, __VSCREATEPROJFLAGS creationFlags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddNestedProjectFromTemplate(System.String,System.String,System.String,Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    This can be called directly or through RunVsTemplateWizard.\r\n    This will clone a template project file and add it as a\r\n    subproject to our hierarchy.\r\n    If you want to create a project for which there exist a\r\n    vstemplate, consider using RunVsTemplateWizard instead.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddNestedProjectFromTemplate(System.String,System.String,System.String,Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddNestedProjectFromTemplate(System.String,System.String,System.String,Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    This can be called directly or through RunVsTemplateWizard.\r\n    This will clone a template project file and add it as a\r\n    subproject to our hierarchy.\r\n    If you want to create a project for which there exist a\r\n    vstemplate, consider using RunVsTemplateWizard instead.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private RegisteredProjectType GetRegisteredProject(ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetRegisteredProject(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Get information from the registry based for the project \r\n    factory corresponding to the TypeGuid of the element\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetRegisteredProject(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetRegisteredProject(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Get information from the registry based for the project \r\n    factory corresponding to the TypeGuid of the element\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int OpenChildren()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.OpenChildren",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int SaveItem(VSSAVEFLAGS dwSave, string silentSaveAsName, uint itemid, IntPtr punkDocData, out int pfCancelled)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.SaveItem(Microsoft.VisualStudio.Shell.Interop.VSSAVEFLAGS,System.String,System.UInt32,System.IntPtr,System.Int32@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual IVsHierarchy[] EnumNestedHierachiesForBuildDependency()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.EnumNestedHierachiesForBuildDependency\">\r\n    <summary>\r\n    Enumerates the nested hierachies that should be added to the build dependency list.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.EnumNestedHierachiesForBuildDependency",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.EnumNestedHierachiesForBuildDependency\">\r\n    <summary>\r\n    Enumerates the nested hierachies that should be added to the build dependency list.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual NestedProjectNode CreateNestedProjectNode(ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Override this method if you want to provide your own type of nodes.\r\n    This would be the case if you derive a class from NestedProjectNode\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNode(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNode(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Override this method if you want to provide your own type of nodes.\r\n    This would be the case if you derive a class from NestedProjectNode\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal protected void CreateNestedProjectNodes()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNodes\">\r\n    <summary>\r\n    This is used when loading the project to loop through all the items\r\n    and for each SubProject it finds, it create the project and a node\r\n    in our Hierarchy to hold the project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNodes",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.CreateNestedProjectNodes\">\r\n    <summary>\r\n    This is used when loading the project to loop through all the items\r\n    and for each SubProject it finds, it create the project and a node\r\n    in our Hierarchy to hold the project.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1709:IdentifiersShouldBeCasedCorrectly\", MessageId = \"Vs\")]\r\nprotected internal void RunVsTemplateWizard(ProjectElement element, bool silent)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.RunVsTemplateWizard(Microsoft.VisualStudio.Project.ProjectElement,System.Boolean)\">\r\n    <summary>\r\n    Let the wizard code execute and provide us the information we need.\r\n    Our SolutionFolder automation object should be called back with the\r\n    details at which point it will call back one of our method to add\r\n    a nested project.\r\n    If you are trying to add a new subproject this is probably the\r\n    method you want to call. If you are just trying to clone a template\r\n    project file, then AddNestedProjectFromTemplate is what you want.\r\n    </summary>\r\n    <param name=\"element\">The project item to use as the base of the nested project.</param>\r\n    <param name=\"silent\">true if the wizard should run silently, otherwise false.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.RunVsTemplateWizard(Microsoft.VisualStudio.Project.ProjectElement,System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.RunVsTemplateWizard(Microsoft.VisualStudio.Project.ProjectElement,System.Boolean)\">\r\n    <summary>\r\n    Let the wizard code execute and provide us the information we need.\r\n    Our SolutionFolder automation object should be called back with the\r\n    details at which point it will call back one of our method to add\r\n    a nested project.\r\n    If you are trying to add a new subproject this is probably the\r\n    method you want to call. If you are just trying to clone a template\r\n    project file, then AddNestedProjectFromTemplate is what you want.\r\n    </summary>\r\n    <param name=\"element\">The project item to use as the base of the nested project.</param>\r\n    <param name=\"silent\">true if the wizard should run silently, otherwise false.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual void AddVirtualProjects()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddVirtualProjects\">\r\n    <summary>\r\n    Links the nested project nodes to the solution. The default implementation parses all nested project nodes and calles AddVirtualProjectEx on them.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddVirtualProjects",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddVirtualProjects\">\r\n    <summary>\r\n    Links the nested project nodes to the solution. The default implementation parses all nested project nodes and calles AddVirtualProjectEx on them.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual NestedProjectNode AddNestedProjectFromTemplate(ProjectElement element, __VSCREATEPROJFLAGS creationFlags)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddNestedProjectFromTemplate(Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    This will clone a template project file and add it as a\r\n    subproject to our hierarchy.\r\n    If you want to create a project for which there exist a\r\n    vstemplate, consider using RunVsTemplateWizard instead.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddNestedProjectFromTemplate(Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.AddNestedProjectFromTemplate(Microsoft.VisualStudio.Project.ProjectElement,Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS)\">\r\n    <summary>\r\n    This will clone a template project file and add it as a\r\n    subproject to our hierarchy.\r\n    If you want to create a project for which there exist a\r\n    vstemplate, consider using RunVsTemplateWizard instead.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual string GetProjectTemplatePath(ProjectElement element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetProjectTemplatePath(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Based on the Template and TypeGuid properties of the\r\n    element, generate the full template path.\r\n    \r\n    TypeGuid should be the Guid of a registered project factory.\r\n    Template can be a full path, a project template (for projects\r\n    that support VsTemplates) or a relative path (for other projects).\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetProjectTemplatePath(Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ProjectContainerNode.GetProjectTemplatePath(Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Based on the Template and TypeGuid properties of the\r\n    element, generate the full template path.\r\n    \r\n    TypeGuid should be the Guid of a registered project factory.\r\n    Template can be a full path, a project template (for projects\r\n    that support VsTemplates) or a relative path (for other projects).\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "nestedProjectElement",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectContainerNode.nestedProjectElement",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "nestedProjectNodeReloader",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectContainerNode.nestedProjectNodeReloader\">\r\n     <summary>\r\n     Defines the listener that would listen on file changes on the nested project node.\r\n     </summary>\r\n    <devremark>\t\t\t\r\n    This might need a refactoring when nested projects can be added and removed by demand.\r\n     </devremark>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectContainerNode.nestedProjectNodeReloader",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectContainerNode.nestedProjectNodeReloader\">\r\n     <summary>\r\n     Defines the listener that would listen on file changes on the nested project node.\r\n     </summary>\r\n    <devremark>\t\t\t\r\n    This might need a refactoring when nested projects can be added and removed by demand.\r\n     </devremark>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "buildNestedProjectsOnBuild",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectContainerNode.buildNestedProjectsOnBuild\">\r\n    <summary>\r\n    Setting this flag to true will build all nested project when building this project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectContainerNode.buildNestedProjectsOnBuild",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.ProjectContainerNode.buildNestedProjectsOnBuild\">\r\n    <summary>\r\n    Setting this flag to true will build all nested project when building this project\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public virtual bool BuildNestedProjectsOnBuild",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectContainerNode.BuildNestedProjectsOnBuild\">\r\n    <summary>\r\n    Defines whether nested projects should be build with the parent project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectContainerNode.BuildNestedProjectsOnBuild",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectContainerNode.BuildNestedProjectsOnBuild\">\r\n    <summary>\r\n    Defines whether nested projects should be build with the parent project\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal FileChangeManager NestedProjectNodeReloader",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectContainerNode.NestedProjectNodeReloader\">\r\n    <summary>\r\n    Returns teh object that handles listening to file changes on the nested project files.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectContainerNode.NestedProjectNodeReloader",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectContainerNode.NestedProjectNodeReloader\">\r\n    <summary>\r\n    Returns teh object that handles listening to file changes on the nested project files.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal override object Object",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectContainerNode.Object\">\r\n    <summary>\r\n    This is the object that will be returned by EnvDTE.Project.Object for this project\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ProjectContainerNode.Object",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ProjectContainerNode.Object\">\r\n    <summary>\r\n    This is the object that will be returned by EnvDTE.Project.Object for this project\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected ProjectContainerNode()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectContainerNode.#ctor",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public abstract class ProjectContainerNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectContainerNode",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "removed",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.BeforeProjectFileClosedEventArgs.removed",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal bool Removed",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.BeforeProjectFileClosedEventArgs.Removed\">\r\n    <summary>\r\n    true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.BeforeProjectFileClosedEventArgs.Removed",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.BeforeProjectFileClosedEventArgs.Removed\">\r\n    <summary>\r\n    true if the project was removed from the solution before the solution was closed. false if the project was removed from the solution while the solution was being closed.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal BeforeProjectFileClosedEventArgs(bool removed)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.BeforeProjectFileClosedEventArgs.#ctor(System.Boolean)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class BeforeProjectFileClosedEventArgs\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.BeforeProjectFileClosedEventArgs",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected virtual void ResolveReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ResolveReference\">\r\n    <summary>\r\n    Resolves references.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.ResolveReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ResolveReference\">\r\n    <summary>\r\n    Resolves references.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal virtual void RefreshReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.RefreshReference\">\r\n    <summary>\r\n    Refreshes a reference by re-resolving it and redrawing the icon.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.RefreshReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.RefreshReference\">\r\n    <summary>\r\n    Refreshes a reference by re-resolving it and redrawing the icon.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal virtual bool IsAlreadyAdded(out ReferenceNode existingEquivalentNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)\">\r\n    <summary>\r\n    Checks if a reference is already added. The method parses all references and compares the Url.\r\n    </summary>\r\n    <param name=\"existingEquivalentNode\">The existing reference, if one is found.</param>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)\">\r\n    <summary>\r\n    Checks if a reference is already added. The method parses all references and compares the Url.\r\n    </summary>\r\n    <param name=\"existingEquivalentNode\">The existing reference, if one is found.</param>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetIconHandle(bool open)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.GetIconHandle(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int ExecCommandOnNode(Guid cmdGroup, uint cmd, uint nCmdexecopt, IntPtr pvaIn, IntPtr pvaOut)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.ExecCommandOnNode(System.Guid,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string GetEditLabel()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetEditLabel\">\r\n    <summary>\r\n    Disable inline editing of Caption of a ReferendeNode\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.GetEditLabel",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetEditLabel\">\r\n    <summary>\r\n    Disable inline editing of Caption of a ReferendeNode\r\n    </summary>\r\n    <returns>null</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual bool CanAddReference(out CannotAddReferenceErrorMessage errorHandler)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)\">\r\n    <summary>\r\n    Validates that a reference can be added.\r\n    </summary>\r\n    <param name=\"errorHandler\">A CannotAddReferenceErrorMessage delegate to show the error message.</param>\r\n    <returns>true if the reference can be added.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.CanAddReference(Microsoft.VisualStudio.Project.ReferenceNode.CannotAddReferenceErrorMessage@)\">\r\n    <summary>\r\n    Validates that a reference can be added.\r\n    </summary>\r\n    <param name=\"errorHandler\">A CannotAddReferenceErrorMessage delegate to show the error message.</param>\r\n    <returns>true if the reference can be added.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string GetMkDocument()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetMkDocument\">\r\n    <summary>\r\n    This method is called by the interface method GetMkDocument to specify the item moniker.\r\n    </summary>\r\n    <returns>The moniker for this item</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.GetMkDocument",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetMkDocument\">\r\n    <summary>\r\n    This method is called by the interface method GetMkDocument to specify the item moniker.\r\n    </summary>\r\n    <returns>The moniker for this item</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanDeleteItem(__VSDELETEITEMOPERATION deleteOperation)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.CanDeleteItem(Microsoft.VisualStudio.Shell.Interop.__VSDELETEITEMOPERATION)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected bool IsAlreadyAdded()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded\">\r\n    <summary>\r\n    Checks if a reference is already added. The method parses all references and compares the Url.\r\n    </summary>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.IsAlreadyAdded\">\r\n    <summary>\r\n    Checks if a reference is already added. The method parses all references and compares the Url.\r\n    </summary>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override int ExcludeFromProject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ExcludeFromProject\">\r\n    <summary>\r\n    Not supported.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.ExcludeFromProject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ExcludeFromProject\">\r\n    <summary>\r\n    Not supported.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override object GetAutomationObject()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetAutomationObject\">\r\n    <summary>\r\n    Get an instance of the automation object for ReferenceNode\r\n    </summary>\r\n    <returns>An instance of Automation.OAReferenceItem type if succeeded</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.GetAutomationObject",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.GetAutomationObject\">\r\n    <summary>\r\n    Get an instance of the automation object for ReferenceNode\r\n    </summary>\r\n    <returns>An instance of Automation.OAReferenceItem type if succeeded</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void AddReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.AddReference\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.AddReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.AddReference\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override int QueryStatusOnNode(Guid cmdGroup, uint cmd, IntPtr pCmdText, ref QueryStatusResult result)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.QueryStatusOnNode(System.Guid,System.UInt32,System.IntPtr,Microsoft.VisualStudio.Project.QueryStatusResult@)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected virtual int ShowObjectBrowser()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ShowObjectBrowser\">\r\n    <summary>\r\n    Shows the Object Browser\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.ShowObjectBrowser",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.ShowObjectBrowser\">\r\n    <summary>\r\n    Shows the Object Browser\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected abstract void BindReferenceData();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.BindReferenceData",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal override StringBuilder PrepareSelectedNodesForClipBoard()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.PrepareSelectedNodesForClipBoard\">\r\n    <summary>\r\n    References node cannot be dragged.\r\n    </summary>\r\n    <returns>A stringbuilder.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.PrepareSelectedNodesForClipBoard",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.PrepareSelectedNodesForClipBoard\">\r\n    <summary>\r\n    References node cannot be dragged.\r\n    </summary>\r\n    <returns>A stringbuilder.</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public override string Caption",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceNode.Caption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int MenuCommandId",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceNode.MenuCommandId",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override Guid ItemTypeGuid",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceNode.ItemTypeGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Url",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ReferenceNode.Url",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "protected ReferenceNode(ProjectNode root, ProjectElement element): base (root, element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    constructor for the ReferenceNode\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    constructor for the ReferenceNode\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected ReferenceNode(ProjectNode root): base (root)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    constructor for the ReferenceNode\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    constructor for the ReferenceNode\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public abstract class ReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ReferenceNode",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override int OpenWithSpecific(uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame frame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDesignerDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int Open(ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDesignerDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public ProjectDesignerDocumentManager(ProjectNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ProjectDesignerDocumentManager.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "class ProjectDesignerDocumentManager\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectDesignerDocumentManager",
          "XmlDocumentation": ""
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private bool CanEditFile(string documentMoniker)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.CanEditFile(System.String)\">\r\n    <summary>\r\n    This function asks to the QueryEditQuerySave service if it is possible to\r\n    edit the file.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.CanEditFile(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.CanEditFile(System.String)\">\r\n    <summary>\r\n    This function asks to the QueryEditQuerySave service if it is possible to\r\n    edit the file.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private bool VerifyFileDirtyInRdt(string document, out IVsHierarchy pHier, out IVsPersistDocData ppDocData, out uint cookie)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.VerifyFileDirtyInRdt(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@,System.UInt32@)\">\r\n    <summary>\r\n    Returns TRUE if open and dirty. Note that documents can be open without a\r\n    window frame so be careful. Returns the DocData and doc cookie if requested\r\n    </summary>\r\n    <param name=\"document\">document path</param>\r\n    <param name=\"pHier\">hierarchy</param>\r\n    <param name=\"ppDocData\">doc data associated with document</param>\r\n    <param name=\"cookie\">item cookie</param>\r\n    <returns>True if FIle is dirty</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.VerifyFileDirtyInRdt(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@,System.UInt32@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.VerifyFileDirtyInRdt(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,Microsoft.VisualStudio.Shell.Interop.IVsPersistDocData@,System.UInt32@)\">\r\n    <summary>\r\n    Returns TRUE if open and dirty. Note that documents can be open without a\r\n    window frame so be careful. Returns the DocData and doc cookie if requested\r\n    </summary>\r\n    <param name=\"document\">document path</param>\r\n    <param name=\"pHier\">hierarchy</param>\r\n    <param name=\"ppDocData\">doc data associated with document</param>\r\n    <param name=\"cookie\">item cookie</param>\r\n    <returns>True if FIle is dirty</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual void RunGenerator(string document)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.RunGenerator(System.String)\">\r\n    <summary>\r\n    Runs the generator on the current project item.\r\n    </summary>\r\n    <param name=\"document\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.RunGenerator(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.RunGenerator(System.String)\">\r\n    <summary>\r\n    Runs the generator on the current project item.\r\n    </summary>\r\n    <param name=\"document\"></param>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private string GetBufferContents(string fileName, out IVsTextStream srpStream)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.GetBufferContents(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextStream@)\">\r\n    <summary>\r\n    Returns the buffer contents for a moniker.\r\n    </summary>\r\n    <returns>Buffer contents</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.GetBufferContents(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextStream@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.GetBufferContents(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextStream@)\">\r\n    <summary>\r\n    Returns the buffer contents for a moniker.\r\n    </summary>\r\n    <returns>Buffer contents</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int GeneratorError(int warning, uint level, string err, uint line, uint col)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.GeneratorError(System.Int32,System.UInt32,System.String,System.UInt32,System.UInt32)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal virtual void InvokeGenerator(FileNode fileNode)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.InvokeGenerator(Microsoft.VisualStudio.Project.FileNode)\">\r\n    <summary>\r\n    Invokes the specified generator\r\n    </summary>\r\n    <param name=\"fileNode\">The node on which to invoke the generator.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.InvokeGenerator(Microsoft.VisualStudio.Project.FileNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.InvokeGenerator(Microsoft.VisualStudio.Project.FileNode)\">\r\n    <summary>\r\n    Invokes the specified generator\r\n    </summary>\r\n    <param name=\"fileNode\">The node on which to invoke the generator.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual string UpdateGeneratedCodeFile(FileNode fileNode, byte[] data, int size, string fileName)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.UpdateGeneratedCodeFile(Microsoft.VisualStudio.Project.FileNode,System.Byte[],System.Int32,System.String)\">\r\n    <summary>\r\n    This is called after the single file generator has been invoked to create or update the code file.\r\n    </summary>\r\n    <param name=\"fileNode\">The node associated to the generator</param>\r\n    <param name=\"data\">data to update the file with</param>\r\n    <param name=\"size\">size of the data</param>\r\n    <param name=\"fileName\">Name of the file to update or create</param>\r\n    <returns>full path of the file</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.UpdateGeneratedCodeFile(Microsoft.VisualStudio.Project.FileNode,System.Byte[],System.Int32,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.UpdateGeneratedCodeFile(Microsoft.VisualStudio.Project.FileNode,System.Byte[],System.Int32,System.String)\">\r\n    <summary>\r\n    This is called after the single file generator has been invoked to create or update the code file.\r\n    </summary>\r\n    <param name=\"fileNode\">The node associated to the generator</param>\r\n    <param name=\"data\">data to update the file with</param>\r\n    <param name=\"size\">size of the data</param>\r\n    <param name=\"fileName\">Name of the file to update or create</param>\r\n    <returns>full path of the file</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected virtual string ComputeNamespace(string projectItemPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.ComputeNamespace(System.String)\">\r\n    <summary>\r\n    Computes the names space based on the folder for the ProjectItem. It just replaces DirectorySeparatorCharacter\r\n    with \".\" for the directory in which the file is located.\r\n    </summary>\r\n    <returns>Returns the computed name space</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.ComputeNamespace(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.ComputeNamespace(System.String)\">\r\n    <summary>\r\n    Computes the names space based on the folder for the ProjectItem. It just replaces DirectorySeparatorCharacter\r\n    with \".\" for the directory in which the file is located.\r\n    </summary>\r\n    <returns>Returns the computed name space</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public virtual int Progress(uint complete, uint total)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.Progress(System.UInt32,System.UInt32)",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "projectMgr",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGenerator.projectMgr",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "gettingCheckoutStatus",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGenerator.gettingCheckoutStatus",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "runningGenerator",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.SingleFileGenerator.runningGenerator",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "internal SingleFileGenerator(ProjectNode projectMgr)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.#ctor(Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    Overloadde ctor.\r\n    </summary>\r\n    <param name=\"ProjectNode\">The associated project</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.SingleFileGenerator.#ctor(Microsoft.VisualStudio.Project.ProjectNode)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.SingleFileGenerator.#ctor(Microsoft.VisualStudio.Project.ProjectNode)\">\r\n    <summary>\r\n    Overloadde ctor.\r\n    </summary>\r\n    <param name=\"ProjectNode\">The associated project</param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "internal class SingleFileGenerator\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SingleFileGenerator\">\r\n    <summary>\r\n    Provides support for single file generator.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.SingleFileGenerator",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.SingleFileGenerator\">\r\n    <summary>\r\n    Provides support for single file generator.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default reference icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default reference icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void SetInstalledFilePath()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.SetInstalledFilePath\">\r\n    <summary>\r\n    Verify that the TypeLib is registered and set the the installed file path of the com reference.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.SetInstalledFilePath",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.SetInstalledFilePath\">\r\n    <summary>\r\n    Verify that the TypeLib is registered and set the the installed file path of the com reference.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected internal override bool IsAlreadyAdded(out ReferenceNode existingReference)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)\">\r\n    <summary>\r\n    Checks if a reference is already added. The method parses all references and compares the the FinalItemSpec and the Guid.\r\n    </summary>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)\">\r\n    <summary>\r\n    Checks if a reference is already added. The method parses all references and compares the the FinalItemSpec and the Guid.\r\n    </summary>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void SetProjectItemsThatRelyOnReferencesToBeResolved(bool renameItemNode)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.SetProjectItemsThatRelyOnReferencesToBeResolved(System.Boolean)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected override void BindReferenceData()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.BindReferenceData",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Globalization\", \"CA1308:NormalizeStringsToUppercase\")]\r\nprivate ProjectElement GetProjectElementBasedOnInputFromComponentSelectorData()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.GetProjectElementBasedOnInputFromComponentSelectorData\">\r\n    <summary>\r\n    This is an helper method to convert the VSCOMPONENTSELECTORDATA recieved by the\r\n    implementer of IVsComponentUser into a ProjectElement that can be used to create\r\n    an instance of this class.\r\n    This should not be called for project reference or reference to managed assemblies.\r\n    </summary>\r\n    <returns>ProjectElement corresponding to the COM component passed in</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.GetProjectElementBasedOnInputFromComponentSelectorData",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.GetProjectElementBasedOnInputFromComponentSelectorData\">\r\n    <summary>\r\n    This is an helper method to convert the VSCOMPONENTSELECTORDATA recieved by the\r\n    implementer of IVsComponentUser into a ProjectElement that can be used to create\r\n    an instance of this class.\r\n    This should not be called for project reference or reference to managed assemblies.\r\n    </summary>\r\n    <returns>ProjectElement corresponding to the COM component passed in</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override NodeProperties CreatePropertiesObject()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.CreatePropertiesObject",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "lcid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ComReferenceNode.lcid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "majorVersionNumber",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ComReferenceNode.majorVersionNumber",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "installedFilePath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ComReferenceNode.installedFilePath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "projectRelativeFilePath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ComReferenceNode.projectRelativeFilePath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "minorVersionNumber",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ComReferenceNode.minorVersionNumber",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "typeGuid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ComReferenceNode.typeGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "comReference",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ComReferenceNode.comReference",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "typeName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ComReferenceNode.typeName",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "public Guid TypeGuid",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ComReferenceNode.TypeGuid\">\r\n    <summary>\r\n    Returns the Guid of the COM object.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.TypeGuid",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ComReferenceNode.TypeGuid\">\r\n    <summary>\r\n    Returns the Guid of the COM object.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public string WrapperTool",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.WrapperTool",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int MinorVersionNumber",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.MinorVersionNumber",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Url",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.Url",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Caption",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.Caption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public int MajorVersionNumber",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.MajorVersionNumber",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string InstalledFilePath",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ComReferenceNode.InstalledFilePath\">\r\n    <summary>\r\n    Returns the path where the COM object is installed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.InstalledFilePath",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.ComReferenceNode.InstalledFilePath\">\r\n    <summary>\r\n    Returns the path where the COM object is installed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal override object Object",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.Object",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public bool EmbedInteropTypes",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.EmbedInteropTypes",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public string LCID",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.ComReferenceNode.LCID",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Usage\", \"CA2201:DoNotRaiseReservedExceptionTypes\")]\r\npublic ComReferenceNode(ProjectNode root, VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null): base (root)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Overloaded constructor for creating a ComReferenceNode from selector data\r\n    </summary>\r\n    <param name=\"root\">The Project node</param>\r\n    <param name=\"selectorData\">The component selctor data.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)\">\r\n    <summary>\r\n    Overloaded constructor for creating a ComReferenceNode from selector data\r\n    </summary>\r\n    <param name=\"root\">The Project node</param>\r\n    <param name=\"selectorData\">The component selctor data.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public ComReferenceNode(ProjectNode root, ProjectElement element): base (root, element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the ComReferenceNode. \r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ComReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ComReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the ComReferenceNode. \r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class ComReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ComReferenceNode\">\r\n    <summary>\r\n    This type of node is used for references to COM components.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ComReferenceNode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ComReferenceNode\">\r\n    <summary>\r\n    This type of node is used for references to COM components.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "private void UnregisterFromFileChangeService()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.UnregisterFromFileChangeService\">\r\n    <summary>\r\n    Unregisters this node from file change notifications.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.UnregisterFromFileChangeService",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.UnregisterFromFileChangeService\">\r\n    <summary>\r\n    Unregisters this node from file change notifications.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void ResolveReference()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolveReference",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override int Close()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Close\">\r\n    <summary>\r\n    Closes the node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Close",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Close\">\r\n    <summary>\r\n    Closes the node.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override bool CanShowDefaultIcon()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default reference icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.CanShowDefaultIcon",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.CanShowDefaultIcon\">\r\n    <summary>\r\n    Determines if this is node a valid node for painting the default reference icon.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private string GetFullPathFromPath(string path)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.GetFullPathFromPath(System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void SetReferenceProperties()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.SetReferenceProperties\">\r\n    <summary>\r\n    This function ensures that some properties of the reference are set.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.SetReferenceProperties",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.SetReferenceProperties\">\r\n    <summary>\r\n    This function ensures that some properties of the reference are set.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void Dispose(bool disposing)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    Disposes the node\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Dispose(System.Boolean)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Dispose(System.Boolean)\">\r\n    <summary>\r\n    Disposes the node\r\n    </summary>\r\n    <param name=\"disposing\"></param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "protected override void BindReferenceData()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.BindReferenceData",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.BindReferenceData\">\r\n    <summary>\r\n    Links a reference node to the project and hierarchy.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void InitializeFileChangeEvents()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.InitializeFileChangeEvents\">\r\n    <summary>\r\n    Registers with File change events\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.InitializeFileChangeEvents",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.InitializeFileChangeEvents\">\r\n    <summary>\r\n    Registers with File change events\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void OnAssemblyReferenceChangedOnDisk(object sender, FileChangedOnDiskEventArgs e)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.OnAssemblyReferenceChangedOnDisk(System.Object,Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs)\">\r\n    <summary>\r\n    Event callback. Called when one of the assembly file is changed.\r\n    </summary>\r\n    <param name=\"sender\">The FileChangeManager object.</param>\r\n    <param name=\"e\">Event args containing the file name that was updated.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.OnAssemblyReferenceChangedOnDisk(System.Object,Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.OnAssemblyReferenceChangedOnDisk(System.Object,Microsoft.VisualStudio.Project.FileChangedOnDiskEventArgs)\">\r\n    <summary>\r\n    Event callback. Called when one of the assembly file is changed.\r\n    </summary>\r\n    <param name=\"sender\">The FileChangeManager object.</param>\r\n    <param name=\"e\">Event args containing the file name that was updated.</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void CreateFromAssemblyName(AssemblyName name)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.CreateFromAssemblyName(System.Reflection.AssemblyName)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void ResolveAssemblyReference()",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolveAssemblyReference\">\r\n    <summary>\r\n    Does the actual job of resolving an assembly reference. We need a private method that does not violate \r\n    calling virtual method from the constructor.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolveAssemblyReference",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolveAssemblyReference\">\r\n    <summary>\r\n    Does the actual job of resolving an assembly reference. We need a private method that does not violate \r\n    calling virtual method from the constructor.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void SetHintPathAndPrivateValue()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.SetHintPathAndPrivateValue",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "protected internal override bool IsAlreadyAdded(out ReferenceNode existingReference)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)\">\r\n    <summary>\r\n    Checks if an assembly is already added. The method parses all references and compares the full assemblynames, or the location of the assemblies to decide whether two assemblies are the same.\r\n    </summary>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.IsAlreadyAdded(Microsoft.VisualStudio.Project.ReferenceNode@)\">\r\n    <summary>\r\n    Checks if an assembly is already added. The method parses all references and compares the full assemblynames, or the location of the assemblies to decide whether two assemblies are the same.\r\n    </summary>\r\n    <returns>true if the assembly has already been added.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private void GetPathNameFromProjectFile()",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.GetPathNameFromProjectFile",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "private void SetHintPathAndPrivateValue(string hintPath)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.SetHintPathAndPrivateValue(System.String)\">\r\n    <summary>\r\n    Sets the hint path to the provided value. \r\n    It also sets the private value to true if it has not been already provided through the associated project element.\r\n    </summary>\r\n    <param name=\"hintPath\">The hint path to set.</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.SetHintPathAndPrivateValue(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.SetHintPathAndPrivateValue(System.String)\">\r\n    <summary>\r\n    Sets the hint path to the provided value. \r\n    It also sets the private value to true if it has not been already provided through the associated project element.\r\n    </summary>\r\n    <param name=\"hintPath\">The hint path to set.</param>\r\n</member>\r\n"
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "assemblyRef",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.assemblyRef",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "fileChangeListener",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.fileChangeListener\">\r\n    <summary>\r\n    Defines the listener that would listen on file changes on the nested project node.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.fileChangeListener",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.fileChangeListener\">\r\n    <summary>\r\n    Defines the listener that would listen on file changes on the nested project node.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "isDisposed",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.isDisposed\">\r\n    <summary>\r\n    A flag for specifying if the object was disposed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.isDisposed",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.isDisposed\">\r\n    <summary>\r\n    A flag for specifying if the object was disposed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "assemblyPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.assemblyPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "assemblyName",
                "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.assemblyName\">\r\n    <summary>\r\n    The name of the assembly this refernce represents\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.assemblyName",
              "XmlDocumentation": "<member name=\"F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.assemblyName\">\r\n    <summary>\r\n    The name of the assembly this refernce represents\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "resolvedAssemblyName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.AssemblyReferenceNode.resolvedAssemblyName",
              "XmlDocumentation": ""
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "internal System.Reflection.AssemblyName ResolvedAssembly",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolvedAssembly\">\r\n    <summary>\r\n    Returns the name of the assembly this reference refers to on this specific\r\n    machine. It can be different from the AssemblyName property because it can\r\n    be more specific.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolvedAssembly",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.ResolvedAssembly\">\r\n    <summary>\r\n    Returns the name of the assembly this reference refers to on this specific\r\n    machine. It can be different from the AssemblyName property because it can\r\n    be more specific.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "internal System.Reflection.AssemblyName AssemblyName",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.AssemblyName\">\r\n    <summary>\r\n    The name of the assembly this reference represents.\r\n    </summary>\r\n    <value></value>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.AssemblyName",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.AssemblyName\">\r\n    <summary>\r\n    The name of the assembly this reference represents.\r\n    </summary>\r\n    <value></value>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override string Url",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Url",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public override string Caption",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Caption",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "internal override object Object",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.AssemblyReferenceNode.Object",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public AssemblyReferenceNode(ProjectNode root, ProjectElement element): base (root, element)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the ReferenceNode\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,Microsoft.VisualStudio.Project.ProjectElement)\">\r\n    <summary>\r\n    Constructor for the ReferenceNode\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public AssemblyReferenceNode(ProjectNode root, string assemblyPath): base (root)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String)\">\r\n    <summary>\r\n    Constructor for the AssemblyReferenceNode\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.AssemblyReferenceNode.#ctor(Microsoft.VisualStudio.Project.ProjectNode,System.String)\">\r\n    <summary>\r\n    Constructor for the AssemblyReferenceNode\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public class AssemblyReferenceNode\r\n\r\n#endregion",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.AssemblyReferenceNode",
          "XmlDocumentation": ""
        },
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "Page",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Page",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "RootNamespace",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.RootNamespace",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "BuildAction",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.BuildAction",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ResolvedProjectReferencePaths",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.ResolvedProjectReferencePaths",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectReference",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.ProjectReference",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "EmbedInteropTypes",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.EmbedInteropTypes",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Generator",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Generator",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Platform",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Platform",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Folder",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Folder",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Resource",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Resource",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SccProjectName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.SccProjectName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "DependentUpon",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.DependentUpon",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Template",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Template",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WebReferenceFolder",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.WebReferenceFolder",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SccLocalPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.SccLocalPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Reference",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Reference",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Private",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Private",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SccAuxPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.SccAuxPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "AssemblyName",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.AssemblyName",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "OutputType",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.OutputType",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "HintPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.HintPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "InstanceGuid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.InstanceGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "COMReference",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.COMReference",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "LinkedIntoProjectAt",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.LinkedIntoProjectAt",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Guid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Guid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "VersionMajor",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.VersionMajor",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Isolated",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Isolated",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FlavorProperties",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.FlavorProperties",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "User",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.User",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SubType",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.SubType",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "TypeGuid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.TypeGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Project",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Project",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectTypeGuids",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.ProjectTypeGuids",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "VersionMinor",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.VersionMinor",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Lcid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Lcid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReferencePath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.ReferencePath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "AvailablePlatforms",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.AvailablePlatforms",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ProjectGuid",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.ProjectGuid",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Link",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Link",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "VisualStudio",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.VisualStudio",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SccProvider",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.SccProvider",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WrapperTool",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.WrapperTool",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "CustomToolNamespace",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.CustomToolNamespace",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Content",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Content",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "BuildVerbosity",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.BuildVerbosity",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ApplicationDefinition",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.ApplicationDefinition",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "None",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.None",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "WebReference",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.WebReference",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Configuration",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Configuration",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Name",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Name",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "EmbeddedResource",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.EmbeddedResource",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "BuildingInsideVisualStudio",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.BuildingInsideVisualStudio",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Include",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Include",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "FinalOutputPath",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.FinalOutputPath",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Compile",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.Compile",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "SubProject",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project.ProjectFileConstants.SubProject",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public static class ProjectFileConstants",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectFileConstants\">\r\n    <summary>\r\n    Defines the constant strings used with project files.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ProjectFileConstants",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ProjectFileConstants\">\r\n    <summary>\r\n    Defines the constant strings used with project files.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "public override int Open(ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file using the standard editor\r\n    </summary>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file using the standard editor\r\n    </summary>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Open(bool newFile, bool openWith, Guid logicalView, out IVsWindowFrame frame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window with a std editor\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"frame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window with a std editor\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"frame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public int Open(bool newFile, bool openWith, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window with a std editor\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window with a std editor\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "public override int OpenWithSpecific(uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file with a specific editor\r\n    </summary>\r\n    <param name=\"editorFlags\">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>\r\n    <param name=\"editorType\">Unique identifier of the editor type</param>\r\n    <param name=\"physicalView\">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.OpenWithSpecific(System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file with a specific editor\r\n    </summary>\r\n    <param name=\"editorFlags\">Specifies actions to take when opening a specific editor. Possible editor flags are defined in the enumeration Microsoft.VisualStudio.Shell.Interop.__VSOSPEFLAGS</param>\r\n    <param name=\"editorType\">Unique identifier of the editor type</param>\r\n    <param name=\"physicalView\">Name of the physical view. If null, the environment calls MapLogicalView on the editor factory to determine the physical view that corresponds to the logical view. In this case, null does not specify the primary view, but rather indicates that you do not know which view corresponds to the logical view</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "private int Open(bool newFile, bool openWith, uint editorFlags, ref Guid editorType, string physicalView, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.UInt32,System.Guid@,System.String,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "public virtual int Open(bool newFile, bool openWith, ref Guid logicalView, IntPtr docDataExisting, out IVsWindowFrame windowFrame, WindowFrameShowAction windowFrameAction)",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.FileDocumentManager.Open(System.Boolean,System.Boolean,System.Guid@,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@,Microsoft.VisualStudio.Project.WindowFrameShowAction)\">\r\n    <summary>\r\n    Open a file in a document window\r\n    </summary>\r\n    <param name=\"newFile\">Open the file as a new file</param>\r\n    <param name=\"openWith\">Use a dialog box to determine which editor to use</param>\r\n    <param name=\"logicalView\">In MultiView case determines view to be activated by IVsMultiViewDocumentView. For a list of logical view GUIDS, see constants starting with LOGVIEWID_ defined in NativeMethods class</param>\r\n    <param name=\"docDataExisting\">IntPtr to the IUnknown interface of the existing document data object</param>\r\n    <param name=\"windowFrame\">A reference to the window frame that is mapped to the file</param>\r\n    <param name=\"windowFrameAction\">Determine the UI action on the document window</param>\r\n    <returns>If the method succeeds, it returns S_OK. If it fails, it returns an error code.</returns>\r\n</member>\r\n"
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public FileDocumentManager(FileNode node): base (node)",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.FileDocumentManager.#ctor(Microsoft.VisualStudio.Project.FileNode)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public class FileDocumentManager\r\n\r\n#endregion",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.FileDocumentManager\">\r\n    <summary>\r\n    This class handles opening, saving of file items in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.FileDocumentManager",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.FileDocumentManager\">\r\n    <summary>\r\n    This class handles opening, saving of file items in the hierarchy.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Interfaces": [
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "IReferenceContainer GetReferenceContainer();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IReferenceContainerProvider.GetReferenceContainer",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public interface IReferenceContainerProvider",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IReferenceContainerProvider\">\r\n    <summary>\r\n    Provides access to the reference data container.\r\n    </summary>\r\n    <remarks>Normally this should be an internal interface but since it should be available for\r\n    the aggregator it must be made public.</remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IReferenceContainerProvider",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IReferenceContainerProvider\">\r\n    <summary>\r\n    Provides access to the reference data container.\r\n    </summary>\r\n    <remarks>Normally this should be an internal interface but since it should be available for\r\n    the aggregator it must be made public.</remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "[SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", MessageId = \"Hierachies\")]\r\n        IVsHierarchy[] EnumNestedHierachiesForBuildDependency();",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer.EnumNestedHierachiesForBuildDependency\">\r\n    <summary>\r\n    Enumerates the nested hierachies present that will participate in the build dependency update.\r\n    </summary>\r\n    <returns>A list of hierrachies.</returns>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer.EnumNestedHierachiesForBuildDependency",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer.EnumNestedHierachiesForBuildDependency\">\r\n    <summary>\r\n    Enumerates the nested hierachies present that will participate in the build dependency update.\r\n    </summary>\r\n    <returns>A list of hierrachies.</returns>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "bool BuildNestedProjectsOnBuild",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer.BuildNestedProjectsOnBuild\">\r\n    <summary>\r\n    Defines whether the nested projects should be build with the parent project.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer.BuildNestedProjectsOnBuild",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer.BuildNestedProjectsOnBuild\">\r\n    <summary>\r\n    Defines whether the nested projects should be build with the parent project.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public interface IBuildDependencyOnProjectContainer",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer\">\r\n    <summary>\r\n    This interface defines the rules for handling build dependency on a project container.\r\n    </summary>\r\n    <remarks>Normally this should be an internal interface but since it shouldbe available for the aggregator it must be made public.</remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IBuildDependencyOnProjectContainer\">\r\n    <summary>\r\n    This interface defines the rules for handling build dependency on a project container.\r\n    </summary>\r\n    <remarks>Normally this should be an internal interface but since it shouldbe available for the aggregator it must be made public.</remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "void LoadReferencesFromBuildProject(MSBuild.Project buildProject);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IReferenceContainer.LoadReferencesFromBuildProject(Microsoft.Build.Evaluation.Project)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "ReferenceNode AddReferenceFromSelectorData(VSCOMPONENTSELECTORDATA selectorData, string wrapperTool = null);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IReferenceContainer.AddReferenceFromSelectorData(Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORDATA,System.String)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "IList<ReferenceNode> EnumReferences();",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IReferenceContainer.EnumReferences",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public interface IReferenceContainer",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IReferenceContainer\">\r\n    <summary>\r\n    Defines a container for manipulating references\r\n    </summary>\r\n    <remarks>Normally this should be an internal interface but since it should be available for\r\n    the aggregator it must be made public.</remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IReferenceContainer",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IReferenceContainer\">\r\n    <summary>\r\n    Defines a container for manipulating references\r\n    </summary>\r\n    <remarks>Normally this should be an internal interface but since it should be available for\r\n    the aggregator it must be made public.</remarks>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "void OnSinkRemoved(SinkType sink);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IEventSource`1.OnSinkRemoved(`0)",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "void OnSinkAdded(SinkType sink);",
                "XmlDocumentation": ""
              },
              "Id": "M:Microsoft.VisualStudio.Project.IEventSource`1.OnSinkAdded(`0)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal interface IEventSource<SinkType>\r\n    where SinkType : class",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IEventSource`1\">\r\n    <summary>\r\n    Class used to identify a source of events of type SinkType.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IEventSource`1",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IEventSource`1\">\r\n    <summary>\r\n    Class used to identify a source of events of type SinkType.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Events": [
            {
              "Syntax": {
                "Content": "BeforeProjectFileClosed",
                "XmlDocumentation": "<member name=\"E:Microsoft.VisualStudio.Project.IProjectEvents.BeforeProjectFileClosed\">\r\n    <summary>\r\n    Event raised before the project file closed.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "E:Microsoft.VisualStudio.Project.IProjectEvents.BeforeProjectFileClosed",
              "XmlDocumentation": "<member name=\"E:Microsoft.VisualStudio.Project.IProjectEvents.BeforeProjectFileClosed\">\r\n    <summary>\r\n    Event raised before the project file closed.\r\n    </summary>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "AfterProjectFileOpened",
                "XmlDocumentation": "<member name=\"E:Microsoft.VisualStudio.Project.IProjectEvents.AfterProjectFileOpened\">\r\n    <summary>\r\n    Event raised just after the project file opened.\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "E:Microsoft.VisualStudio.Project.IProjectEvents.AfterProjectFileOpened",
              "XmlDocumentation": "<member name=\"E:Microsoft.VisualStudio.Project.IProjectEvents.AfterProjectFileOpened\">\r\n    <summary>\r\n    Event raised just after the project file opened.\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public interface IProjectEvents",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IProjectEvents\">\r\n    <summary>\r\n    Defines the events that are internally defined for communication with other subsytems.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IProjectEvents",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IProjectEvents\">\r\n    <summary>\r\n    Defines the events that are internally defined for communication with other subsytems.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "void RunGenerator(string document);",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ISingleFileGenerator.RunGenerator(System.String)\">\r\n    <summary>\r\n     Runs the generator on the item represented by the document moniker.\r\n     </summary>\r\n     <param name=\"document\"></param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.ISingleFileGenerator.RunGenerator(System.String)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.ISingleFileGenerator.RunGenerator(System.String)\">\r\n    <summary>\r\n     Runs the generator on the item represented by the document moniker.\r\n     </summary>\r\n     <param name=\"document\"></param>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public interface ISingleFileGenerator",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ISingleFileGenerator\">\r\n    <summary>\r\n    Defines support for single file generator\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.ISingleFileGenerator",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.ISingleFileGenerator\">\r\n    <summary>\r\n    Defines support for single file generator\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "void RemoveBuildDependency(IVsBuildDependency dependency);",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.RemoveBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)\">\r\n    <summary>\r\n    Removes the builddependency from teh container.\r\n    </summary>\r\n    <param name=\"dependency\">The dependency to add</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.RemoveBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.RemoveBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)\">\r\n    <summary>\r\n    Removes the builddependency from teh container.\r\n    </summary>\r\n    <param name=\"dependency\">The dependency to add</param>\r\n</member>\r\n"
            },
            {
              "Syntax": {
                "Content": "void AddBuildDependency(IVsBuildDependency dependency);",
                "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.AddBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)\">\r\n    <summary>\r\n    Adds a BuildDependency to the container\r\n    </summary>\r\n    <param name=\"dependency\">The dependency to add</param>\r\n</member>\r\n"
              },
              "Id": "M:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.AddBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)",
              "XmlDocumentation": "<member name=\"M:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.AddBuildDependency(Microsoft.VisualStudio.Shell.Interop.IVsBuildDependency)\">\r\n    <summary>\r\n    Adds a BuildDependency to the container\r\n    </summary>\r\n    <param name=\"dependency\">The dependency to add</param>\r\n</member>\r\n"
            }
          ],
          "Properties": [
            {
              "Syntax": {
                "Content": "IVsBuildDependency[] BuildDependencies",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.BuildDependencies\">\r\n    <summary>\r\n    Defines a container for storing BuildDependencies\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.BuildDependencies",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IBuildDependencyUpdate.BuildDependencies\">\r\n    <summary>\r\n    Defines a container for storing BuildDependencies\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public interface IBuildDependencyUpdate",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IBuildDependencyUpdate\">\r\n    <summary>\r\n    Interface for manipulating build dependency\r\n    </summary>\r\n    <remarks>Normally this should be an internal interface but since it shouldbe available for the aggregator it must be made public.</remarks>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IBuildDependencyUpdate",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IBuildDependencyUpdate\">\r\n    <summary>\r\n    Interface for manipulating build dependency\r\n    </summary>\r\n    <remarks>Normally this should be an internal interface but since it shouldbe available for the aggregator it must be made public.</remarks>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "Syntax": {
                "Content": "string OutputPath",
                "XmlDocumentation": ""
              },
              "Id": "P:Microsoft.VisualStudio.Project.IProjectConfigProperties.OutputPath",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "public interface IProjectConfigProperties",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IProjectConfigProperties\">\r\n    <summary>\r\n    Defines the config dependent properties exposed through automation\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IProjectConfigProperties",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IProjectConfigProperties\">\r\n    <summary>\r\n    Defines the config dependent properties exposed through automation\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "Syntax": {
                "Content": "IProjectEvents ProjectEventsProvider",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IProjectEventsProvider.ProjectEventsProvider\">\r\n    <summary>\r\n    Defines the provider for the project events\r\n    </summary>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.IProjectEventsProvider.ProjectEventsProvider",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IProjectEventsProvider.ProjectEventsProvider\">\r\n    <summary>\r\n    Defines the provider for the project events\r\n    </summary>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public interface IProjectEventsProvider",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IProjectEventsProvider\">\r\n    <summary>\r\n    Enable getting and setting the project events provider\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IProjectEventsProvider",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IProjectEventsProvider\">\r\n    <summary>\r\n    Enable getting and setting the project events provider\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Properties": [
            {
              "Syntax": {
                "Content": "bool IsProjectEventsListener",
                "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IProjectEventsListener.IsProjectEventsListener\">\r\n    <summary>\r\n    Is the object a project events listener.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
              },
              "Id": "P:Microsoft.VisualStudio.Project.IProjectEventsListener.IsProjectEventsListener",
              "XmlDocumentation": "<member name=\"P:Microsoft.VisualStudio.Project.IProjectEventsListener.IsProjectEventsListener\">\r\n    <summary>\r\n    Is the object a project events listener.\r\n    </summary>\r\n    <returns></returns>\r\n</member>\r\n"
            }
          ],
          "Syntax": {
            "Content": "public interface IProjectEventsListener",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IProjectEventsListener\">\r\n    <summary>\r\n    Defines the interface that will specify ehethrr the object is a project events listener.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.IProjectEventsListener",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.IProjectEventsListener\">\r\n    <summary>\r\n    Defines the interface that will specify ehethrr the object is a project events listener.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Structs": [
        {
          "Fields": [
            {
              "Syntax": {
                "Content": "fWide",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project._DROPFILES.fWide",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "pFiles",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project._DROPFILES.pFiles",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "fNC",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project._DROPFILES.fNC",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "Y",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project._DROPFILES.Y",
              "XmlDocumentation": ""
            },
            {
              "Syntax": {
                "Content": "X",
                "XmlDocumentation": ""
              },
              "Id": "F:Microsoft.VisualStudio.Project._DROPFILES.X",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "internal struct _DROPFILES",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project._DROPFILES",
          "XmlDocumentation": ""
        }
      ],
      "Enums": [
        {
          "Syntax": {
            "Content": "public enum BuildAction",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildAction\">\r\n    <summary>\r\n    An enumeration that describes the type of action to be taken by the build.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildAction",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildAction\">\r\n    <summary>\r\n    An enumeration that describes the type of action to be taken by the build.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum MSBuildResult",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.MSBuildResult\">\r\n    <summary>\r\n    Defines the current status of the build process.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.MSBuildResult",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.MSBuildResult\">\r\n    <summary>\r\n    Defines the current status of the build process.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "internal enum BuildPropertyPageTag",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildPropertyPageTag\">\r\n    <summary>\r\n    Enumerated list of the properties shown on the build property page\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildPropertyPageTag",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildPropertyPageTag\">\r\n    <summary>\r\n    Enumerated list of the properties shown on the build property page\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum WindowFrameShowAction",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.WindowFrameShowAction\">\r\n    <summary>\r\n    Defines the type of action to be taken in showing the window frame.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.WindowFrameShowAction",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.WindowFrameShowAction\">\r\n    <summary>\r\n    Defines the type of action to be taken in showing the window frame.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum GlobalProperty",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.GlobalProperty\">\r\n    <summary>\r\n    Defines the global propeties used by the msbuild project.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.GlobalProperty",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.GlobalProperty\">\r\n    <summary>\r\n    Defines the global propeties used by the msbuild project.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "internal enum DropDataType",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DropDataType\">\r\n    <summary>\r\n    Defines drop types\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DropDataType",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DropDataType\">\r\n    <summary>\r\n    Defines drop types\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum TokenReplaceType",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.TokenReplaceType\">\r\n    <summary>\r\n    Replacement type\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.TokenReplaceType",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.TokenReplaceType\">\r\n    <summary>\r\n    Replacement type\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "internal enum tagTYMED",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.tagTYMED",
          "XmlDocumentation": ""
        },
        {
          "Syntax": {
            "Content": "public enum WrapperToolAttributeValue",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.WrapperToolAttributeValue",
          "XmlDocumentation": ""
        },
        {
          "Syntax": {
            "Content": "public enum CommandOrigin",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.CommandOrigin\">\r\n    <summary>\r\n    Defines the component from which a command was issued.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.CommandOrigin",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.CommandOrigin\">\r\n    <summary>\r\n    Defines the component from which a command was issued.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum PropPageStatus",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropPageStatus\">\r\n    <summary>\r\n    Defines the currect state of a property page.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.PropPageStatus",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.PropPageStatus\">\r\n    <summary>\r\n    Defines the currect state of a property page.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum UIHierarchyElement",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UIHierarchyElement\">\r\n    <summary>\r\n    Used by the hierarchy node to decide which element to redraw.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.UIHierarchyElement",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.UIHierarchyElement\">\r\n    <summary>\r\n    Used by the hierarchy node to decide which element to redraw.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum BuildKind",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildKind\">\r\n    <summary>\r\n    The type of build performed.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.BuildKind",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.BuildKind\">\r\n    <summary>\r\n    The type of build performed.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "internal enum tagDVASPECT",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.tagDVASPECT",
          "XmlDocumentation": ""
        },
        {
          "Syntax": {
            "Content": "public enum DebugMode",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DebugMode\">\r\n    <summary>\r\n    Debug values used by DebugModeConverter.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.DebugMode",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.DebugMode\">\r\n    <summary>\r\n    Debug values used by DebugModeConverter.\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum QueryStatusResult",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.QueryStatusResult\">\r\n    <summary>\r\n    Defines the status of the command being queried\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.QueryStatusResult",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.QueryStatusResult\">\r\n    <summary>\r\n    Defines the status of the command being queried\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum OutputType",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.OutputType\">\r\n    <summary>\r\n    Defines possible types of output that can produced by a language project\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.OutputType",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.OutputType\">\r\n    <summary>\r\n    Defines possible types of output that can produced by a language project\r\n    </summary>\r\n</member>\r\n"
        },
        {
          "Syntax": {
            "Content": "public enum ModuleKindFlags",
            "XmlDocumentation": ""
          },
          "Id": "T:Microsoft.VisualStudio.Project.ModuleKindFlags",
          "XmlDocumentation": ""
        },
        {
          "Syntax": {
            "Content": "public enum HierarchyAddType",
            "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.HierarchyAddType\">\r\n    <summary>\r\n    Defines the type of item to be added to the hierarchy.\r\n    </summary>\r\n</member>\r\n"
          },
          "Id": "T:Microsoft.VisualStudio.Project.HierarchyAddType",
          "XmlDocumentation": "<member name=\"T:Microsoft.VisualStudio.Project.HierarchyAddType\">\r\n    <summary>\r\n    Defines the type of item to be added to the hierarchy.\r\n    </summary>\r\n</member>\r\n"
        }
      ],
      "Id": "N:Microsoft.VisualStudio.Project",
      "XmlDocumentation": ""
    },
    {
      "Classes": [
        {
          "Methods": [
            {
              "Syntax": {
                "Content": "protected override ProjectNode CreateProject()",
                "XmlDocumentation": ""
              },
              "Id": "M:MicrosoftIT.DocProject.Templates.Projects.DocProject.DocProjectFactory.CreateProject",
              "XmlDocumentation": ""
            }
          ],
          "Fields": [
            {
              "Syntax": {
                "Content": "package",
                "XmlDocumentation": ""
              },
              "Id": "F:MicrosoftIT.DocProject.Templates.Projects.DocProject.DocProjectFactory.package",
              "XmlDocumentation": ""
            }
          ],
          "Constructors": [
            {
              "Syntax": {
                "Content": "public DocProjectFactory(DocProjectPackage package): base (package)",
                "XmlDocumentation": ""
              },
              "Id": "M:MicrosoftIT.DocProject.Templates.Projects.DocProject.DocProjectFactory.#ctor(MicrosoftIT.DocProject.DocProjectPackage)",
              "XmlDocumentation": ""
            }
          ],
          "Syntax": {
            "Content": "class DocProjectFactory",
            "XmlDocumentation": ""
          },
          "Id": "T:MicrosoftIT.DocProject.Templates.Projects.DocProject.DocProjectFactory",
          "XmlDocumentation": ""
        }
      ],
      "Id": "N:MicrosoftIT.DocProject.Templates.Projects.DocProject",
      "XmlDocumentation": ""
    }
  ],
  "Id": "DocProject",
  "MscorlibVersion": {
    "Major": 4
  }
}